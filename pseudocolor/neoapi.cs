//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------
using System;

namespace NeoAPI {

/// <summary>
/// Class for the Color Transformation Matrix
/// </summary>
public class ColorMatrix : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ColorMatrix(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColorMatrix obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~ColorMatrix() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_ColorMatrix(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public ColorMatrix() : this(neoapi_csharpPINVOKE.new_ColorMatrix__SWIG_0(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="arg0">A ColorMatrix object</param>
  public ColorMatrix(ColorMatrix arg0) : this(neoapi_csharpPINVOKE.new_ColorMatrix__SWIG_1(ColorMatrix.getCPtr(arg0)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Get the value of a matrix element
  /// </summary>
  /// <param name="gain_selector">The element of the Matrix by it's SFNC name.</param>
  /// <returns>The value of the selected element</returns>
  public virtual double GetValue(ColorMatrix.Gain gain_selector) {
    double ret = neoapi_csharpPINVOKE.ColorMatrix_GetValue(swigCPtr, (int)gain_selector);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Set the value of a matrix element
  /// </summary>
  /// <param name="gain_selector">The SFNC name for the element</param>
  /// <param name="value"> The new value for this element.</param>
  /// <returns>The ColorMatrix object</returns>
  public virtual ColorMatrix SetValue(ColorMatrix.Gain gain_selector, double value) {
    ColorMatrix ret = new ColorMatrix(neoapi_csharpPINVOKE.ColorMatrix_SetValue(swigCPtr, (int)gain_selector, value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Valid names for the Color Matrix elements
  /// </summary>
  public enum Gain {
  /// <summary>The red contribution to the red pixels (multiplicative factor)</summary>
    Gain00 = 0,
  /// <summary>The green contribution to the red pixels (multiplicative factor)</summary>
    Gain01,
  /// <summary>The blue contribution to the red pixels (multiplicative factor)</summary>
    Gain02,
  /// <summary>The red contribution to the green pixels (multiplicative factor)</summary>
    Gain10,
  /// <summary>The green contribution to the green pixels (multiplicative factor)</summary>
    Gain11,
  /// <summary>The blue contribution to the blue pixels (multiplicative factor)</summary>
    Gain12,
  /// <summary>The red contribution to the blue pixels (multiplicative factor)</summary>
    Gain20,
  /// <summary>The green contribution to the blue pixels (multiplicative factor)</summary>
    Gain21,
  /// <summary>The blue contribution to the blue pixels (multiplicative factor)</summary>
    Gain22
  }

}

}
namespace NeoAPI {

/// <summary>
/// Image processing settings
/// </summary>
public class ConverterSettings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ConverterSettings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConverterSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~ConverterSettings() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_ConverterSettings(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public ConverterSettings() : this(neoapi_csharpPINVOKE.new_ConverterSettings__SWIG_0(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="arg0">A ConverterSettings object</param>
  public ConverterSettings(ConverterSettings arg0) : this(neoapi_csharpPINVOKE.new_ConverterSettings__SWIG_1(ConverterSettings.getCPtr(arg0)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Target PixelFormat for a conversion
  /// </summary>
  public string DebayerFormat {
    set {
      neoapi_csharpPINVOKE.ConverterSettings_DebayerFormat_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = neoapi_csharpPINVOKE.ConverterSettings_DebayerFormat_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// SharpeningMode for a conversion
  /// </summary>
  public ConverterSettings.Sharpening SharpeningMode {
    set {
      neoapi_csharpPINVOKE.ConverterSettings_SharpeningMode_set(swigCPtr, (int)value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ConverterSettings.Sharpening ret = (ConverterSettings.Sharpening)neoapi_csharpPINVOKE.ConverterSettings_SharpeningMode_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// DemosaicingMethod for a conversion
  /// </summary>
  public ConverterSettings.Demosaicing DemosaicingMethod {
    set {
      neoapi_csharpPINVOKE.ConverterSettings_DemosaicingMethod_set(swigCPtr, (int)value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ConverterSettings.Demosaicing ret = (ConverterSettings.Demosaicing)neoapi_csharpPINVOKE.ConverterSettings_DemosaicingMethod_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// SharpeningFactor for a conversion
  /// </summary>
  public uint SharpeningFactor {
    set {
      neoapi_csharpPINVOKE.ConverterSettings_SharpeningFactor_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = neoapi_csharpPINVOKE.ConverterSettings_SharpeningFactor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// SharpeningSensitivityThreshold for a conversion
  /// </summary>
  public uint SharpeningSensitivityThreshold {
    set {
      neoapi_csharpPINVOKE.ConverterSettings_SharpeningSensitivityThreshold_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = neoapi_csharpPINVOKE.ConverterSettings_SharpeningSensitivityThreshold_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// ColorTransformationMatrix for a conversion
  /// </summary>
  public ColorMatrix ColorTransformationMatrix {
    set {
      neoapi_csharpPINVOKE.ConverterSettings_ColorTransformationMatrix_set(swigCPtr, ColorMatrix.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.ConverterSettings_ColorTransformationMatrix_get(swigCPtr);
      ColorMatrix ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColorMatrix(cPtr, true);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Valid values for SharpeningMode
  /// </summary>
  public enum Sharpening {
  /// <summary>The Sharpening Mode is off.</summary>
    Off = 0,
  /// <summary>Sharpening in every area of the image, independent of the content.</summary>
    Global,
  /// <summary>No sharpening in homogeneous image areas.</summary>
    Adaptive,
  /// <summary>The Sharpening Mode is Active Noise Reduction.</summary>
    ActiveNoiseReduction
  }

  /// <summary>
  /// Valid values for DemosaicingMethod
  /// </summary>
  public enum Demosaicing {
  /// <summary>Bilinear 3x3</summary>
    Bilinear3x3 = 0,
  /// <summary>Baumer 5x5</summary>
    Baumer5x5,
  /// <summary>Nearest Neighbor</summary>
    NearestNeighbor
  }

}

}
namespace NeoAPI {

/// <summary>
/// Provides access to events
/// </summary>
public class NeoEvent : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NeoEvent(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NeoEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~NeoEvent() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_NeoEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public NeoEvent() : this(neoapi_csharpPINVOKE.new_NeoEvent__SWIG_0(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="arg0">A NeoEvent object</param>
  public NeoEvent(NeoEvent arg0) : this(neoapi_csharpPINVOKE.new_NeoEvent__SWIG_1(NeoEvent.getCPtr(arg0)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Check if the event is empty or filled with data
  /// </summary>
  public bool IsEmpty {
    get {
      bool ret = neoapi_csharpPINVOKE.NeoEvent_IsEmpty_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// ID of the camera.
  /// </summary>
  public string CameraId {
    get {
      string ret = neoapi_csharpPINVOKE.NeoEvent_CameraId_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Name of the event
  /// </summary>
  public string Name {
    get {
      string ret = neoapi_csharpPINVOKE.NeoEvent_Name_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Timestamp of the event
  /// </summary>
  public ulong Timestamp {
    get {
      ulong ret = neoapi_csharpPINVOKE.NeoEvent_Timestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// ID of the event
  /// </summary>
  public ulong Id {
    get {
      ulong ret = neoapi_csharpPINVOKE.NeoEvent_Id_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Event callback class to derive from an get event data
/// </summary>
public class NeoEventCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NeoEventCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NeoEventCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~NeoEventCallback() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_NeoEventCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public NeoEventCallback() : this(neoapi_csharpPINVOKE.new_NeoEventCallback(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  /// <summary>
  /// Overwrite this method to receive event data
  /// </summary>
  /// <param name="arg0">The event data</param>
  public virtual void EventCallback(NeoEvent arg0) {
    if (SwigDerivedClassHasMethod("EventCallback", swigMethodTypes0)) neoapi_csharpPINVOKE.NeoEventCallback_EventCallbackSwigExplicitNeoEventCallback(swigCPtr, NeoEvent.getCPtr(arg0)); else neoapi_csharpPINVOKE.NeoEventCallback_EventCallback(swigCPtr, NeoEvent.getCPtr(arg0));
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("EventCallback", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateNeoEventCallback_0(SwigDirectorEventCallback);
    neoapi_csharpPINVOKE.NeoEventCallback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(NeoEventCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorEventCallback(global::System.IntPtr arg0) {
    try {
      EventCallback(new NeoEvent(arg0, false));
    }
    catch(System.Exception ex)
    {
      NeoTrace trace = new NeoTrace();
      trace.Error("Catched unhandled exception! Message: " + ex.Message,
        System.Reflection.Assembly.GetExecutingAssembly().GetName().Name,
        System.Reflection.MethodInfo.GetCurrentMethod().Name, this);
    };
  }

  /// <summary>
  /// internal
  /// </summary>
  /// <param name="arg0">internal</param>
  public delegate void SwigDelegateNeoEventCallback_0(global::System.IntPtr arg0);

  private SwigDelegateNeoEventCallback_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(NeoEvent) };
}

}
namespace NeoAPI {

/// <summary>
/// Provides access to camera features
/// </summary>
public class Feature : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Feature(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Feature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~Feature() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_Feature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  private object parentReference;
  protected System.Collections.Generic.Dictionary<string, Feature> enum_value_list_ = null;
  protected System.Collections.Generic.Dictionary<string, Feature> selected_feature_list_ = null;
  internal void addReference(object parent) {
    parentReference = parent;
  }
        #region class SmartValue
        /// <summary>Gets or Sets the value as 'long', 'double', 'bool' or 'string'.</summary>
        /// <summary>
        /// Gets or Sets a value as 'long', 'double', 'bool' or 'string' depending on the Feature type
        /// </summary>
        public class SmartValue
        {
            internal object genvalue;
            internal global::System.Type mObjType;

            internal SmartValue() { }

            /// <summary>
            /// Converts a SmartValue to a string
            /// </summary>
            /// <param name="value">A SmartValue</param>
            /// <returns>The value as string</returns>
            public static implicit operator string(SmartValue value)
            {
                return value.genvalue.ToString();
            }
            /// <summary>
            /// Converts a string to a SmartValue
            /// </summary>
            /// <param name="value">A string</param>
            /// <returns>The value as SmartValue</returns>
            public static implicit operator SmartValue(string value)
            {
                SmartValue node = new SmartValue();
                node.genvalue = value;
                node.mObjType = typeof(string);
                return node;
            }
            /// <summary>
            /// Converts a SmartValue to a Int64
            /// </summary>
            /// <param name="value">A SmartValue</param>
            /// <returns>The value as Int64</returns>
            public static implicit operator long(SmartValue value)
            {
                if (value.mObjType == typeof(double))
                {
                    return (long)(double)value.genvalue;
                }
                else if (value.mObjType == typeof(int))
                {
                    return (long)(int)value.genvalue;
                }
                else if (value.mObjType == typeof(bool))
                {
                    return (long)(((bool)value.genvalue)?1:0);
                }
                else
                {
                    return (long)value.genvalue;
                }
            }
            /// <summary>
            /// Converts a Int64 to a SmartValue
            /// </summary>
            /// <param name="value">A Int64</param>
            /// <returns>The value as SmartValue</returns>
            public static implicit operator SmartValue(long value)
            {
                SmartValue node = new SmartValue();
                node.genvalue = value;
                node.mObjType = typeof(long);
                return node;
            }
            /// <summary>
            /// Converts a SmartValue to a Int32
            /// </summary>
            /// <param name="value">A SmartValue</param>
            /// <returns>The value as Int32</returns>
            public static implicit operator int(SmartValue value)
            {
                if (value.mObjType == typeof(double))
                {
                    return (int)(double)value.genvalue;
                }
                else if (value.mObjType == typeof(long))
                {
                    return (int)(long)value.genvalue;
                }
                else if (value.mObjType == typeof(bool))
                {
                    return (int)(((bool)value.genvalue)?1:0);
                }
                else
                {
                    return (int)value.genvalue;
                }
            }
            /// <summary>
            /// Converts a Int32 to a SmartValue
            /// </summary>
            /// <param name="value">A Int32</param>
            /// <returns>The value as SmartValue</returns>
            public static implicit operator SmartValue(int value)
            {
                SmartValue node = new SmartValue();
                node.genvalue = value;
                node.mObjType = typeof(int);
                return node;
            }
            /// <summary>
            /// Converts a SmartValue to a double
            /// </summary>
            /// <param name="value">A SmartValue</param>
            /// <returns>The value as double</returns>
            public static implicit operator double(SmartValue value)
            {
                if (value.mObjType == typeof(int))
                {
                    return (double)(int)value.genvalue;
                }
                else if (value.mObjType == typeof(long))
                {
                    return (double)(long)value.genvalue;
                }
                else if (value.mObjType == typeof(bool))
                {
                    return (double)(((bool)value.genvalue)?1:0);
                }
                else
                {
                    return (double)value.genvalue;
                }
            }
            /// <summary>
            /// Converts a double to a SmartValue
            /// </summary>
            /// <param name="value">A double</param>
            /// <returns>The value as SmartValue</returns>
            public static implicit operator SmartValue(double value)
            {
                SmartValue node = new SmartValue();
                node.genvalue = value;
                node.mObjType = typeof(double);
                return node;
            }
            /// <summary>
            /// Converts a SmartValue to a bool
            /// </summary>
            /// <param name="value">A SmartValue</param>
            /// <returns>The value as bool</returns>
            public static implicit operator bool(SmartValue value)
            {
                return (bool)value.genvalue;
            }
            /// <summary>
            /// Converts a bool to a SmartValue
            /// </summary>
            /// <param name="value">A bool</param>
            /// <returns>The value as SmartValue</returns>
            public static implicit operator SmartValue(bool value)
            {
                SmartValue node = new SmartValue();
                node.genvalue = value;
                node.mObjType = typeof(bool);
                return node;
            }
        }
        #endregion

        #region Property Value
        /// <summary>
        /// Provides unified access to the Feature properties indepent from the Feature Type
        /// </summary>
        public SmartValue Value
        {
            get
            {
                string feature_interface = Interface;
                if (feature_interface == "IFloat")
                {
                    return ValueDouble;
                }
                else if (feature_interface == "IInteger")
                {
                    return ValueInt;
                }
                else if (feature_interface == "IBoolean")
                {
                    return ValueBool;
                }
                else
                {
                    return ValueString;
                }

            }
            set
            {
                if ((value.mObjType == typeof(long))
                    || (value.mObjType == typeof(int)))
                {
                    ValueInt = value;
                }
                else if (value.mObjType == typeof(double))
                {
                    ValueDouble = value;
                }
                else if (value.mObjType == typeof(bool))
                {
                    ValueBool = value;
                }
                else
                {
                    if (Interface == "IBoolean")
                    {
                        if((string)value == "True")
                        {
                            value = "1";
                        }
                        if ((string)value == "False")
                        {
                            value = "0";
                        }
                    }
                    ValueString = value;
                }
            }
        }
        #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  public Feature() : this(neoapi_csharpPINVOKE.new_Feature__SWIG_0(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="arg0">A Feature object</param>
  public Feature(Feature arg0) : this(neoapi_csharpPINVOKE.new_Feature__SWIG_1(Feature.getCPtr(arg0)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Get a list of all possible values of the Feature object
  /// </summary>
  /// <returns>The list of all possible values of the Feature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual System.Collections.Generic.Dictionary<string, Feature> GetEnumValueList() {
    enum_value_list_ = new System.Collections.Generic.Dictionary<string, Feature>();
    var neo_feature_list = neoapi_csharpPINVOKE.Feature_GetEnumValueList(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    var neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureList_begin(neo_feature_list);
    var neo_feature_list_end = neoapi_csharpPINVOKE.FeatureList_end(neo_feature_list);
    for(; neoapi_csharpPINVOKE.FeatureListIterator_operator_not_equal(neo_feature_list_iter, neo_feature_list_end);
        neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_postfix(neo_feature_list_iter))
    {
        enum_value_list_.Add(
        neoapi_csharpPINVOKE.FeatureListIterator_GetName(neo_feature_list_iter),
        new Feature(neoapi_csharpPINVOKE.FeatureListIterator___ref__(neo_feature_list_iter), false));
    }
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_end);
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_iter);
    
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return enum_value_list_;
}

  /// <summary>
  /// Executes the command of the Feature object
  /// </summary>
  /// <returns>The Feature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual Feature Execute() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.Feature_Execute(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    Feature ret = new Feature(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Get a list of features that depend on a selector Feature
  /// </summary>
  /// <returns>The list of all features that depend on this selector Feature</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual System.Collections.Generic.Dictionary<string, Feature> GetSelectedFeatureList() {
    selected_feature_list_ = new System.Collections.Generic.Dictionary<string, Feature>();
    var neo_feature_list = neoapi_csharpPINVOKE.Feature_GetSelectedFeatureList(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    var neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureList_begin(neo_feature_list);
    var neo_feature_list_end = neoapi_csharpPINVOKE.FeatureList_end(neo_feature_list);
    for(; neoapi_csharpPINVOKE.FeatureListIterator_operator_not_equal(neo_feature_list_iter, neo_feature_list_end);
        neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_postfix(neo_feature_list_iter))
    {
        selected_feature_list_.Add(
        neoapi_csharpPINVOKE.FeatureListIterator_GetName(neo_feature_list_iter),
        new Feature(neoapi_csharpPINVOKE.FeatureListIterator___ref__(neo_feature_list_iter), false));
    }
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_end);
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_iter);
    
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return selected_feature_list_;
}

  /// <summary>
  /// Reads the memory pointed to by the Feature object and writes it into the provided buffer
  /// </summary>
  /// <param name="buffer">The destination buffer into which the read data is copied</param>
  /// <param name="length">The size of the destination buffer. The property RegisterLength provides the necessary size</param>
  /// <returns>The Feature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual Feature GetRegister(byte[] buffer, ulong length) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.Feature_GetRegister(swigCPtr, buffer, length);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    Feature ret = new Feature(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Writes the memory pointed to by the Feature object
  /// </summary>
  /// <param name="buffer">The buffer for the data to be written</param>
  /// <param name="length">The size of the destination buffer. The property RegisterLength provides the necessary size</param>
  /// <returns>The Feature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual Feature SetRegister(byte[] buffer, ulong length) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.Feature_SetRegister(swigCPtr, buffer, length);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    Feature ret = new Feature(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Get the GenICam interface type of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Interface {
    get {
      string ret = neoapi_csharpPINVOKE.Feature_Interface_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get a short description of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string ToolTip {
    get {
      string ret = neoapi_csharpPINVOKE.Feature_ToolTip_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the description of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Description {
    get {
      string ret = neoapi_csharpPINVOKE.Feature_Description_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the name of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Name {
    get {
      string ret = neoapi_csharpPINVOKE.Feature_Name_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the display name of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string DisplayName {
    get {
      string ret = neoapi_csharpPINVOKE.Feature_DisplayName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the recommended visibility (Beginner/Expert/Guru or Invisible) of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Visibility {
    get {
      string ret = neoapi_csharpPINVOKE.Feature_Visibility_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates that the Feature object is readable
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsReadable {
    get {
      bool ret = neoapi_csharpPINVOKE.Feature_IsReadable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates if a Feature object is writeable
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsWritable {
    get {
      bool ret = neoapi_csharpPINVOKE.Feature_IsWritable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get a value, which recommends the representation type of the Feature object in a GUI
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Representation {
    get {
      string ret = neoapi_csharpPINVOKE.Feature_Representation_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the physical unit of the Feature object, only available for the interface types 'IFloat' and 'IInteger'
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Unit {
    get {
      string ret = neoapi_csharpPINVOKE.Feature_Unit_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates whether the Feature object is available
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsAvailable {
    get {
      bool ret = neoapi_csharpPINVOKE.Feature_IsAvailable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Access to the current value of the Feature object as integer value
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long ValueInt {
    set {
      neoapi_csharpPINVOKE.Feature_ValueInt_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = neoapi_csharpPINVOKE.Feature_ValueInt_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the smallest allowed value of the Feature object as integer
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long IntMin {
    get {
      long ret = neoapi_csharpPINVOKE.Feature_IntMin_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the largest allowed value of the Feature object as integer
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long IntMax {
    get {
      long ret = neoapi_csharpPINVOKE.Feature_IntMax_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the allowed step size for the value of the Feature object as integer
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long IntInc {
    get {
      long ret = neoapi_csharpPINVOKE.Feature_IntInc_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Access to the current value of the Feature object as floating-point number
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public double ValueDouble {
    set {
      neoapi_csharpPINVOKE.Feature_ValueDouble_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = neoapi_csharpPINVOKE.Feature_ValueDouble_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the smallest allowed value of the Feature object as a floating-point number
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public double DoubleMin {
    get {
      double ret = neoapi_csharpPINVOKE.Feature_DoubleMin_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the largest allowed value of the Feature object as a floating-point number
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public double DoubleMax {
    get {
      double ret = neoapi_csharpPINVOKE.Feature_DoubleMax_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the allowed step size for the value of the Feature object as a floating-point number
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public double DoubleInc {
    get {
      double ret = neoapi_csharpPINVOKE.Feature_DoubleInc_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the precision for the corresponding double
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long DoublePrecision {
    get {
      long ret = neoapi_csharpPINVOKE.Feature_DoublePrecision_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the maximum allowed string-length of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long MaxStringLength {
    get {
      long ret = neoapi_csharpPINVOKE.Feature_MaxStringLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Access to the current value of the Feature object as a string
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string ValueString {
    set {
      neoapi_csharpPINVOKE.Feature_ValueString_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = neoapi_csharpPINVOKE.Feature_ValueString_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates whether the command of the Feature object is still executing
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsDone {
    get {
      bool ret = neoapi_csharpPINVOKE.Feature_IsDone_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Access to the current value of the Feature object as boolean value
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool ValueBool {
    set {
      neoapi_csharpPINVOKE.Feature_ValueBool_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = neoapi_csharpPINVOKE.Feature_ValueBool_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates whether the Feature object is a selector
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsSelector {
    get {
      bool ret = neoapi_csharpPINVOKE.Feature_IsSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the length in bytes of the memory pointed to by the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public ulong RegisterLength {
    get {
      ulong ret = neoapi_csharpPINVOKE.Feature_RegisterLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the address of the memory pointed to by the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public ulong RegisterAddress {
    get {
      ulong ret = neoapi_csharpPINVOKE.Feature_RegisterAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Base Feature class providing the interface to be used independent of Feature data-type
/// </summary>
public class BaseFeature : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseFeature(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseFeature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~BaseFeature() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_BaseFeature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  private object parentReference;
  internal void addReference(object parent) {
    parentReference = parent;
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">The pointer to the camera</param>
  /// <param name="name">The name of the Feature</param>
  public BaseFeature(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_BaseFeature__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="feature">A BaseFeature object</param>
  public BaseFeature(BaseFeature feature) : this(neoapi_csharpPINVOKE.new_BaseFeature__SWIG_1(BaseFeature.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Get the GenICam data type of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Interface {
    get {
      string ret = neoapi_csharpPINVOKE.BaseFeature_Interface_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get a short description of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string ToolTip {
    get {
      string ret = neoapi_csharpPINVOKE.BaseFeature_ToolTip_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the description of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Description {
    get {
      string ret = neoapi_csharpPINVOKE.BaseFeature_Description_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the name of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Name {
    get {
      string ret = neoapi_csharpPINVOKE.BaseFeature_Name_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the display name of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string DisplayName {
    get {
      string ret = neoapi_csharpPINVOKE.BaseFeature_DisplayName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the recommended visibility (Beginner/Expert/Guru or Invisible) of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Visibility {
    get {
      string ret = neoapi_csharpPINVOKE.BaseFeature_Visibility_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates that the Feature object is readable
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsReadable {
    get {
      bool ret = neoapi_csharpPINVOKE.BaseFeature_IsReadable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates if a Feature object is writable
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsWritable {
    get {
      bool ret = neoapi_csharpPINVOKE.BaseFeature_IsWritable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates whether the Feature object is available
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsAvailable {
    get {
      bool ret = neoapi_csharpPINVOKE.BaseFeature_IsAvailable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Class providing the 'IFloat' interface
/// </summary>
public class DoubleFeature : BaseFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal DoubleFeature(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.DoubleFeature_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DoubleFeature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~DoubleFeature() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_DoubleFeature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">The pointer to the camera</param>
  /// <param name="name">TheName of the Feature</param>
  public DoubleFeature(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_DoubleFeature__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="feature">A DoubleFeature object</param>
  public DoubleFeature(DoubleFeature feature) : this(neoapi_csharpPINVOKE.new_DoubleFeature__SWIG_1(DoubleFeature.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Access to the current value of the Feature object as floating-point number
  /// </summary>
  /// <returns>The current value of the Feature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public double Value {
    set {
      neoapi_csharpPINVOKE.DoubleFeature_Value_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = neoapi_csharpPINVOKE.DoubleFeature_Value_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the smallest allowed value of the Feature object as a floating-point number
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public double Min {
    get {
      double ret = neoapi_csharpPINVOKE.DoubleFeature_Min_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the largest allowed value of the Feature object as a floating-point number
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public double Max {
    get {
      double ret = neoapi_csharpPINVOKE.DoubleFeature_Max_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the allowed step size for the value of the Feature object as a floating-point number
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public double Inc {
    get {
      double ret = neoapi_csharpPINVOKE.DoubleFeature_Inc_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the physical unit of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Unit {
    get {
      string ret = neoapi_csharpPINVOKE.DoubleFeature_Unit_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the precision for the corresponding double
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long Precision {
    get {
      long ret = neoapi_csharpPINVOKE.DoubleFeature_Precision_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get a value, which recommends the representation type of the Feature object in a GUI
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Representation {
    get {
      string ret = neoapi_csharpPINVOKE.DoubleFeature_Representation_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the value of the Feature as a string
  /// </summary>
  /// <returns>The value  of the Feature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string ValueString {
    get {
      string ret = neoapi_csharpPINVOKE.DoubleFeature_ValueString_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Class providing the 'IInteger' interface
/// </summary>
public class IntegerFeature : BaseFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IntegerFeature(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.IntegerFeature_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntegerFeature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~IntegerFeature() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_IntegerFeature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    protected System.Collections.Generic.Dictionary<string, Feature> selected_feature_list_ = null;

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">The pointer to the camera</param>
  /// <param name="name">The name of the Feature</param>
  public IntegerFeature(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_IntegerFeature__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="feature">A IntegerFeature object</param>
  public IntegerFeature(IntegerFeature feature) : this(neoapi_csharpPINVOKE.new_IntegerFeature__SWIG_1(IntegerFeature.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Get a list of features that depend on this selector Feature
  /// </summary>
  /// <returns>The list of all features that depend on this selector Feature</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual System.Collections.Generic.Dictionary<string, Feature> GetSelectedFeatureList() {
    selected_feature_list_ = new System.Collections.Generic.Dictionary<string, Feature>();
    var neo_feature_list = neoapi_csharpPINVOKE.IntegerFeature_GetSelectedFeatureList(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    var neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureList_begin(neo_feature_list);
    var neo_feature_list_end = neoapi_csharpPINVOKE.FeatureList_end(neo_feature_list);
    for(; neoapi_csharpPINVOKE.FeatureListIterator_operator_not_equal(neo_feature_list_iter, neo_feature_list_end);
        neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_postfix(neo_feature_list_iter))
    {
        selected_feature_list_.Add(
        neoapi_csharpPINVOKE.FeatureListIterator_GetName(neo_feature_list_iter),
        new Feature(neoapi_csharpPINVOKE.FeatureListIterator___ref__(neo_feature_list_iter), false));
    }
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_end);
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_iter);
    
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return selected_feature_list_;
}

  /// <summary>
  /// Get the smallest allowed value of the Feature object as integer
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long Min {
    get {
      long ret = neoapi_csharpPINVOKE.IntegerFeature_Min_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the largest allowed value of the Feature object as integer
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long Max {
    get {
      long ret = neoapi_csharpPINVOKE.IntegerFeature_Max_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the value of the Feature as a string
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long Inc {
    get {
      long ret = neoapi_csharpPINVOKE.IntegerFeature_Inc_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Access to the current value of the Feature object as integer
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long Value {
    set {
      neoapi_csharpPINVOKE.IntegerFeature_Value_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = neoapi_csharpPINVOKE.IntegerFeature_Value_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the physical unit of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Unit {
    get {
      string ret = neoapi_csharpPINVOKE.IntegerFeature_Unit_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get a value, which recommends the representation type of the Feature object in a GUI
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string Representation {
    get {
      string ret = neoapi_csharpPINVOKE.IntegerFeature_Representation_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates whether the Feature object is a selector
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsSelector {
    get {
      bool ret = neoapi_csharpPINVOKE.IntegerFeature_IsSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the current value of the Feature object as string
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string ValueString {
    get {
      string ret = neoapi_csharpPINVOKE.IntegerFeature_ValueString_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Class providing the 'IString' interface
/// </summary>
public class StringFeature : BaseFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal StringFeature(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.StringFeature_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StringFeature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~StringFeature() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_StringFeature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">The pointer to the camera</param>
  /// <param name="name">The name of the Feature</param>
  public StringFeature(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_StringFeature__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="feature">A StringFeature object</param>
  public StringFeature(StringFeature feature) : this(neoapi_csharpPINVOKE.new_StringFeature__SWIG_1(StringFeature.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Get the maximum allowed string-length of the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long MaxStringLength {
    get {
      long ret = neoapi_csharpPINVOKE.StringFeature_MaxStringLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Access to the value of the Feature as a string
  /// </summary>
  /// <returns>The value of the Feature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string ValueString {
    set {
      neoapi_csharpPINVOKE.StringFeature_ValueString_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = neoapi_csharpPINVOKE.StringFeature_ValueString_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Class providing the 'IBoolean' interface
/// </summary>
public class BoolFeature : BaseFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal BoolFeature(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.BoolFeature_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BoolFeature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~BoolFeature() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_BoolFeature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">The pointer to the camera</param>
  /// <param name="name">The name of the Feature</param>
  public BoolFeature(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_BoolFeature__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="feature">A BoolFeature object</param>
  public BoolFeature(BoolFeature feature) : this(neoapi_csharpPINVOKE.new_BoolFeature__SWIG_1(BoolFeature.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Access to the current value of the Feature object as boolean value
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool Value {
    set {
      neoapi_csharpPINVOKE.BoolFeature_Value_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = neoapi_csharpPINVOKE.BoolFeature_Value_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the value of the Feature as a string
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string ValueString {
    get {
      string ret = neoapi_csharpPINVOKE.BoolFeature_ValueString_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Class providing the 'ICommand' interface
/// </summary>
public class CommandFeature : BaseFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CommandFeature(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CommandFeature_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CommandFeature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CommandFeature() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CommandFeature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">The pointer to the camera</param>
  /// <param name="name">The name of the Feature</param>
  public CommandFeature(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CommandFeature__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="feature">A CommandFeature object</param>
  public CommandFeature(CommandFeature feature) : this(neoapi_csharpPINVOKE.new_CommandFeature__SWIG_1(CommandFeature.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Executes the command of the Feature object
  /// </summary>
  /// <returns>The CommandFeature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual CommandFeature Execute() {
    CommandFeature ret = new CommandFeature(neoapi_csharpPINVOKE.CommandFeature_Execute(swigCPtr), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Indicates whether the command of the Feature object is still executing
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsDone {
    get {
      bool ret = neoapi_csharpPINVOKE.CommandFeature_IsDone_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the value of the Feature as a string
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string ValueString {
    get {
      string ret = neoapi_csharpPINVOKE.CommandFeature_ValueString_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Base class providing the 'IEnumeration' interface
/// </summary>
public class EnumerationFeature : BaseFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal EnumerationFeature(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.EnumerationFeature_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EnumerationFeature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~EnumerationFeature() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_EnumerationFeature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    protected System.Collections.Generic.Dictionary<string, Feature> enum_value_list_ = null;
    protected System.Collections.Generic.Dictionary<string, Feature> selected_feature_list_ = null;

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">The pointer to the camera</param>
  /// <param name="name">The name of the Feature</param>
  public EnumerationFeature(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_EnumerationFeature__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="feature">A EnumerationFeature object</param>
  public EnumerationFeature(EnumerationFeature feature) : this(neoapi_csharpPINVOKE.new_EnumerationFeature__SWIG_1(EnumerationFeature.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Get a list of all possible values of the Feature object
  /// </summary>
  /// <returns>The list of all possible values of the Feature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual System.Collections.Generic.Dictionary<string, Feature> GetEnumValueList() {
    enum_value_list_ = new System.Collections.Generic.Dictionary<string, Feature>();
    var neo_feature_list = neoapi_csharpPINVOKE.EnumerationFeature_GetEnumValueList(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    var neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureList_begin(neo_feature_list);
    var neo_feature_list_end = neoapi_csharpPINVOKE.FeatureList_end(neo_feature_list);
    for(; neoapi_csharpPINVOKE.FeatureListIterator_operator_not_equal(neo_feature_list_iter, neo_feature_list_end);
        neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_postfix(neo_feature_list_iter))
    {
        enum_value_list_.Add(
        neoapi_csharpPINVOKE.FeatureListIterator_GetName(neo_feature_list_iter),
        new Feature(neoapi_csharpPINVOKE.FeatureListIterator___ref__(neo_feature_list_iter), false));
    }
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_end);
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_iter);
    
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return enum_value_list_;
}

  /// <summary>
  /// Get a list of features that depend on this selector Feature
  /// </summary>
  /// <returns>The list of all features that depend on this selector Feature</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual System.Collections.Generic.Dictionary<string, Feature> GetSelectedFeatureList() {
    selected_feature_list_ = new System.Collections.Generic.Dictionary<string, Feature>();
    var neo_feature_list = neoapi_csharpPINVOKE.EnumerationFeature_GetSelectedFeatureList(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    var neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureList_begin(neo_feature_list);
    var neo_feature_list_end = neoapi_csharpPINVOKE.FeatureList_end(neo_feature_list);
    for(; neoapi_csharpPINVOKE.FeatureListIterator_operator_not_equal(neo_feature_list_iter, neo_feature_list_end);
        neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_postfix(neo_feature_list_iter))
    {
        selected_feature_list_.Add(
        neoapi_csharpPINVOKE.FeatureListIterator_GetName(neo_feature_list_iter),
        new Feature(neoapi_csharpPINVOKE.FeatureListIterator___ref__(neo_feature_list_iter), false));
    }
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_end);
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_iter);
    
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return selected_feature_list_;
}

  /// <summary>
  /// Indicates whether the Feature object is a selector
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public bool IsSelector {
    get {
      bool ret = neoapi_csharpPINVOKE.EnumerationFeature_IsSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Access to the current value of the Feature object as integer (enum ID)
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public long ValueInt {
    set {
      neoapi_csharpPINVOKE.EnumerationFeature_ValueInt_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = neoapi_csharpPINVOKE.EnumerationFeature_ValueInt_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Access to the value of the Feature as a string
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public string ValueString {
    set {
      neoapi_csharpPINVOKE.EnumerationFeature_ValueString_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = neoapi_csharpPINVOKE.EnumerationFeature_ValueString_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Base class providing the 'IRegister' interface
/// </summary>
public class RegisterFeature : BaseFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal RegisterFeature(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.RegisterFeature_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RegisterFeature obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~RegisterFeature() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_RegisterFeature(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">The pointer to the camera</param>
  /// <param name="name">The name of the Feature</param>
  public RegisterFeature(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_RegisterFeature__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="feature">A RegisterFeature object</param>
  public RegisterFeature(RegisterFeature feature) : this(neoapi_csharpPINVOKE.new_RegisterFeature__SWIG_1(RegisterFeature.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Reads the memory pointed to by the Feature object and writes it into the provided buffer
  /// </summary>
  /// <param name="buffer">The destination buffer into which the read data is copied</param>
  /// <param name="length">The size of the destination buffer. The property `RegisterLength` provides the necessary size</param>
  /// <returns>The RegisterFeature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual RegisterFeature GetRegister(byte[] buffer, ulong length) {
    RegisterFeature ret = new RegisterFeature(neoapi_csharpPINVOKE.RegisterFeature_GetRegister(swigCPtr, buffer, length), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Writes the memory pointed to by the Feature object
  /// </summary>
  /// <param name="buffer">The buffer for the data to be written</param>
  /// <param name="length">The size of the destination buffer. The property `RegisterLength` provides the necessary size</param>
  /// <returns>The RegisterFeature object</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual RegisterFeature SetRegister(byte[] buffer, ulong length) {
    RegisterFeature ret = new RegisterFeature(neoapi_csharpPINVOKE.RegisterFeature_SetRegister(swigCPtr, buffer, length), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the length in bytes of the memory pointed to by the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public ulong RegisterLength {
    get {
      ulong ret = neoapi_csharpPINVOKE.RegisterFeature_RegisterLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the address of the memory pointed to by the Feature object
  /// </summary>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public ulong RegisterAddress {
    get {
      ulong ret = neoapi_csharpPINVOKE.RegisterFeature_RegisterAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for AcquisitionMode
/// </summary>
public enum AcquisitionMode {
  /// <summary>Frames are captured continuously until stopped with the AcquisitionStop command.</summary>
  Continuous = 0,
  /// <summary>The number of frames specified by AcquisitionFrameCount is captured.</summary>
  MultiFrame,
  /// <summary>One frame is captured.</summary>
  SingleFrame
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature AcquisitionMode
/// </summary>
public class CAcquisitionMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CAcquisitionMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CAcquisitionMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CAcquisitionMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CAcquisitionMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CAcquisitionMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of AcquisitionMode
    /// </summary>
    public AcquisitionMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CAcquisitionMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CAcquisitionMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CAcquisitionMode(CAcquisitionMode feature) : this(neoapi_csharpPINVOKE.new_CAcquisitionMode__SWIG_1(CAcquisitionMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of AcquisitionMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CAcquisitionMode object</returns>
  public CAcquisitionMode Set(AcquisitionMode value) {
    CAcquisitionMode ret = new CAcquisitionMode(neoapi_csharpPINVOKE.CAcquisitionMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of AcquisitionMode
  /// </summary>
  /// <returns>The value as AcquisitionMode</returns>
  public AcquisitionMode Get() {
    AcquisitionMode ret = (AcquisitionMode)neoapi_csharpPINVOKE.CAcquisitionMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for AcquisitionStatusSelector
/// </summary>
public enum AcquisitionStatusSelector {
  /// <summary>Device is currently doing an acquisition of one or many frames.</summary>
  AcquisitionActive = 0,
  /// <summary>Device is currently transferring an acquisition of one or many frames.</summary>
  AcquisitionTransfer,
  /// <summary>Device is currently waiting for a trigger for the capture of one or many frames.</summary>
  AcquisitionTriggerWait,
  /// <summary>Device is doing the exposure of a frame.</summary>
  ExposureActive,
  /// <summary>Device is currently doing the capture of a frame.</summary>
  FrameActive,
  /// <summary>Device is currently waiting for a frame start trigger.</summary>
  FrameTriggerWait
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature AcquisitionStatusSelector
/// </summary>
public class CAcquisitionStatusSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CAcquisitionStatusSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CAcquisitionStatusSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CAcquisitionStatusSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CAcquisitionStatusSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CAcquisitionStatusSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of AcquisitionStatusSelector
    /// </summary>
    public AcquisitionStatusSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CAcquisitionStatusSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CAcquisitionStatusSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CAcquisitionStatusSelector(CAcquisitionStatusSelector feature) : this(neoapi_csharpPINVOKE.new_CAcquisitionStatusSelector__SWIG_1(CAcquisitionStatusSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of AcquisitionStatusSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CAcquisitionStatusSelector object</returns>
  public CAcquisitionStatusSelector Set(AcquisitionStatusSelector value) {
    CAcquisitionStatusSelector ret = new CAcquisitionStatusSelector(neoapi_csharpPINVOKE.CAcquisitionStatusSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of AcquisitionStatusSelector
  /// </summary>
  /// <returns>The value as AcquisitionStatusSelector</returns>
  public AcquisitionStatusSelector Get() {
    AcquisitionStatusSelector ret = (AcquisitionStatusSelector)neoapi_csharpPINVOKE.CAcquisitionStatusSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ApertureStatus
/// </summary>
public enum ApertureStatus {
  /// <summary>Busy</summary>
  Busy = 0,
  /// <summary>Error</summary>
  Error,
  /// <summary>Not Connected</summary>
  NotConnected,
  /// <summary>Not Initialized</summary>
  NotInitialized,
  /// <summary>Not Supported</summary>
  NotSupported,
  /// <summary>Ready</summary>
  Ready
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ApertureStatus
/// </summary>
public class CApertureStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CApertureStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CApertureStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CApertureStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CApertureStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CApertureStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ApertureStatus
    /// </summary>
    public ApertureStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CApertureStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CApertureStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CApertureStatus(CApertureStatus feature) : this(neoapi_csharpPINVOKE.new_CApertureStatus__SWIG_1(CApertureStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ApertureStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CApertureStatus object</returns>
  public CApertureStatus Set(ApertureStatus value) {
    CApertureStatus ret = new CApertureStatus(neoapi_csharpPINVOKE.CApertureStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ApertureStatus
  /// </summary>
  /// <returns>The value as ApertureStatus</returns>
  public ApertureStatus Get() {
    ApertureStatus ret = (ApertureStatus)neoapi_csharpPINVOKE.CApertureStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for AutoFeatureRegionMode
/// </summary>
public enum AutoFeatureRegionMode {
  /// <summary>All settings of the selected AutoFeature ROI are automatically equal to the selected AutoFeatureRegionReference.</summary>
  Off = 0,
  /// <summary>The settings of the selected AutoFeature ROI are user defined. The AutoFeature is useable only if the AutoFeature ROI fits into the AutoFeatureRegionReference of the AutoFeature.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature AutoFeatureRegionMode
/// </summary>
public class CAutoFeatureRegionMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CAutoFeatureRegionMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CAutoFeatureRegionMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CAutoFeatureRegionMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CAutoFeatureRegionMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CAutoFeatureRegionMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of AutoFeatureRegionMode
    /// </summary>
    public AutoFeatureRegionMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CAutoFeatureRegionMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CAutoFeatureRegionMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CAutoFeatureRegionMode(CAutoFeatureRegionMode feature) : this(neoapi_csharpPINVOKE.new_CAutoFeatureRegionMode__SWIG_1(CAutoFeatureRegionMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of AutoFeatureRegionMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CAutoFeatureRegionMode object</returns>
  public CAutoFeatureRegionMode Set(AutoFeatureRegionMode value) {
    CAutoFeatureRegionMode ret = new CAutoFeatureRegionMode(neoapi_csharpPINVOKE.CAutoFeatureRegionMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of AutoFeatureRegionMode
  /// </summary>
  /// <returns>The value as AutoFeatureRegionMode</returns>
  public AutoFeatureRegionMode Get() {
    AutoFeatureRegionMode ret = (AutoFeatureRegionMode)neoapi_csharpPINVOKE.CAutoFeatureRegionMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for AutoFeatureRegionReference
/// </summary>
public enum AutoFeatureRegionReference {
  /// <summary>The selected Auto Feature Region refers to Region 0.</summary>
  Region0 = 0
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature AutoFeatureRegionReference
/// </summary>
public class CAutoFeatureRegionReference : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CAutoFeatureRegionReference(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CAutoFeatureRegionReference_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CAutoFeatureRegionReference obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CAutoFeatureRegionReference() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CAutoFeatureRegionReference(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of AutoFeatureRegionReference
    /// </summary>
    public AutoFeatureRegionReference Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CAutoFeatureRegionReference(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CAutoFeatureRegionReference__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CAutoFeatureRegionReference(CAutoFeatureRegionReference feature) : this(neoapi_csharpPINVOKE.new_CAutoFeatureRegionReference__SWIG_1(CAutoFeatureRegionReference.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of AutoFeatureRegionReference
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CAutoFeatureRegionReference object</returns>
  public CAutoFeatureRegionReference Set(AutoFeatureRegionReference value) {
    CAutoFeatureRegionReference ret = new CAutoFeatureRegionReference(neoapi_csharpPINVOKE.CAutoFeatureRegionReference_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of AutoFeatureRegionReference
  /// </summary>
  /// <returns>The value as AutoFeatureRegionReference</returns>
  public AutoFeatureRegionReference Get() {
    AutoFeatureRegionReference ret = (AutoFeatureRegionReference)neoapi_csharpPINVOKE.CAutoFeatureRegionReference_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for AutoFeatureRegionSelector
/// </summary>
public enum AutoFeatureRegionSelector {
  /// <summary>Selected features will control the region for BalanceWhiteAuto and ColorTransformationAuto algorithm.</summary>
  BalanceWhiteAuto = 0,
  /// <summary>Selected features will control the region for GainAuto and ExposureAuto algorithm.</summary>
  BrightnessAuto
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature AutoFeatureRegionSelector
/// </summary>
public class CAutoFeatureRegionSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CAutoFeatureRegionSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CAutoFeatureRegionSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CAutoFeatureRegionSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CAutoFeatureRegionSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CAutoFeatureRegionSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of AutoFeatureRegionSelector
    /// </summary>
    public AutoFeatureRegionSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CAutoFeatureRegionSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CAutoFeatureRegionSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CAutoFeatureRegionSelector(CAutoFeatureRegionSelector feature) : this(neoapi_csharpPINVOKE.new_CAutoFeatureRegionSelector__SWIG_1(CAutoFeatureRegionSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of AutoFeatureRegionSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CAutoFeatureRegionSelector object</returns>
  public CAutoFeatureRegionSelector Set(AutoFeatureRegionSelector value) {
    CAutoFeatureRegionSelector ret = new CAutoFeatureRegionSelector(neoapi_csharpPINVOKE.CAutoFeatureRegionSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of AutoFeatureRegionSelector
  /// </summary>
  /// <returns>The value as AutoFeatureRegionSelector</returns>
  public AutoFeatureRegionSelector Get() {
    AutoFeatureRegionSelector ret = (AutoFeatureRegionSelector)neoapi_csharpPINVOKE.CAutoFeatureRegionSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BOPFShift
/// </summary>
public enum BOPFShift {
  /// <summary>Uses bit 0 to bit 7.</summary>
  Bits0To7 = 0,
  /// <summary>Uses bit 1 to bit 8.</summary>
  Bits1To8,
  /// <summary>Uses bit 2 to bit 9.</summary>
  Bits2To9,
  /// <summary>Uses bit 3 to bit 10.</summary>
  Bits3To10,
  /// <summary>Uses bit 4 to bit 11.</summary>
  Bits4To11
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BOPFShift
/// </summary>
public class CBOPFShift : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBOPFShift(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBOPFShift_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBOPFShift obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBOPFShift() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBOPFShift(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BOPFShift
    /// </summary>
    public BOPFShift Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBOPFShift(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBOPFShift__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBOPFShift(CBOPFShift feature) : this(neoapi_csharpPINVOKE.new_CBOPFShift__SWIG_1(CBOPFShift.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BOPFShift
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBOPFShift object</returns>
  public CBOPFShift Set(BOPFShift value) {
    CBOPFShift ret = new CBOPFShift(neoapi_csharpPINVOKE.CBOPFShift_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BOPFShift
  /// </summary>
  /// <returns>The value as BOPFShift</returns>
  public BOPFShift Get() {
    BOPFShift ret = (BOPFShift)neoapi_csharpPINVOKE.CBOPFShift_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BalanceWhiteAuto
/// </summary>
public enum BalanceWhiteAuto {
  /// <summary>White balancing is constantly adjusted by the device.</summary>
  Continuous = 0,
  /// <summary>White balancing is user controlled using BalanceRatioSelector and BalanceRatio.</summary>
  Off,
  /// <summary>White balancing is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.</summary>
  Once
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BalanceWhiteAuto
/// </summary>
public class CBalanceWhiteAuto : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBalanceWhiteAuto(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBalanceWhiteAuto_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBalanceWhiteAuto obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBalanceWhiteAuto() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBalanceWhiteAuto(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BalanceWhiteAuto
    /// </summary>
    public BalanceWhiteAuto Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBalanceWhiteAuto(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBalanceWhiteAuto__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBalanceWhiteAuto(CBalanceWhiteAuto feature) : this(neoapi_csharpPINVOKE.new_CBalanceWhiteAuto__SWIG_1(CBalanceWhiteAuto.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BalanceWhiteAuto
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBalanceWhiteAuto object</returns>
  public CBalanceWhiteAuto Set(BalanceWhiteAuto value) {
    CBalanceWhiteAuto ret = new CBalanceWhiteAuto(neoapi_csharpPINVOKE.CBalanceWhiteAuto_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BalanceWhiteAuto
  /// </summary>
  /// <returns>The value as BalanceWhiteAuto</returns>
  public BalanceWhiteAuto Get() {
    BalanceWhiteAuto ret = (BalanceWhiteAuto)neoapi_csharpPINVOKE.CBalanceWhiteAuto_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BalanceWhiteAutoStatus
/// </summary>
public enum BalanceWhiteAutoStatus {
  /// <summary>The BalanceWhiteAuto calculation failed since at least one of the calculated color gains exceeds the maximum value.</summary>
  ColorGainsTooHigh = 0,
  /// <summary>BalanceWhiteAuto has never been started.</summary>
  Initial,
  /// <summary>BalanceWhiteAuto is waiting for statistical data.</summary>
  Start,
  /// <summary>The last BalanceWhiteAuto calculation succeeded.</summary>
  Success,
  /// <summary>The BalanceWhiteAuto calculation failed since at least one color-channel shows invalid statistic data.</summary>
  Underrun
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BalanceWhiteAutoStatus
/// </summary>
public class CBalanceWhiteAutoStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBalanceWhiteAutoStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBalanceWhiteAutoStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBalanceWhiteAutoStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBalanceWhiteAutoStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBalanceWhiteAutoStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BalanceWhiteAutoStatus
    /// </summary>
    public BalanceWhiteAutoStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBalanceWhiteAutoStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBalanceWhiteAutoStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBalanceWhiteAutoStatus(CBalanceWhiteAutoStatus feature) : this(neoapi_csharpPINVOKE.new_CBalanceWhiteAutoStatus__SWIG_1(CBalanceWhiteAutoStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BalanceWhiteAutoStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBalanceWhiteAutoStatus object</returns>
  public CBalanceWhiteAutoStatus Set(BalanceWhiteAutoStatus value) {
    CBalanceWhiteAutoStatus ret = new CBalanceWhiteAutoStatus(neoapi_csharpPINVOKE.CBalanceWhiteAutoStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BalanceWhiteAutoStatus
  /// </summary>
  /// <returns>The value as BalanceWhiteAutoStatus</returns>
  public BalanceWhiteAutoStatus Get() {
    BalanceWhiteAutoStatus ret = (BalanceWhiteAutoStatus)neoapi_csharpPINVOKE.CBalanceWhiteAutoStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for Baudrate
/// </summary>
public enum Baudrate {
  /// <summary>Baudrate of RS232 UART is 115200.</summary>
  Baud115200 = 0,
  /// <summary>Baudrate of RS232 UART is 19200.</summary>
  Baud19200,
  /// <summary>Baudrate of RS232 UART is 230400.</summary>
  Baud230400,
  /// <summary>Baudrate of RS232 UART is 38400.</summary>
  Baud38400,
  /// <summary>Baudrate of RS232 UART is 460800.</summary>
  Baud460800,
  /// <summary>Baudrate of RS232 UART is 57600.</summary>
  Baud57600,
  /// <summary>Baudrate of RS232 UART is 9600.</summary>
  Baud9600,
  /// <summary>RS232 UART is off.</summary>
  RS232Off
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature Baudrate
/// </summary>
public class CBaudrate : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBaudrate(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBaudrate_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBaudrate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBaudrate() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBaudrate(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of Baudrate
    /// </summary>
    public Baudrate Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBaudrate(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBaudrate__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBaudrate(CBaudrate feature) : this(neoapi_csharpPINVOKE.new_CBaudrate__SWIG_1(CBaudrate.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of Baudrate
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBaudrate object</returns>
  public CBaudrate Set(Baudrate value) {
    CBaudrate ret = new CBaudrate(neoapi_csharpPINVOKE.CBaudrate_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of Baudrate
  /// </summary>
  /// <returns>The value as Baudrate</returns>
  public Baudrate Get() {
    Baudrate ret = (Baudrate)neoapi_csharpPINVOKE.CBaudrate_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BinningHorizontalMode
/// </summary>
public enum BinningHorizontalMode {
  /// <summary>The response from the combined cells will be averaged, resulting in increased signal/noise ratio.</summary>
  Average = 0,
  /// <summary>The response from the combined cells will be added, resulting in increased sensitivity.</summary>
  Sum
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BinningHorizontalMode
/// </summary>
public class CBinningHorizontalMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBinningHorizontalMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBinningHorizontalMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBinningHorizontalMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBinningHorizontalMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBinningHorizontalMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BinningHorizontalMode
    /// </summary>
    public BinningHorizontalMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBinningHorizontalMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBinningHorizontalMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBinningHorizontalMode(CBinningHorizontalMode feature) : this(neoapi_csharpPINVOKE.new_CBinningHorizontalMode__SWIG_1(CBinningHorizontalMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BinningHorizontalMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBinningHorizontalMode object</returns>
  public CBinningHorizontalMode Set(BinningHorizontalMode value) {
    CBinningHorizontalMode ret = new CBinningHorizontalMode(neoapi_csharpPINVOKE.CBinningHorizontalMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BinningHorizontalMode
  /// </summary>
  /// <returns>The value as BinningHorizontalMode</returns>
  public BinningHorizontalMode Get() {
    BinningHorizontalMode ret = (BinningHorizontalMode)neoapi_csharpPINVOKE.CBinningHorizontalMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BinningSelector
/// </summary>
public enum BinningSelector {
  /// <summary>Selected feature will control the region 0 binning.</summary>
  Region0 = 0,
  /// <summary>Selected feature will control the region 1 binning.</summary>
  Region1,
  /// <summary>Selected feature will control the region 2 binning.</summary>
  Region2,
  /// <summary>Selected features will control the sensor binning.</summary>
  Sensor
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BinningSelector
/// </summary>
public class CBinningSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBinningSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBinningSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBinningSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBinningSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBinningSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BinningSelector
    /// </summary>
    public BinningSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBinningSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBinningSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBinningSelector(CBinningSelector feature) : this(neoapi_csharpPINVOKE.new_CBinningSelector__SWIG_1(CBinningSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BinningSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBinningSelector object</returns>
  public CBinningSelector Set(BinningSelector value) {
    CBinningSelector ret = new CBinningSelector(neoapi_csharpPINVOKE.CBinningSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BinningSelector
  /// </summary>
  /// <returns>The value as BinningSelector</returns>
  public BinningSelector Get() {
    BinningSelector ret = (BinningSelector)neoapi_csharpPINVOKE.CBinningSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BinningVerticalMode
/// </summary>
public enum BinningVerticalMode {
  /// <summary>The response from the combined cells will be averaged, resulting in increased signal/noise ratio.</summary>
  Average = 0,
  /// <summary>The response from the combined cells will be added, resulting in increased sensitivity.</summary>
  Sum
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BinningVerticalMode
/// </summary>
public class CBinningVerticalMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBinningVerticalMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBinningVerticalMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBinningVerticalMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBinningVerticalMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBinningVerticalMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BinningVerticalMode
    /// </summary>
    public BinningVerticalMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBinningVerticalMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBinningVerticalMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBinningVerticalMode(CBinningVerticalMode feature) : this(neoapi_csharpPINVOKE.new_CBinningVerticalMode__SWIG_1(CBinningVerticalMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BinningVerticalMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBinningVerticalMode object</returns>
  public CBinningVerticalMode Set(BinningVerticalMode value) {
    CBinningVerticalMode ret = new CBinningVerticalMode(neoapi_csharpPINVOKE.CBinningVerticalMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BinningVerticalMode
  /// </summary>
  /// <returns>The value as BinningVerticalMode</returns>
  public BinningVerticalMode Get() {
    BinningVerticalMode ret = (BinningVerticalMode)neoapi_csharpPINVOKE.CBinningVerticalMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BlackLevelSelector
/// </summary>
public enum BlackLevelSelector {
  /// <summary>Black Level will be applied to all channels or taps.</summary>
  All = 0,
  /// <summary>Black Level will be applied to the blue channel.</summary>
  Blue,
  /// <summary>Black Level will be applied to the green channel.</summary>
  Green,
  /// <summary>Black Level will be applied to the red channel.</summary>
  Red,
  /// <summary>Black Level will be applied to Tap 1.</summary>
  Tap1,
  /// <summary>Black Level will be applied to Tap 2.</summary>
  Tap2,
  /// <summary>Black Level will be applied to U channel.</summary>
  U,
  /// <summary>Black Level will be applied to V channel.</summary>
  V,
  /// <summary>Black Level will be applied to Y channel.</summary>
  Y
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BlackLevelSelector
/// </summary>
public class CBlackLevelSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBlackLevelSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBlackLevelSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBlackLevelSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBlackLevelSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBlackLevelSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BlackLevelSelector
    /// </summary>
    public BlackLevelSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBlackLevelSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBlackLevelSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBlackLevelSelector(CBlackLevelSelector feature) : this(neoapi_csharpPINVOKE.new_CBlackLevelSelector__SWIG_1(CBlackLevelSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BlackLevelSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBlackLevelSelector object</returns>
  public CBlackLevelSelector Set(BlackLevelSelector value) {
    CBlackLevelSelector ret = new CBlackLevelSelector(neoapi_csharpPINVOKE.CBlackLevelSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BlackLevelSelector
  /// </summary>
  /// <returns>The value as BlackLevelSelector</returns>
  public BlackLevelSelector Get() {
    BlackLevelSelector ret = (BlackLevelSelector)neoapi_csharpPINVOKE.CBlackLevelSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BlackSunSuppression
/// </summary>
public enum BlackSunSuppression {
  /// <summary>Black Sun Suppression works with default settings.</summary>
  Default = 0,
  /// <summary>Black Sun Suppression works with high settings.</summary>
  High,
  /// <summary>Black Sun Suppression works with low settings.</summary>
  Low,
  /// <summary>Black Sun Suppression works with maximum settings.</summary>
  Max,
  /// <summary>Black Sun Suppression is off.</summary>
  Off
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BlackSunSuppression
/// </summary>
public class CBlackSunSuppression : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBlackSunSuppression(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBlackSunSuppression_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBlackSunSuppression obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBlackSunSuppression() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBlackSunSuppression(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BlackSunSuppression
    /// </summary>
    public BlackSunSuppression Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBlackSunSuppression(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBlackSunSuppression__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBlackSunSuppression(CBlackSunSuppression feature) : this(neoapi_csharpPINVOKE.new_CBlackSunSuppression__SWIG_1(CBlackSunSuppression.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BlackSunSuppression
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBlackSunSuppression object</returns>
  public CBlackSunSuppression Set(BlackSunSuppression value) {
    CBlackSunSuppression ret = new CBlackSunSuppression(neoapi_csharpPINVOKE.CBlackSunSuppression_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BlackSunSuppression
  /// </summary>
  /// <returns>The value as BlackSunSuppression</returns>
  public BlackSunSuppression Get() {
    BlackSunSuppression ret = (BlackSunSuppression)neoapi_csharpPINVOKE.CBlackSunSuppression_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BoSequencerEnable
/// </summary>
public enum BoSequencerEnable {
  /// <summary>Disables the sequencer</summary>
  Off = 0,
  /// <summary>Enables the sequencer</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BoSequencerEnable
/// </summary>
public class CBoSequencerEnable : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBoSequencerEnable(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBoSequencerEnable_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBoSequencerEnable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBoSequencerEnable() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBoSequencerEnable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BoSequencerEnable
    /// </summary>
    public BoSequencerEnable Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBoSequencerEnable(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBoSequencerEnable__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBoSequencerEnable(CBoSequencerEnable feature) : this(neoapi_csharpPINVOKE.new_CBoSequencerEnable__SWIG_1(CBoSequencerEnable.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BoSequencerEnable
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBoSequencerEnable object</returns>
  public CBoSequencerEnable Set(BoSequencerEnable value) {
    CBoSequencerEnable ret = new CBoSequencerEnable(neoapi_csharpPINVOKE.CBoSequencerEnable_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BoSequencerEnable
  /// </summary>
  /// <returns>The value as BoSequencerEnable</returns>
  public BoSequencerEnable Get() {
    BoSequencerEnable ret = (BoSequencerEnable)neoapi_csharpPINVOKE.CBoSequencerEnable_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BoSequencerIOSelector
/// </summary>
public enum BoSequencerIOSelector {
  /// <summary>Sequencer Output 0 is selected.</summary>
  SequencerOutput0 = 0,
  /// <summary>Sequencer Output 1 is selected.</summary>
  SequencerOutput1,
  /// <summary>Sequencer Output 2 is selected.</summary>
  SequencerOutput2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BoSequencerIOSelector
/// </summary>
public class CBoSequencerIOSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBoSequencerIOSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBoSequencerIOSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBoSequencerIOSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBoSequencerIOSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBoSequencerIOSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BoSequencerIOSelector
    /// </summary>
    public BoSequencerIOSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBoSequencerIOSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBoSequencerIOSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBoSequencerIOSelector(CBoSequencerIOSelector feature) : this(neoapi_csharpPINVOKE.new_CBoSequencerIOSelector__SWIG_1(CBoSequencerIOSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BoSequencerIOSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBoSequencerIOSelector object</returns>
  public CBoSequencerIOSelector Set(BoSequencerIOSelector value) {
    CBoSequencerIOSelector ret = new CBoSequencerIOSelector(neoapi_csharpPINVOKE.CBoSequencerIOSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BoSequencerIOSelector
  /// </summary>
  /// <returns>The value as BoSequencerIOSelector</returns>
  public BoSequencerIOSelector Get() {
    BoSequencerIOSelector ret = (BoSequencerIOSelector)neoapi_csharpPINVOKE.CBoSequencerIOSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BoSequencerMode
/// </summary>
public enum BoSequencerMode {
  /// <summary>The running mode free running is selected.</summary>
  FreeRunning = 0,
  /// <summary>The running mode free running init trigger is selected.</summary>
  FreeRunningInitTrigger,
  /// <summary>The running mode free running init trigger once is selected.</summary>
  FreeRunningInitTriggerOnce,
  /// <summary>The running mode free running once is selected.</summary>
  FreeRunningOnce,
  /// <summary>The running mode single step trigger is selected.</summary>
  SingleStepTrigger,
  /// <summary>The running mode single step trigger once is selected.</summary>
  SingleStepTriggerOnce
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BoSequencerMode
/// </summary>
public class CBoSequencerMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBoSequencerMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBoSequencerMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBoSequencerMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBoSequencerMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBoSequencerMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BoSequencerMode
    /// </summary>
    public BoSequencerMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBoSequencerMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBoSequencerMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBoSequencerMode(CBoSequencerMode feature) : this(neoapi_csharpPINVOKE.new_CBoSequencerMode__SWIG_1(CBoSequencerMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BoSequencerMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBoSequencerMode object</returns>
  public CBoSequencerMode Set(BoSequencerMode value) {
    CBoSequencerMode ret = new CBoSequencerMode(neoapi_csharpPINVOKE.CBoSequencerMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BoSequencerMode
  /// </summary>
  /// <returns>The value as BoSequencerMode</returns>
  public BoSequencerMode Get() {
    BoSequencerMode ret = (BoSequencerMode)neoapi_csharpPINVOKE.CBoSequencerMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BoSequencerSensorDigitizationTaps
/// </summary>
public enum BoSequencerSensorDigitizationTaps {
  /// <summary>4 Taps</summary>
  Four = 0,
  /// <summary>1 Tap</summary>
  One,
  /// <summary>2 Taps, One and Three</summary>
  OneAndThree,
  /// <summary>2 Taps, One and Two</summary>
  OneAndTwo
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BoSequencerSensorDigitizationTaps
/// </summary>
public class CBoSequencerSensorDigitizationTaps : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBoSequencerSensorDigitizationTaps(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBoSequencerSensorDigitizationTaps_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBoSequencerSensorDigitizationTaps obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBoSequencerSensorDigitizationTaps() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBoSequencerSensorDigitizationTaps(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BoSequencerSensorDigitizationTaps
    /// </summary>
    public BoSequencerSensorDigitizationTaps Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBoSequencerSensorDigitizationTaps(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBoSequencerSensorDigitizationTaps__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBoSequencerSensorDigitizationTaps(CBoSequencerSensorDigitizationTaps feature) : this(neoapi_csharpPINVOKE.new_CBoSequencerSensorDigitizationTaps__SWIG_1(CBoSequencerSensorDigitizationTaps.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BoSequencerSensorDigitizationTaps
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBoSequencerSensorDigitizationTaps object</returns>
  public CBoSequencerSensorDigitizationTaps Set(BoSequencerSensorDigitizationTaps value) {
    CBoSequencerSensorDigitizationTaps ret = new CBoSequencerSensorDigitizationTaps(neoapi_csharpPINVOKE.CBoSequencerSensorDigitizationTaps_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BoSequencerSensorDigitizationTaps
  /// </summary>
  /// <returns>The value as BoSequencerSensorDigitizationTaps</returns>
  public BoSequencerSensorDigitizationTaps Get() {
    BoSequencerSensorDigitizationTaps ret = (BoSequencerSensorDigitizationTaps)neoapi_csharpPINVOKE.CBoSequencerSensorDigitizationTaps_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BoSequencerStart
/// </summary>
public enum BoSequencerStart {
  /// <summary>Disables the configured sequence.</summary>
  Off = 0,
  /// <summary>Enables the configured sequence.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BoSequencerStart
/// </summary>
public class CBoSequencerStart : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBoSequencerStart(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBoSequencerStart_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBoSequencerStart obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBoSequencerStart() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBoSequencerStart(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BoSequencerStart
    /// </summary>
    public BoSequencerStart Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBoSequencerStart(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBoSequencerStart__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBoSequencerStart(CBoSequencerStart feature) : this(neoapi_csharpPINVOKE.new_CBoSequencerStart__SWIG_1(CBoSequencerStart.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BoSequencerStart
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBoSequencerStart object</returns>
  public CBoSequencerStart Set(BoSequencerStart value) {
    CBoSequencerStart ret = new CBoSequencerStart(neoapi_csharpPINVOKE.CBoSequencerStart_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BoSequencerStart
  /// </summary>
  /// <returns>The value as BoSequencerStart</returns>
  public BoSequencerStart Get() {
    BoSequencerStart ret = (BoSequencerStart)neoapi_csharpPINVOKE.CBoSequencerStart_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BrightnessAutoPriority
/// </summary>
public enum BrightnessAutoPriority {
  /// <summary>ExposureAuto has highest priority and will be modified first.</summary>
  ExposureAuto = 0,
  /// <summary>Gain Auto has highest priority and will be modified first.</summary>
  GainAuto
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BrightnessAutoPriority
/// </summary>
public class CBrightnessAutoPriority : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBrightnessAutoPriority(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBrightnessAutoPriority_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBrightnessAutoPriority obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBrightnessAutoPriority() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBrightnessAutoPriority(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BrightnessAutoPriority
    /// </summary>
    public BrightnessAutoPriority Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBrightnessAutoPriority(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBrightnessAutoPriority__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBrightnessAutoPriority(CBrightnessAutoPriority feature) : this(neoapi_csharpPINVOKE.new_CBrightnessAutoPriority__SWIG_1(CBrightnessAutoPriority.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BrightnessAutoPriority
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBrightnessAutoPriority object</returns>
  public CBrightnessAutoPriority Set(BrightnessAutoPriority value) {
    CBrightnessAutoPriority ret = new CBrightnessAutoPriority(neoapi_csharpPINVOKE.CBrightnessAutoPriority_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BrightnessAutoPriority
  /// </summary>
  /// <returns>The value as BrightnessAutoPriority</returns>
  public BrightnessAutoPriority Get() {
    BrightnessAutoPriority ret = (BrightnessAutoPriority)neoapi_csharpPINVOKE.CBrightnessAutoPriority_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for BrightnessCorrection
/// </summary>
public enum BrightnessCorrection {
  /// <summary>Brightness Correction is off.</summary>
  Off = 0,
  /// <summary>Brightness Correction is on.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature BrightnessCorrection
/// </summary>
public class CBrightnessCorrection : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CBrightnessCorrection(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CBrightnessCorrection_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CBrightnessCorrection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CBrightnessCorrection() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CBrightnessCorrection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of BrightnessCorrection
    /// </summary>
    public BrightnessCorrection Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CBrightnessCorrection(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CBrightnessCorrection__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CBrightnessCorrection(CBrightnessCorrection feature) : this(neoapi_csharpPINVOKE.new_CBrightnessCorrection__SWIG_1(CBrightnessCorrection.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of BrightnessCorrection
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CBrightnessCorrection object</returns>
  public CBrightnessCorrection Set(BrightnessCorrection value) {
    CBrightnessCorrection ret = new CBrightnessCorrection(neoapi_csharpPINVOKE.CBrightnessCorrection_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of BrightnessCorrection
  /// </summary>
  /// <returns>The value as BrightnessCorrection</returns>
  public BrightnessCorrection Get() {
    BrightnessCorrection ret = (BrightnessCorrection)neoapi_csharpPINVOKE.CBrightnessCorrection_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for CalibrationMatrixValueSelector
/// </summary>
public enum CalibrationMatrixValueSelector {
  /// <summary>Gain 0,0 of the selected calibration matrix.</summary>
  Gain00 = 0,
  /// <summary>Gain 0,1 of the selected calibration matrix.</summary>
  Gain01,
  /// <summary>Gain 0,2 of the selected calibration matrix.</summary>
  Gain02,
  /// <summary>Gain 0,3 of the selected calibration matrix.</summary>
  Gain03,
  /// <summary>Gain 1,0 of the selected calibration matrix.</summary>
  Gain10,
  /// <summary>Gain 1,1 of the selected calibration matrix.</summary>
  Gain11,
  /// <summary>Gain 1,2 of the selected calibration matrix.</summary>
  Gain12,
  /// <summary>Gain 1.3 of the selected calibration matrix.</summary>
  Gain13,
  /// <summary>Gain 2.0 of the selected calibration matrix.</summary>
  Gain20,
  /// <summary>Gain 2.1 of the selected calibration matrix.</summary>
  Gain21,
  /// <summary>Gain 2.2 of the selected calibration matrix.</summary>
  Gain22,
  /// <summary>Gain 2.3 of the selected calibration matrix.</summary>
  Gain23
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature CalibrationMatrixValueSelector
/// </summary>
public class CCalibrationMatrixValueSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CCalibrationMatrixValueSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CCalibrationMatrixValueSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCalibrationMatrixValueSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CCalibrationMatrixValueSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CCalibrationMatrixValueSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of CalibrationMatrixValueSelector
    /// </summary>
    public CalibrationMatrixValueSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CCalibrationMatrixValueSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CCalibrationMatrixValueSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CCalibrationMatrixValueSelector(CCalibrationMatrixValueSelector feature) : this(neoapi_csharpPINVOKE.new_CCalibrationMatrixValueSelector__SWIG_1(CCalibrationMatrixValueSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of CalibrationMatrixValueSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CCalibrationMatrixValueSelector object</returns>
  public CCalibrationMatrixValueSelector Set(CalibrationMatrixValueSelector value) {
    CCalibrationMatrixValueSelector ret = new CCalibrationMatrixValueSelector(neoapi_csharpPINVOKE.CCalibrationMatrixValueSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of CalibrationMatrixValueSelector
  /// </summary>
  /// <returns>The value as CalibrationMatrixValueSelector</returns>
  public CalibrationMatrixValueSelector Get() {
    CalibrationMatrixValueSelector ret = (CalibrationMatrixValueSelector)neoapi_csharpPINVOKE.CCalibrationMatrixValueSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ChunkSelector
/// </summary>
public enum ChunkSelector {
  /// <summary>Binning AVAILABLE: Always</summary>
  Binning = 0,
  /// <summary>Binning Horizontal</summary>
  BinningHorizontal,
  /// <summary>Binning Vertical</summary>
  BinningVertical,
  /// <summary>Black Level</summary>
  BlackLevel,
  /// <summary>BoSequencer Enable</summary>
  BoSequencerEnable,
  /// <summary>Component ID</summary>
  ComponentID,
  /// <summary>Component ID Value</summary>
  ComponentIDValue,
  /// <summary>Counter Value</summary>
  CounterValue,
  /// <summary>Decimation Horizontal</summary>
  DecimationHorizontal,
  /// <summary>Decimation Vertical</summary>
  DecimationVertical,
  /// <summary>Device Temperature. AVAILABLE: Always</summary>
  DeviceTemperature,
  /// <summary>Encoder Status Value</summary>
  EncoderStatusValue,
  /// <summary>Encoder Value</summary>
  EncoderValue,
  /// <summary>Exposure Time</summary>
  ExposureTime,
  /// <summary>Frame ID</summary>
  FrameID,
  /// <summary>Gain</summary>
  Gain,
  /// <summary>Group ID Value</summary>
  GroupIDValue,
  /// <summary>Height</summary>
  Height,
  /// <summary>Image</summary>
  Image,
  /// <summary>Image Control. AVAILABLE: Always</summary>
  ImageControl,
  /// <summary>Line Pitch</summary>
  LinePitch,
  /// <summary>Line Status All</summary>
  LineStatusAll,
  /// <summary>Offset X</summary>
  OffsetX,
  /// <summary>Offset Y</summary>
  OffsetY,
  /// <summary>Pixel Dynamic Range Max</summary>
  PixelDynamicRangeMax,
  /// <summary>Pixel Dynamic Range Min</summary>
  PixelDynamicRangeMin,
  /// <summary>Pixel Format</summary>
  PixelFormat,
  /// <summary>Region ID</summary>
  RegionID,
  /// <summary>Region ID Value</summary>
  RegionIDValue,
  /// <summary>Reverse X</summary>
  ReverseX,
  /// <summary>Reverse Y</summary>
  ReverseY,
  /// <summary>Scan 3d Axis Max</summary>
  Scan3dAxisMax,
  /// <summary>Scan 3d Axis Min</summary>
  Scan3dAxisMin,
  /// <summary>Scan 3d Coordinate Offset</summary>
  Scan3dCoordinateOffset,
  /// <summary>Scan 3d Coordinate Reference Value</summary>
  Scan3dCoordinateReferenceValue,
  /// <summary>Scan 3d Coordinate Scale</summary>
  Scan3dCoordinateScale,
  /// <summary>Scan 3d Coordinate System</summary>
  Scan3dCoordinateSystem,
  /// <summary>Scan 3d Coordinate System Reference</summary>
  Scan3dCoordinateSystemReference,
  /// <summary>Scan 3d Coordinate Transform Value</summary>
  Scan3dCoordinateTransformValue,
  /// <summary>Scan 3d Distance Unit</summary>
  Scan3dDistanceUnit,
  /// <summary>Scan 3d Invalid Data Flag</summary>
  Scan3dInvalidDataFlag,
  /// <summary>Scan 3d Invalid Data Value</summary>
  Scan3dInvalidDataValue,
  /// <summary>Scan 3d Output Mode</summary>
  Scan3dOutputMode,
  /// <summary>Sequencer Set Active</summary>
  SequencerSetActive,
  /// <summary>Source ID</summary>
  SourceID,
  /// <summary>Source ID Value</summary>
  SourceIDValue,
  /// <summary>Stream Channel ID</summary>
  StreamChannelID,
  /// <summary>Timer Value</summary>
  TimerValue,
  /// <summary>Timestamp</summary>
  Timestamp,
  /// <summary>Timestamp Latch Value</summary>
  TimestampLatchValue,
  /// <summary>Transfer Block ID</summary>
  TransferBlockID,
  /// <summary>Transfer Queue Current Block Count</summary>
  TransferQueueCurrentBlockCount,
  /// <summary>Transfer Stream ID</summary>
  TransferStreamID,
  /// <summary>Trigger Control AVAILABLE: Always.</summary>
  TriggerControl,
  /// <summary>Trigger ID</summary>
  TriggerID,
  /// <summary>Width</summary>
  Width
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ChunkSelector
/// </summary>
public class CChunkSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CChunkSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CChunkSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CChunkSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CChunkSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CChunkSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ChunkSelector
    /// </summary>
    public ChunkSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CChunkSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CChunkSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CChunkSelector(CChunkSelector feature) : this(neoapi_csharpPINVOKE.new_CChunkSelector__SWIG_1(CChunkSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ChunkSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CChunkSelector object</returns>
  public CChunkSelector Set(ChunkSelector value) {
    CChunkSelector ret = new CChunkSelector(neoapi_csharpPINVOKE.CChunkSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ChunkSelector
  /// </summary>
  /// <returns>The value as ChunkSelector</returns>
  public ChunkSelector Get() {
    ChunkSelector ret = (ChunkSelector)neoapi_csharpPINVOKE.CChunkSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ClConfiguration
/// </summary>
public enum ClConfiguration {
  /// <summary>Standard base configuration described by the Camera Link standard.</summary>
  Base = 0,
  /// <summary>The camera streams the data from multiple taps (that do not fit in the standard base configuration) through two Camera Link base ports. It is responsibility of the application or frame grabber to reconstruct the full image. Only one of the ports (fixed) serves as the "master" for serial communication and triggering.</summary>
  DualBase,
  /// <summary>Standard 80-bit configuration with 10 taps of 8 bits or 8 taps of 10 bits, as described by the Camera Link standard.</summary>
  EightyBit,
  /// <summary>Standard full configuration described by the Camera Link standard.</summary>
  Full,
  /// <summary>Standard medium configuration described by the Camera Link standard.</summary>
  Medium
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ClConfiguration
/// </summary>
public class CClConfiguration : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CClConfiguration(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CClConfiguration_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CClConfiguration obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CClConfiguration() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CClConfiguration(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ClConfiguration
    /// </summary>
    public ClConfiguration Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CClConfiguration(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CClConfiguration__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CClConfiguration(CClConfiguration feature) : this(neoapi_csharpPINVOKE.new_CClConfiguration__SWIG_1(CClConfiguration.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ClConfiguration
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CClConfiguration object</returns>
  public CClConfiguration Set(ClConfiguration value) {
    CClConfiguration ret = new CClConfiguration(neoapi_csharpPINVOKE.CClConfiguration_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ClConfiguration
  /// </summary>
  /// <returns>The value as ClConfiguration</returns>
  public ClConfiguration Get() {
    ClConfiguration ret = (ClConfiguration)neoapi_csharpPINVOKE.CClConfiguration_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ClTimeSlotsCount
/// </summary>
public enum ClTimeSlotsCount {
  /// <summary>One</summary>
  One = 0,
  /// <summary>Three</summary>
  Three,
  /// <summary>Two</summary>
  Two
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ClTimeSlotsCount
/// </summary>
public class CClTimeSlotsCount : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CClTimeSlotsCount(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CClTimeSlotsCount_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CClTimeSlotsCount obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CClTimeSlotsCount() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CClTimeSlotsCount(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ClTimeSlotsCount
    /// </summary>
    public ClTimeSlotsCount Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CClTimeSlotsCount(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CClTimeSlotsCount__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CClTimeSlotsCount(CClTimeSlotsCount feature) : this(neoapi_csharpPINVOKE.new_CClTimeSlotsCount__SWIG_1(CClTimeSlotsCount.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ClTimeSlotsCount
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CClTimeSlotsCount object</returns>
  public CClTimeSlotsCount Set(ClTimeSlotsCount value) {
    CClTimeSlotsCount ret = new CClTimeSlotsCount(neoapi_csharpPINVOKE.CClTimeSlotsCount_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ClTimeSlotsCount
  /// </summary>
  /// <returns>The value as ClTimeSlotsCount</returns>
  public ClTimeSlotsCount Get() {
    ClTimeSlotsCount ret = (ClTimeSlotsCount)neoapi_csharpPINVOKE.CClTimeSlotsCount_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ColorTransformationAuto
/// </summary>
public enum ColorTransformationAuto {
  /// <summary>Color transformation is constantly adjusted by the device.</summary>
  Continuous = 0,
  /// <summary>Color transformation is user controlled using the various Colortransformation features.</summary>
  Off,
  /// <summary>Color transformation is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.</summary>
  Once
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ColorTransformationAuto
/// </summary>
public class CColorTransformationAuto : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CColorTransformationAuto(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CColorTransformationAuto_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CColorTransformationAuto obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CColorTransformationAuto() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CColorTransformationAuto(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ColorTransformationAuto
    /// </summary>
    public ColorTransformationAuto Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CColorTransformationAuto(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CColorTransformationAuto__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CColorTransformationAuto(CColorTransformationAuto feature) : this(neoapi_csharpPINVOKE.new_CColorTransformationAuto__SWIG_1(CColorTransformationAuto.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ColorTransformationAuto
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CColorTransformationAuto object</returns>
  public CColorTransformationAuto Set(ColorTransformationAuto value) {
    CColorTransformationAuto ret = new CColorTransformationAuto(neoapi_csharpPINVOKE.CColorTransformationAuto_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ColorTransformationAuto
  /// </summary>
  /// <returns>The value as ColorTransformationAuto</returns>
  public ColorTransformationAuto Get() {
    ColorTransformationAuto ret = (ColorTransformationAuto)neoapi_csharpPINVOKE.CColorTransformationAuto_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ColorTransformationFactoryListSelector
/// </summary>
public enum ColorTransformationFactoryListSelector {
  /// <summary>ColorTransformationFactoryList is connected to the color temperature of 3000K.</summary>
  OptimizedMatrixFor3000K = 0,
  /// <summary>ColorTransformationFactoryList is connected to the color temperature of 3200K.</summary>
  OptimizedMatrixFor3200K,
  /// <summary>ColorTransformationFactoryList is connected to the color temperature of 5000K.</summary>
  OptimizedMatrixFor5000K,
  /// <summary>ColorTransformationFactoryList is connected to the color temperature of 5600K.</summary>
  OptimizedMatrixFor5600K,
  /// <summary>ColorTransformationFactoryList is connected to the color temperature of 6500K.</summary>
  OptimizedMatrixFor6500K
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ColorTransformationFactoryListSelector
/// </summary>
public class CColorTransformationFactoryListSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CColorTransformationFactoryListSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CColorTransformationFactoryListSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CColorTransformationFactoryListSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CColorTransformationFactoryListSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CColorTransformationFactoryListSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ColorTransformationFactoryListSelector
    /// </summary>
    public ColorTransformationFactoryListSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CColorTransformationFactoryListSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CColorTransformationFactoryListSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CColorTransformationFactoryListSelector(CColorTransformationFactoryListSelector feature) : this(neoapi_csharpPINVOKE.new_CColorTransformationFactoryListSelector__SWIG_1(CColorTransformationFactoryListSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ColorTransformationFactoryListSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CColorTransformationFactoryListSelector object</returns>
  public CColorTransformationFactoryListSelector Set(ColorTransformationFactoryListSelector value) {
    CColorTransformationFactoryListSelector ret = new CColorTransformationFactoryListSelector(neoapi_csharpPINVOKE.CColorTransformationFactoryListSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ColorTransformationFactoryListSelector
  /// </summary>
  /// <returns>The value as ColorTransformationFactoryListSelector</returns>
  public ColorTransformationFactoryListSelector Get() {
    ColorTransformationFactoryListSelector ret = (ColorTransformationFactoryListSelector)neoapi_csharpPINVOKE.CColorTransformationFactoryListSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ColorTransformationSelector
/// </summary>
public enum ColorTransformationSelector {
  /// <summary>RGB to RGB color transformation.</summary>
  RGBtoRGB = 0,
  /// <summary>RGB to YUV color transformation.</summary>
  RGBtoYUV
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ColorTransformationSelector
/// </summary>
public class CColorTransformationSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CColorTransformationSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CColorTransformationSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CColorTransformationSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CColorTransformationSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CColorTransformationSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ColorTransformationSelector
    /// </summary>
    public ColorTransformationSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CColorTransformationSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CColorTransformationSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CColorTransformationSelector(CColorTransformationSelector feature) : this(neoapi_csharpPINVOKE.new_CColorTransformationSelector__SWIG_1(CColorTransformationSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ColorTransformationSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CColorTransformationSelector object</returns>
  public CColorTransformationSelector Set(ColorTransformationSelector value) {
    CColorTransformationSelector ret = new CColorTransformationSelector(neoapi_csharpPINVOKE.CColorTransformationSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ColorTransformationSelector
  /// </summary>
  /// <returns>The value as ColorTransformationSelector</returns>
  public ColorTransformationSelector Get() {
    ColorTransformationSelector ret = (ColorTransformationSelector)neoapi_csharpPINVOKE.CColorTransformationSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ColorTransformationValueSelector
/// </summary>
public enum ColorTransformationValueSelector {
  /// <summary>Gain 0,0 of the transformation matrix.</summary>
  Gain00 = 0,
  /// <summary>Gain 0,1 of the transformation matrix.</summary>
  Gain01,
  /// <summary>Gain 0,2 of the transformation matrix.</summary>
  Gain02,
  /// <summary>Gain 1,0 of the transformation matrix.</summary>
  Gain10,
  /// <summary>Gain 1,1 of the transformation matrix.</summary>
  Gain11,
  /// <summary>Gain 1,2 of the transformation matrix.</summary>
  Gain12,
  /// <summary>Gain 2,0 of the transformation matrix.</summary>
  Gain20,
  /// <summary>Gain 2,1 of the transformation matrix.</summary>
  Gain21,
  /// <summary>Gain 2,2 of the transformation matrix.</summary>
  Gain22,
  /// <summary>Offset 0 of the transformation matrix.</summary>
  Offset0,
  /// <summary>Offset 1 of the transformation matrix.</summary>
  Offset1,
  /// <summary>Offset 2 of the transformation matrix.</summary>
  Offset2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ColorTransformationValueSelector
/// </summary>
public class CColorTransformationValueSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CColorTransformationValueSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CColorTransformationValueSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CColorTransformationValueSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CColorTransformationValueSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CColorTransformationValueSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ColorTransformationValueSelector
    /// </summary>
    public ColorTransformationValueSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CColorTransformationValueSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CColorTransformationValueSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CColorTransformationValueSelector(CColorTransformationValueSelector feature) : this(neoapi_csharpPINVOKE.new_CColorTransformationValueSelector__SWIG_1(CColorTransformationValueSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ColorTransformationValueSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CColorTransformationValueSelector object</returns>
  public CColorTransformationValueSelector Set(ColorTransformationValueSelector value) {
    CColorTransformationValueSelector ret = new CColorTransformationValueSelector(neoapi_csharpPINVOKE.CColorTransformationValueSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ColorTransformationValueSelector
  /// </summary>
  /// <returns>The value as ColorTransformationValueSelector</returns>
  public ColorTransformationValueSelector Get() {
    ColorTransformationValueSelector ret = (ColorTransformationValueSelector)neoapi_csharpPINVOKE.CColorTransformationValueSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ComponentSelector
/// </summary>
public enum ComponentSelector {
  /// <summary>The acquisition of confidence map of the acquired image is controlled. Confidence data may be binary (0 - invalid) or an integer where 0 is invalid and increasing value is increased confidence in the data in the corresponding pixel. If floating point representation is used the confidence image is normalized to the range [0,1], for integer representation the maximum possible integer represents maximum confidence.</summary>
  Confidence = 0,
  /// <summary>The acquisition of stereo camera disparity data is controlled. Disparity is a more specific range format approximately inversely proportional to distance. Disparity is typically given in pixel units.</summary>
  Disparity,
  /// <summary>The acquisition of non-visible infrared light is controlled.</summary>
  Infrared,
  /// <summary>The acquisition of intensity (monochrome or color) of the visible reflected light is controlled.</summary>
  Intensity,
  /// <summary>The acquisition of multiple spectral bands corresponding to various light wavelenghts is controlled.</summary>
  Multispectral,
  /// <summary>Acquisition of polarized light intensity. The polarizing filters are arranged in a 2-by-2 pattern: 135° and 0° on even lines, 90° and 45° on odd lines. The raw data is unprocessed. AVAILABLE: Always</summary>
  PolarizedRaw,
  /// <summary>The acquisition of range (distance) data is controlled. The data produced may be only range (2.5D) or a point cloud giving the 3D coordinates depending on the Scan3dControl features.</summary>
  Range,
  /// <summary>The reflected intensity acquired together with Range in a Linescan3D sensor acquiring a single linescan profile for each exposure of the sensor.</summary>
  Reflectance,
  /// <summary>The acquisition of data measuring how much light is scattered around the reflected light. In processing this is used as an additional intensity image, often together with the standard intensity or reflectance.</summary>
  Scatter,
  /// <summary>The acquisition of non-visible ultraviolet light is controlled.</summary>
  Ultraviolet
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ComponentSelector
/// </summary>
public class CComponentSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CComponentSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CComponentSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CComponentSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CComponentSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CComponentSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ComponentSelector
    /// </summary>
    public ComponentSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CComponentSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CComponentSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CComponentSelector(CComponentSelector feature) : this(neoapi_csharpPINVOKE.new_CComponentSelector__SWIG_1(CComponentSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ComponentSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CComponentSelector object</returns>
  public CComponentSelector Set(ComponentSelector value) {
    CComponentSelector ret = new CComponentSelector(neoapi_csharpPINVOKE.CComponentSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ComponentSelector
  /// </summary>
  /// <returns>The value as ComponentSelector</returns>
  public ComponentSelector Get() {
    ComponentSelector ret = (ComponentSelector)neoapi_csharpPINVOKE.CComponentSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for CounterEventActivation
/// </summary>
public enum CounterEventActivation {
  /// <summary>Counts on the Falling or rising Edge of the selected signal.</summary>
  AnyEdge = 0,
  /// <summary>Counts on the Falling Edge of the signal.</summary>
  FallingEdge,
  /// <summary>Counts on the Rising Edge of the signal.</summary>
  RisingEdge
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature CounterEventActivation
/// </summary>
public class CCounterEventActivation : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CCounterEventActivation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CCounterEventActivation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCounterEventActivation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CCounterEventActivation() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CCounterEventActivation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of CounterEventActivation
    /// </summary>
    public CounterEventActivation Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CCounterEventActivation(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CCounterEventActivation__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CCounterEventActivation(CCounterEventActivation feature) : this(neoapi_csharpPINVOKE.new_CCounterEventActivation__SWIG_1(CCounterEventActivation.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of CounterEventActivation
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CCounterEventActivation object</returns>
  public CCounterEventActivation Set(CounterEventActivation value) {
    CCounterEventActivation ret = new CCounterEventActivation(neoapi_csharpPINVOKE.CCounterEventActivation_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of CounterEventActivation
  /// </summary>
  /// <returns>The value as CounterEventActivation</returns>
  public CounterEventActivation Get() {
    CounterEventActivation ret = (CounterEventActivation)neoapi_csharpPINVOKE.CCounterEventActivation_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for CounterEventSource
/// </summary>
public enum CounterEventSource {
  /// <summary>Counts the number of Acquisition End.</summary>
  AcquisitionEnd = 0,
  /// <summary>Counts the number of Acquisition Start.</summary>
  AcquisitionStart,
  /// <summary>Counts the number of Acquisition Trigger.</summary>
  AcquisitionTrigger,
  /// <summary>Counts the number of missed Acquisition Start Trigger.</summary>
  AcquisitionTriggerMissed,
  /// <summary>Counts the number of assertions of the chosen action signal.</summary>
  Action0,
  /// <summary>Counts the number of assertions of the chosen action signal.</summary>
  Action1,
  /// <summary>Counts the number of assertions of the chosen action signal.</summary>
  Action2,
  /// <summary>Counts the number of Counter End.</summary>
  Counter0End,
  /// <summary>Counts the number of Counter Start.</summary>
  Counter0Start,
  /// <summary>Counts the number of Counter End.</summary>
  Counter1End,
  /// <summary>Counts the number of Counter Start.</summary>
  Counter1Start,
  /// <summary>Counts the number of Counter End.</summary>
  Counter2End,
  /// <summary>Counts the number of Counter Start.</summary>
  Counter2Start,
  /// <summary>Counts the number of Encoder output pulses.</summary>
  Encoder0,
  /// <summary>Counts the number of Encoder output pulses.</summary>
  Encoder1,
  /// <summary>Counts the number of Encoder output pulses.</summary>
  Encoder2,
  /// <summary>Counts all Exposures. AVAILABLE: Always</summary>
  ExposureActive,
  /// <summary>Counts the number of Exposure End.</summary>
  ExposureEnd,
  /// <summary>Counts the number of Exposure Start.</summary>
  ExposureStart,
  /// <summary>Counts the number of Frame Burst End.</summary>
  FrameBurstEnd,
  /// <summary>Counts the number of Frame Burst Start.</summary>
  FrameBurstStart,
  /// <summary>Counts the number of Frame End.</summary>
  FrameEnd,
  /// <summary>Counts the number of Frame Start.</summary>
  FrameStart,
  /// <summary>Counts when a frame transfer skipped. AVAILABLE: Always</summary>
  FrameTransferSkipped,
  /// <summary>Counts the number of Frame Start Trigger.</summary>
  FrameTrigger,
  /// <summary>Counts the number of missed Frame Start Trigger.</summary>
  FrameTriggerMissed,
  /// <summary>Counts the number of transitions on the chosen I/O Line.</summary>
  Line0,
  /// <summary>Counts the number of transitions on the chosen I/O Line.</summary>
  Line1,
  /// <summary>Counts the number of transitions on the chosen I/O Line.</summary>
  Line2,
  /// <summary>Counts the number of Line End.</summary>
  LineEnd,
  /// <summary>Counts the number of Line Start.</summary>
  LineStart,
  /// <summary>Counts the number of Line Start Trigger.</summary>
  LineTrigger,
  /// <summary>Counts the number of missed Line Start Trigger.</summary>
  LineTriggerMissed,
  /// <summary>Counts the number of Link Triggers.</summary>
  LinkTrigger0,
  /// <summary>Counts the number of Link Triggers.</summary>
  LinkTrigger1,
  /// <summary>Counts the number of Link Triggers.</summary>
  LinkTrigger2,
  /// <summary>Counts the number of Link Triggers missed.</summary>
  LinkTriggerMissed0,
  /// <summary>Counts the number of Link Triggers missed.</summary>
  LinkTriggerMissed1,
  /// <summary>Counts the number of Link Triggers missed.</summary>
  LinkTriggerMissed2,
  /// <summary>Counts the number of Logic Block output pulses.</summary>
  LogicBlock0,
  /// <summary>Counts the number of Logic Block output pulses.</summary>
  LogicBlock1,
  /// <summary>Counts the number of Logic Block output pulses.</summary>
  LogicBlock2,
  /// <summary>Counter is stopped.</summary>
  Off,
  /// <summary>Counts the number of Software Signal.</summary>
  SoftwareSignal0,
  /// <summary>Counts the number of Software Signal.</summary>
  SoftwareSignal1,
  /// <summary>Counts the number of Software Signal.</summary>
  SoftwareSignal2,
  /// <summary>Counts the number of Timer End pulses generated.</summary>
  Timer0End,
  /// <summary>Counts the number of Timer Start pulses generated.</summary>
  Timer0Start,
  /// <summary>Counts the number of Timer End pulses generated.</summary>
  Timer1End,
  /// <summary>Counts the number of Timer Start pulses generated.</summary>
  Timer1Start,
  /// <summary>Counts the number of Timer End pulses generated.</summary>
  Timer2End,
  /// <summary>Counts the number of Timer Start pulses generated.</summary>
  Timer2Start,
  /// <summary>Counts the number of clock ticks of the Timestamp clock. Can be used to create a programmable timer.</summary>
  TimestampTick,
  /// <summary>Counts when a Trigger skipped. AVAILABLE: Always</summary>
  TriggerSkipped
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature CounterEventSource
/// </summary>
public class CCounterEventSource : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CCounterEventSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CCounterEventSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCounterEventSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CCounterEventSource() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CCounterEventSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of CounterEventSource
    /// </summary>
    public CounterEventSource Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CCounterEventSource(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CCounterEventSource__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CCounterEventSource(CCounterEventSource feature) : this(neoapi_csharpPINVOKE.new_CCounterEventSource__SWIG_1(CCounterEventSource.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of CounterEventSource
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CCounterEventSource object</returns>
  public CCounterEventSource Set(CounterEventSource value) {
    CCounterEventSource ret = new CCounterEventSource(neoapi_csharpPINVOKE.CCounterEventSource_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of CounterEventSource
  /// </summary>
  /// <returns>The value as CounterEventSource</returns>
  public CounterEventSource Get() {
    CounterEventSource ret = (CounterEventSource)neoapi_csharpPINVOKE.CCounterEventSource_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for CounterResetActivation
/// </summary>
public enum CounterResetActivation {
  /// <summary>Resets the counter on the Falling or rising Edge of the selected signal.</summary>
  AnyEdge = 0,
  /// <summary>Resets the counter on the Falling Edge of the signal.</summary>
  FallingEdge,
  /// <summary>Resets the counter as long as the selected signal level is High.</summary>
  LevelHigh,
  /// <summary>Resets the counter as long as the selected signal level is Low.</summary>
  LevelLow,
  /// <summary>Resets the counter on the Rising Edge of the signal.</summary>
  RisingEdge
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature CounterResetActivation
/// </summary>
public class CCounterResetActivation : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CCounterResetActivation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CCounterResetActivation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCounterResetActivation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CCounterResetActivation() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CCounterResetActivation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of CounterResetActivation
    /// </summary>
    public CounterResetActivation Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CCounterResetActivation(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CCounterResetActivation__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CCounterResetActivation(CCounterResetActivation feature) : this(neoapi_csharpPINVOKE.new_CCounterResetActivation__SWIG_1(CCounterResetActivation.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of CounterResetActivation
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CCounterResetActivation object</returns>
  public CCounterResetActivation Set(CounterResetActivation value) {
    CCounterResetActivation ret = new CCounterResetActivation(neoapi_csharpPINVOKE.CCounterResetActivation_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of CounterResetActivation
  /// </summary>
  /// <returns>The value as CounterResetActivation</returns>
  public CounterResetActivation Get() {
    CounterResetActivation ret = (CounterResetActivation)neoapi_csharpPINVOKE.CCounterResetActivation_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for CounterResetSource
/// </summary>
public enum CounterResetSource {
  /// <summary>Resets with the reception of the Acquisition End.</summary>
  AcquisitionEnd = 0,
  /// <summary>Resets with the reception of the Acquisition Start.</summary>
  AcquisitionStart,
  /// <summary>Resets with the reception of the Acquisition Trigger.</summary>
  AcquisitionTrigger,
  /// <summary>Resets with the reception of the missed Acquisition start trigger.</summary>
  AcquisitionTriggerMissed,
  /// <summary>Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).</summary>
  Action0,
  /// <summary>Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).</summary>
  Action1,
  /// <summary>Resets on assertions of the chosen action signal (Broadcasted signal on the transport layer).</summary>
  Action2,
  /// <summary>Resets with the reception of the Counter End.</summary>
  Counter0End,
  /// <summary>Resets with the reception of the Counter Start.</summary>
  Counter0Start,
  /// <summary>Resets with the reception of the Counter End.</summary>
  Counter1End,
  /// <summary>Resets with the reception of the Counter Start.</summary>
  Counter1Start,
  /// <summary>Resets with the reception of the Counter End.</summary>
  Counter2End,
  /// <summary>Resets with the reception of the Counter Start.</summary>
  Counter2Start,
  /// <summary>Resets with the reception of a trigger on the CounterTriggerSource.</summary>
  CounterTrigger,
  /// <summary>Resets with the reception of the Encoder output signal.</summary>
  Encoder0,
  /// <summary>Resets with the reception of the Encoder output signal.</summary>
  Encoder1,
  /// <summary>Resets with the reception of the Encoder output signal.</summary>
  Encoder2,
  /// <summary>Resets with the reception of the Exposure End.</summary>
  ExposureEnd,
  /// <summary>Resets with the reception of the Exposure Start.</summary>
  ExposureStart,
  /// <summary>Resets with the reception of the Frame End.</summary>
  FrameEnd,
  /// <summary>Resets with the reception of the Frame Start.</summary>
  FrameStart,
  /// <summary>Resets with the reception of the Frame Start Trigger.</summary>
  FrameTrigger,
  /// <summary>Resets with the reception of the missed Frame start trigger.</summary>
  FrameTriggerMissed,
  /// <summary>Resets by the chosen I/O Line.</summary>
  Line0,
  /// <summary>Resets by the chosen I/O Line.</summary>
  Line1,
  /// <summary>Resets by the chosen I/O Line.</summary>
  Line2,
  /// <summary>Resets with the reception of the Line End.</summary>
  LineEnd,
  /// <summary>Resets with the reception of the Line Start.</summary>
  LineStart,
  /// <summary>Resets with the reception of the Line Start Trigger.</summary>
  LineTrigger,
  /// <summary>Resets with the reception of the missed Line start trigger.</summary>
  LineTriggerMissed,
  /// <summary>Resets on the reception of the chosen Link Trigger (received from the transport layer).</summary>
  LinkTrigger0,
  /// <summary>Resets on the reception of the chosen Link Trigger (received from the transport layer).</summary>
  LinkTrigger1,
  /// <summary>Resets on the reception of the chosen Link Trigger (received from the transport layer).</summary>
  LinkTrigger2,
  /// <summary>Resets with the reception of the LogicBlock output signal.</summary>
  LogicBlock0,
  /// <summary>Resets with the reception of the LogicBlock output signal.</summary>
  LogicBlock1,
  /// <summary>Resets with the reception of the LogicBlock output signal.</summary>
  LogicBlock2,
  /// <summary>Disable the Counter Reset trigger.</summary>
  Off,
  /// <summary>Resets on the reception of the Software Signal.</summary>
  SoftwareSignal0,
  /// <summary>Resets on the reception of the Software Signal.</summary>
  SoftwareSignal1,
  /// <summary>Resets on the reception of the Software Signal.</summary>
  SoftwareSignal2,
  /// <summary>Resets with the reception of the Timer End.</summary>
  Timer0End,
  /// <summary>Resets with the reception of the Timer Start.</summary>
  Timer0Start,
  /// <summary>Resets with the reception of the Timer End.</summary>
  Timer1End,
  /// <summary>Resets with the reception of the Timer Start.</summary>
  Timer1Start,
  /// <summary>Resets with the reception of the Timer End.</summary>
  Timer2End,
  /// <summary>Resets with the reception of the Timer Start.</summary>
  Timer2Start,
  /// <summary>Resets by the chosen User Output bit.</summary>
  UserOutput0,
  /// <summary>Resets by the chosen User Output bit.</summary>
  UserOutput1,
  /// <summary>Resets by the chosen User Output bit.</summary>
  UserOutput2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature CounterResetSource
/// </summary>
public class CCounterResetSource : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CCounterResetSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CCounterResetSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCounterResetSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CCounterResetSource() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CCounterResetSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of CounterResetSource
    /// </summary>
    public CounterResetSource Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CCounterResetSource(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CCounterResetSource__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CCounterResetSource(CCounterResetSource feature) : this(neoapi_csharpPINVOKE.new_CCounterResetSource__SWIG_1(CCounterResetSource.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of CounterResetSource
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CCounterResetSource object</returns>
  public CCounterResetSource Set(CounterResetSource value) {
    CCounterResetSource ret = new CCounterResetSource(neoapi_csharpPINVOKE.CCounterResetSource_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of CounterResetSource
  /// </summary>
  /// <returns>The value as CounterResetSource</returns>
  public CounterResetSource Get() {
    CounterResetSource ret = (CounterResetSource)neoapi_csharpPINVOKE.CCounterResetSource_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for CounterSelector
/// </summary>
public enum CounterSelector {
  /// <summary>Selects the counter 0.</summary>
  Counter0 = 0,
  /// <summary>Selects the counter 1.</summary>
  Counter1,
  /// <summary>Selects the counter 2.</summary>
  Counter2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature CounterSelector
/// </summary>
public class CCounterSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CCounterSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CCounterSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCounterSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CCounterSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CCounterSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of CounterSelector
    /// </summary>
    public CounterSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CCounterSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CCounterSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CCounterSelector(CCounterSelector feature) : this(neoapi_csharpPINVOKE.new_CCounterSelector__SWIG_1(CCounterSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of CounterSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CCounterSelector object</returns>
  public CCounterSelector Set(CounterSelector value) {
    CCounterSelector ret = new CCounterSelector(neoapi_csharpPINVOKE.CCounterSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of CounterSelector
  /// </summary>
  /// <returns>The value as CounterSelector</returns>
  public CounterSelector Get() {
    CounterSelector ret = (CounterSelector)neoapi_csharpPINVOKE.CCounterSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for CustomDataConfigurationMode
/// </summary>
public enum CustomDataConfigurationMode {
  /// <summary>Disables the custom data configuration mode.</summary>
  Off = 0,
  /// <summary>Enables the custom data configuration mode.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature CustomDataConfigurationMode
/// </summary>
public class CCustomDataConfigurationMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CCustomDataConfigurationMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CCustomDataConfigurationMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCustomDataConfigurationMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CCustomDataConfigurationMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CCustomDataConfigurationMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of CustomDataConfigurationMode
    /// </summary>
    public CustomDataConfigurationMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CCustomDataConfigurationMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CCustomDataConfigurationMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CCustomDataConfigurationMode(CCustomDataConfigurationMode feature) : this(neoapi_csharpPINVOKE.new_CCustomDataConfigurationMode__SWIG_1(CCustomDataConfigurationMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of CustomDataConfigurationMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CCustomDataConfigurationMode object</returns>
  public CCustomDataConfigurationMode Set(CustomDataConfigurationMode value) {
    CCustomDataConfigurationMode ret = new CCustomDataConfigurationMode(neoapi_csharpPINVOKE.CCustomDataConfigurationMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of CustomDataConfigurationMode
  /// </summary>
  /// <returns>The value as CustomDataConfigurationMode</returns>
  public CustomDataConfigurationMode Get() {
    CustomDataConfigurationMode ret = (CustomDataConfigurationMode)neoapi_csharpPINVOKE.CCustomDataConfigurationMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DecimationHorizontalMode
/// </summary>
public enum DecimationHorizontalMode {
  /// <summary>The values of a group of N adjacent pixels are averaged.</summary>
  Average = 0,
  /// <summary>The value of every Nth pixel is kept, others are discarded.</summary>
  Discard
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DecimationHorizontalMode
/// </summary>
public class CDecimationHorizontalMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDecimationHorizontalMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDecimationHorizontalMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDecimationHorizontalMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDecimationHorizontalMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDecimationHorizontalMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DecimationHorizontalMode
    /// </summary>
    public DecimationHorizontalMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDecimationHorizontalMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDecimationHorizontalMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDecimationHorizontalMode(CDecimationHorizontalMode feature) : this(neoapi_csharpPINVOKE.new_CDecimationHorizontalMode__SWIG_1(CDecimationHorizontalMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DecimationHorizontalMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDecimationHorizontalMode object</returns>
  public CDecimationHorizontalMode Set(DecimationHorizontalMode value) {
    CDecimationHorizontalMode ret = new CDecimationHorizontalMode(neoapi_csharpPINVOKE.CDecimationHorizontalMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DecimationHorizontalMode
  /// </summary>
  /// <returns>The value as DecimationHorizontalMode</returns>
  public DecimationHorizontalMode Get() {
    DecimationHorizontalMode ret = (DecimationHorizontalMode)neoapi_csharpPINVOKE.CDecimationHorizontalMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DecimationVerticalMode
/// </summary>
public enum DecimationVerticalMode {
  /// <summary>The values of a group of N adjacent pixels are averaged.</summary>
  Average = 0,
  /// <summary>The value of every Nth pixel is kept, others are discarded.</summary>
  Discard
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DecimationVerticalMode
/// </summary>
public class CDecimationVerticalMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDecimationVerticalMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDecimationVerticalMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDecimationVerticalMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDecimationVerticalMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDecimationVerticalMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DecimationVerticalMode
    /// </summary>
    public DecimationVerticalMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDecimationVerticalMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDecimationVerticalMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDecimationVerticalMode(CDecimationVerticalMode feature) : this(neoapi_csharpPINVOKE.new_CDecimationVerticalMode__SWIG_1(CDecimationVerticalMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DecimationVerticalMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDecimationVerticalMode object</returns>
  public CDecimationVerticalMode Set(DecimationVerticalMode value) {
    CDecimationVerticalMode ret = new CDecimationVerticalMode(neoapi_csharpPINVOKE.CDecimationVerticalMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DecimationVerticalMode
  /// </summary>
  /// <returns>The value as DecimationVerticalMode</returns>
  public DecimationVerticalMode Get() {
    DecimationVerticalMode ret = (DecimationVerticalMode)neoapi_csharpPINVOKE.CDecimationVerticalMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DefectPixelListSelector
/// </summary>
public enum DefectPixelListSelector {
  /// <summary>Selects Defect Pixel List for defect columns.</summary>
  Column = 0,
  /// <summary>Selects Defect Pixel List for defect pixels.</summary>
  Pixel,
  /// <summary>Selects Defect Pixel List for defect rows.</summary>
  Row
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DefectPixelListSelector
/// </summary>
public class CDefectPixelListSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDefectPixelListSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDefectPixelListSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDefectPixelListSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDefectPixelListSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDefectPixelListSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DefectPixelListSelector
    /// </summary>
    public DefectPixelListSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDefectPixelListSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDefectPixelListSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDefectPixelListSelector(CDefectPixelListSelector feature) : this(neoapi_csharpPINVOKE.new_CDefectPixelListSelector__SWIG_1(CDefectPixelListSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DefectPixelListSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDefectPixelListSelector object</returns>
  public CDefectPixelListSelector Set(DefectPixelListSelector value) {
    CDefectPixelListSelector ret = new CDefectPixelListSelector(neoapi_csharpPINVOKE.CDefectPixelListSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DefectPixelListSelector
  /// </summary>
  /// <returns>The value as DefectPixelListSelector</returns>
  public DefectPixelListSelector Get() {
    DefectPixelListSelector ret = (DefectPixelListSelector)neoapi_csharpPINVOKE.CDefectPixelListSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceCharacterSet
/// </summary>
public enum DeviceCharacterSet {
  /// <summary>Device use ASCII character set.</summary>
  ASCII = 0,
  /// <summary>Device use UTF16 character set. AVAILABLE: Always.</summary>
  UTF16,
  /// <summary>Device use UTF8 character set.</summary>
  UTF8
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceCharacterSet
/// </summary>
public class CDeviceCharacterSet : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceCharacterSet(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceCharacterSet_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceCharacterSet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceCharacterSet() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceCharacterSet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceCharacterSet
    /// </summary>
    public DeviceCharacterSet Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceCharacterSet(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceCharacterSet__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceCharacterSet(CDeviceCharacterSet feature) : this(neoapi_csharpPINVOKE.new_CDeviceCharacterSet__SWIG_1(CDeviceCharacterSet.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceCharacterSet
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceCharacterSet object</returns>
  public CDeviceCharacterSet Set(DeviceCharacterSet value) {
    CDeviceCharacterSet ret = new CDeviceCharacterSet(neoapi_csharpPINVOKE.CDeviceCharacterSet_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceCharacterSet
  /// </summary>
  /// <returns>The value as DeviceCharacterSet</returns>
  public DeviceCharacterSet Get() {
    DeviceCharacterSet ret = (DeviceCharacterSet)neoapi_csharpPINVOKE.CDeviceCharacterSet_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceClockSelector
/// </summary>
public enum DeviceClockSelector {
  /// <summary>Frequency of the Camera Link clock.</summary>
  CameraLink = 0,
  /// <summary>Clock frequency of the image sensor of the camera.</summary>
  Sensor,
  /// <summary>Clock frequency of the camera A/D conversion stage.</summary>
  SensorDigitization
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceClockSelector
/// </summary>
public class CDeviceClockSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceClockSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceClockSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceClockSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceClockSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceClockSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceClockSelector
    /// </summary>
    public DeviceClockSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceClockSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceClockSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceClockSelector(CDeviceClockSelector feature) : this(neoapi_csharpPINVOKE.new_CDeviceClockSelector__SWIG_1(CDeviceClockSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceClockSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceClockSelector object</returns>
  public CDeviceClockSelector Set(DeviceClockSelector value) {
    CDeviceClockSelector ret = new CDeviceClockSelector(neoapi_csharpPINVOKE.CDeviceClockSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceClockSelector
  /// </summary>
  /// <returns>The value as DeviceClockSelector</returns>
  public DeviceClockSelector Get() {
    DeviceClockSelector ret = (DeviceClockSelector)neoapi_csharpPINVOKE.CDeviceClockSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceFrontUARTSource
/// </summary>
public enum DeviceFrontUARTSource {
  /// <summary>Front side UART interface is used for optic control.</summary>
  OpticControl = 0,
  /// <summary>Front side UART interface is used as RS232 interface. Optic control is not possible.</summary>
  RS232
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceFrontUARTSource
/// </summary>
public class CDeviceFrontUARTSource : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceFrontUARTSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceFrontUARTSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceFrontUARTSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceFrontUARTSource() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceFrontUARTSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceFrontUARTSource
    /// </summary>
    public DeviceFrontUARTSource Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceFrontUARTSource(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceFrontUARTSource__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceFrontUARTSource(CDeviceFrontUARTSource feature) : this(neoapi_csharpPINVOKE.new_CDeviceFrontUARTSource__SWIG_1(CDeviceFrontUARTSource.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceFrontUARTSource
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceFrontUARTSource object</returns>
  public CDeviceFrontUARTSource Set(DeviceFrontUARTSource value) {
    CDeviceFrontUARTSource ret = new CDeviceFrontUARTSource(neoapi_csharpPINVOKE.CDeviceFrontUARTSource_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceFrontUARTSource
  /// </summary>
  /// <returns>The value as DeviceFrontUARTSource</returns>
  public DeviceFrontUARTSource Get() {
    DeviceFrontUARTSource ret = (DeviceFrontUARTSource)neoapi_csharpPINVOKE.CDeviceFrontUARTSource_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceLicense
/// </summary>
public enum DeviceLicense {
  /// <summary>The license is invalid</summary>
  Invalid = 0,
  /// <summary>The license is valid</summary>
  Valid
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceLicense
/// </summary>
public class CDeviceLicense : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceLicense(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceLicense_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceLicense obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceLicense() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceLicense(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceLicense
    /// </summary>
    public DeviceLicense Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceLicense(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceLicense__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceLicense(CDeviceLicense feature) : this(neoapi_csharpPINVOKE.new_CDeviceLicense__SWIG_1(CDeviceLicense.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceLicense
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceLicense object</returns>
  public CDeviceLicense Set(DeviceLicense value) {
    CDeviceLicense ret = new CDeviceLicense(neoapi_csharpPINVOKE.CDeviceLicense_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceLicense
  /// </summary>
  /// <returns>The value as DeviceLicense</returns>
  public DeviceLicense Get() {
    DeviceLicense ret = (DeviceLicense)neoapi_csharpPINVOKE.CDeviceLicense_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceLicenseTypeSelector
/// </summary>
public enum DeviceLicenseTypeSelector {
  /// <summary>License to execute an applet, generated by VisualApplets</summary>
  eVARuntime = 0
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceLicenseTypeSelector
/// </summary>
public class CDeviceLicenseTypeSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceLicenseTypeSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceLicenseTypeSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceLicenseTypeSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceLicenseTypeSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceLicenseTypeSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceLicenseTypeSelector
    /// </summary>
    public DeviceLicenseTypeSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceLicenseTypeSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceLicenseTypeSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceLicenseTypeSelector(CDeviceLicenseTypeSelector feature) : this(neoapi_csharpPINVOKE.new_CDeviceLicenseTypeSelector__SWIG_1(CDeviceLicenseTypeSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceLicenseTypeSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceLicenseTypeSelector object</returns>
  public CDeviceLicenseTypeSelector Set(DeviceLicenseTypeSelector value) {
    CDeviceLicenseTypeSelector ret = new CDeviceLicenseTypeSelector(neoapi_csharpPINVOKE.CDeviceLicenseTypeSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceLicenseTypeSelector
  /// </summary>
  /// <returns>The value as DeviceLicenseTypeSelector</returns>
  public DeviceLicenseTypeSelector Get() {
    DeviceLicenseTypeSelector ret = (DeviceLicenseTypeSelector)neoapi_csharpPINVOKE.CDeviceLicenseTypeSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceLinkHeartbeatMode
/// </summary>
public enum DeviceLinkHeartbeatMode {
  /// <summary>Disables the Link heartbeat.</summary>
  Off = 0,
  /// <summary>Enables the Link heartbeat.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceLinkHeartbeatMode
/// </summary>
public class CDeviceLinkHeartbeatMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceLinkHeartbeatMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceLinkHeartbeatMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceLinkHeartbeatMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceLinkHeartbeatMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceLinkHeartbeatMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceLinkHeartbeatMode
    /// </summary>
    public DeviceLinkHeartbeatMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceLinkHeartbeatMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceLinkHeartbeatMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceLinkHeartbeatMode(CDeviceLinkHeartbeatMode feature) : this(neoapi_csharpPINVOKE.new_CDeviceLinkHeartbeatMode__SWIG_1(CDeviceLinkHeartbeatMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceLinkHeartbeatMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceLinkHeartbeatMode object</returns>
  public CDeviceLinkHeartbeatMode Set(DeviceLinkHeartbeatMode value) {
    CDeviceLinkHeartbeatMode ret = new CDeviceLinkHeartbeatMode(neoapi_csharpPINVOKE.CDeviceLinkHeartbeatMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceLinkHeartbeatMode
  /// </summary>
  /// <returns>The value as DeviceLinkHeartbeatMode</returns>
  public DeviceLinkHeartbeatMode Get() {
    DeviceLinkHeartbeatMode ret = (DeviceLinkHeartbeatMode)neoapi_csharpPINVOKE.CDeviceLinkHeartbeatMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceLinkSelector
/// </summary>
public enum DeviceLinkSelector {
  /// <summary>Selects the link at USB interface with index 0</summary>
  USB0 = 0
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceLinkSelector
/// </summary>
public class CDeviceLinkSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceLinkSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceLinkSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceLinkSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceLinkSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceLinkSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceLinkSelector
    /// </summary>
    public DeviceLinkSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceLinkSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceLinkSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceLinkSelector(CDeviceLinkSelector feature) : this(neoapi_csharpPINVOKE.new_CDeviceLinkSelector__SWIG_1(CDeviceLinkSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceLinkSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceLinkSelector object</returns>
  public CDeviceLinkSelector Set(DeviceLinkSelector value) {
    CDeviceLinkSelector ret = new CDeviceLinkSelector(neoapi_csharpPINVOKE.CDeviceLinkSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceLinkSelector
  /// </summary>
  /// <returns>The value as DeviceLinkSelector</returns>
  public DeviceLinkSelector Get() {
    DeviceLinkSelector ret = (DeviceLinkSelector)neoapi_csharpPINVOKE.CDeviceLinkSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceRegistersEndianness
/// </summary>
public enum DeviceRegistersEndianness {
  /// <summary>The registers of the device are big endian.</summary>
  Big = 0,
  /// <summary>The registers of the device are little endian.</summary>
  Little
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceRegistersEndianness
/// </summary>
public class CDeviceRegistersEndianness : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceRegistersEndianness(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceRegistersEndianness_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceRegistersEndianness obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceRegistersEndianness() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceRegistersEndianness(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceRegistersEndianness
    /// </summary>
    public DeviceRegistersEndianness Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceRegistersEndianness(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceRegistersEndianness__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceRegistersEndianness(CDeviceRegistersEndianness feature) : this(neoapi_csharpPINVOKE.new_CDeviceRegistersEndianness__SWIG_1(CDeviceRegistersEndianness.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceRegistersEndianness
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceRegistersEndianness object</returns>
  public CDeviceRegistersEndianness Set(DeviceRegistersEndianness value) {
    CDeviceRegistersEndianness ret = new CDeviceRegistersEndianness(neoapi_csharpPINVOKE.CDeviceRegistersEndianness_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceRegistersEndianness
  /// </summary>
  /// <returns>The value as DeviceRegistersEndianness</returns>
  public DeviceRegistersEndianness Get() {
    DeviceRegistersEndianness ret = (DeviceRegistersEndianness)neoapi_csharpPINVOKE.CDeviceRegistersEndianness_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceScanType
/// </summary>
public enum DeviceScanType {
  /// <summary>2D sensor.</summary>
  Areascan = 0,
  /// <summary>device outputs 2D range image.</summary>
  Areascan3D,
  /// <summary>1D sensor.</summary>
  Linescan,
  /// <summary>device outputs 1D range image.</summary>
  Linescan3D
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceScanType
/// </summary>
public class CDeviceScanType : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceScanType(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceScanType_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceScanType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceScanType() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceScanType(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceScanType
    /// </summary>
    public DeviceScanType Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceScanType(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceScanType__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceScanType(CDeviceScanType feature) : this(neoapi_csharpPINVOKE.new_CDeviceScanType__SWIG_1(CDeviceScanType.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceScanType
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceScanType object</returns>
  public CDeviceScanType Set(DeviceScanType value) {
    CDeviceScanType ret = new CDeviceScanType(neoapi_csharpPINVOKE.CDeviceScanType_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceScanType
  /// </summary>
  /// <returns>The value as DeviceScanType</returns>
  public DeviceScanType Get() {
    DeviceScanType ret = (DeviceScanType)neoapi_csharpPINVOKE.CDeviceScanType_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceSensorSelector
/// </summary>
public enum DeviceSensorSelector {
  /// <summary>All sensors.</summary>
  All = 0,
  /// <summary>Left sensor.</summary>
  Left,
  /// <summary>Right sensor.</summary>
  Right
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceSensorSelector
/// </summary>
public class CDeviceSensorSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceSensorSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceSensorSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceSensorSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceSensorSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceSensorSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceSensorSelector
    /// </summary>
    public DeviceSensorSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceSensorSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceSensorSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceSensorSelector(CDeviceSensorSelector feature) : this(neoapi_csharpPINVOKE.new_CDeviceSensorSelector__SWIG_1(CDeviceSensorSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceSensorSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceSensorSelector object</returns>
  public CDeviceSensorSelector Set(DeviceSensorSelector value) {
    CDeviceSensorSelector ret = new CDeviceSensorSelector(neoapi_csharpPINVOKE.CDeviceSensorSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceSensorSelector
  /// </summary>
  /// <returns>The value as DeviceSensorSelector</returns>
  public DeviceSensorSelector Get() {
    DeviceSensorSelector ret = (DeviceSensorSelector)neoapi_csharpPINVOKE.CDeviceSensorSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceSensorType
/// </summary>
public enum DeviceSensorType {
  /// <summary>The camera sensor is a CCD sensor</summary>
  CCD = 0,
  /// <summary>The camera sensor is a CMOS sensor</summary>
  CMOS
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceSensorType
/// </summary>
public class CDeviceSensorType : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceSensorType(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceSensorType_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceSensorType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceSensorType() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceSensorType(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceSensorType
    /// </summary>
    public DeviceSensorType Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceSensorType(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceSensorType__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceSensorType(CDeviceSensorType feature) : this(neoapi_csharpPINVOKE.new_CDeviceSensorType__SWIG_1(CDeviceSensorType.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceSensorType
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceSensorType object</returns>
  public CDeviceSensorType Set(DeviceSensorType value) {
    CDeviceSensorType ret = new CDeviceSensorType(neoapi_csharpPINVOKE.CDeviceSensorType_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceSensorType
  /// </summary>
  /// <returns>The value as DeviceSensorType</returns>
  public DeviceSensorType Get() {
    DeviceSensorType ret = (DeviceSensorType)neoapi_csharpPINVOKE.CDeviceSensorType_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceSensorVersion
/// </summary>
public enum DeviceSensorVersion {
  /// <summary>CMV 2000 Sensor, Version 2</summary>
  CMOSIS_CMV2000_V2 = 0,
  /// <summary>CMV 2000 Sensor, Version 3</summary>
  CMOSIS_CMV2000_V3,
  /// <summary>CMV 4000 Sensor, Version 2</summary>
  CMOSIS_CMV4000_V2,
  /// <summary>CMV 4000 Sensor, Version 3</summary>
  CMOSIS_CMV4000_V3
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceSensorVersion
/// </summary>
public class CDeviceSensorVersion : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceSensorVersion(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceSensorVersion_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceSensorVersion obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceSensorVersion() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceSensorVersion(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceSensorVersion
    /// </summary>
    public DeviceSensorVersion Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceSensorVersion(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceSensorVersion__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceSensorVersion(CDeviceSensorVersion feature) : this(neoapi_csharpPINVOKE.new_CDeviceSensorVersion__SWIG_1(CDeviceSensorVersion.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceSensorVersion
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceSensorVersion object</returns>
  public CDeviceSensorVersion Set(DeviceSensorVersion value) {
    CDeviceSensorVersion ret = new CDeviceSensorVersion(neoapi_csharpPINVOKE.CDeviceSensorVersion_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceSensorVersion
  /// </summary>
  /// <returns>The value as DeviceSensorVersion</returns>
  public DeviceSensorVersion Get() {
    DeviceSensorVersion ret = (DeviceSensorVersion)neoapi_csharpPINVOKE.CDeviceSensorVersion_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceSerialPortBaudRate
/// </summary>
public enum DeviceSerialPortBaudRate {
  /// <summary>Serial port speed of 115200 baud.</summary>
  Baud115200 = 0,
  /// <summary>Serial port speed of 19200 baud.</summary>
  Baud19200,
  /// <summary>Serial port speed of 230400 baud.</summary>
  Baud230400,
  /// <summary>Serial port speed of 38400 baud.</summary>
  Baud38400,
  /// <summary>Serial port speed of 460800 baud.</summary>
  Baud460800,
  /// <summary>Serial port speed of 57600 baud.</summary>
  Baud57600,
  /// <summary>Serial port speed of 921600 baud.</summary>
  Baud921600,
  /// <summary>Serial port speed of 9600 baud.</summary>
  Baud9600
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceSerialPortBaudRate
/// </summary>
public class CDeviceSerialPortBaudRate : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceSerialPortBaudRate(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceSerialPortBaudRate_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceSerialPortBaudRate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceSerialPortBaudRate() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceSerialPortBaudRate(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceSerialPortBaudRate
    /// </summary>
    public DeviceSerialPortBaudRate Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceSerialPortBaudRate(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceSerialPortBaudRate__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceSerialPortBaudRate(CDeviceSerialPortBaudRate feature) : this(neoapi_csharpPINVOKE.new_CDeviceSerialPortBaudRate__SWIG_1(CDeviceSerialPortBaudRate.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceSerialPortBaudRate
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceSerialPortBaudRate object</returns>
  public CDeviceSerialPortBaudRate Set(DeviceSerialPortBaudRate value) {
    CDeviceSerialPortBaudRate ret = new CDeviceSerialPortBaudRate(neoapi_csharpPINVOKE.CDeviceSerialPortBaudRate_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceSerialPortBaudRate
  /// </summary>
  /// <returns>The value as DeviceSerialPortBaudRate</returns>
  public DeviceSerialPortBaudRate Get() {
    DeviceSerialPortBaudRate ret = (DeviceSerialPortBaudRate)neoapi_csharpPINVOKE.CDeviceSerialPortBaudRate_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceSerialPortSelector
/// </summary>
public enum DeviceSerialPortSelector {
  /// <summary>Serial port associated to the Camera link connection.</summary>
  CameraLink = 0
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceSerialPortSelector
/// </summary>
public class CDeviceSerialPortSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceSerialPortSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceSerialPortSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceSerialPortSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceSerialPortSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceSerialPortSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceSerialPortSelector
    /// </summary>
    public DeviceSerialPortSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceSerialPortSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceSerialPortSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceSerialPortSelector(CDeviceSerialPortSelector feature) : this(neoapi_csharpPINVOKE.new_CDeviceSerialPortSelector__SWIG_1(CDeviceSerialPortSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceSerialPortSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceSerialPortSelector object</returns>
  public CDeviceSerialPortSelector Set(DeviceSerialPortSelector value) {
    CDeviceSerialPortSelector ret = new CDeviceSerialPortSelector(neoapi_csharpPINVOKE.CDeviceSerialPortSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceSerialPortSelector
  /// </summary>
  /// <returns>The value as DeviceSerialPortSelector</returns>
  public DeviceSerialPortSelector Get() {
    DeviceSerialPortSelector ret = (DeviceSerialPortSelector)neoapi_csharpPINVOKE.CDeviceSerialPortSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceStreamChannelEndianness
/// </summary>
public enum DeviceStreamChannelEndianness {
  /// <summary>Stream channel data is big Endian.</summary>
  Big = 0,
  /// <summary>Stream channel data is little Endian.</summary>
  Little
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceStreamChannelEndianness
/// </summary>
public class CDeviceStreamChannelEndianness : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceStreamChannelEndianness(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceStreamChannelEndianness_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceStreamChannelEndianness obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceStreamChannelEndianness() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceStreamChannelEndianness(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceStreamChannelEndianness
    /// </summary>
    public DeviceStreamChannelEndianness Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceStreamChannelEndianness(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceStreamChannelEndianness__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceStreamChannelEndianness(CDeviceStreamChannelEndianness feature) : this(neoapi_csharpPINVOKE.new_CDeviceStreamChannelEndianness__SWIG_1(CDeviceStreamChannelEndianness.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceStreamChannelEndianness
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceStreamChannelEndianness object</returns>
  public CDeviceStreamChannelEndianness Set(DeviceStreamChannelEndianness value) {
    CDeviceStreamChannelEndianness ret = new CDeviceStreamChannelEndianness(neoapi_csharpPINVOKE.CDeviceStreamChannelEndianness_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceStreamChannelEndianness
  /// </summary>
  /// <returns>The value as DeviceStreamChannelEndianness</returns>
  public DeviceStreamChannelEndianness Get() {
    DeviceStreamChannelEndianness ret = (DeviceStreamChannelEndianness)neoapi_csharpPINVOKE.CDeviceStreamChannelEndianness_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceStreamChannelType
/// </summary>
public enum DeviceStreamChannelType {
  /// <summary>Data stream receiver channel.</summary>
  Receiver = 0,
  /// <summary>Data stream transmitter channel.</summary>
  Transmitter
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceStreamChannelType
/// </summary>
public class CDeviceStreamChannelType : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceStreamChannelType(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceStreamChannelType_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceStreamChannelType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceStreamChannelType() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceStreamChannelType(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceStreamChannelType
    /// </summary>
    public DeviceStreamChannelType Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceStreamChannelType(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceStreamChannelType__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceStreamChannelType(CDeviceStreamChannelType feature) : this(neoapi_csharpPINVOKE.new_CDeviceStreamChannelType__SWIG_1(CDeviceStreamChannelType.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceStreamChannelType
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceStreamChannelType object</returns>
  public CDeviceStreamChannelType Set(DeviceStreamChannelType value) {
    CDeviceStreamChannelType ret = new CDeviceStreamChannelType(neoapi_csharpPINVOKE.CDeviceStreamChannelType_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceStreamChannelType
  /// </summary>
  /// <returns>The value as DeviceStreamChannelType</returns>
  public DeviceStreamChannelType Get() {
    DeviceStreamChannelType ret = (DeviceStreamChannelType)neoapi_csharpPINVOKE.CDeviceStreamChannelType_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceTLType
/// </summary>
public enum DeviceTLType {
  /// <summary>Camera Link.</summary>
  CameraLink = 0,
  /// <summary>Camera Link High Speed.</summary>
  CameraLinkHS,
  /// <summary>CoaXPress.</summary>
  CoaXPress,
  /// <summary>Custom Transport Layer.</summary>
  Custom,
  /// <summary>GigE Vision.</summary>
  GigEVision,
  /// <summary>USB3 Vision.</summary>
  USB3Vision
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceTLType
/// </summary>
public class CDeviceTLType : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceTLType(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceTLType_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceTLType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceTLType() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceTLType(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceTLType
    /// </summary>
    public DeviceTLType Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceTLType(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceTLType__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceTLType(CDeviceTLType feature) : this(neoapi_csharpPINVOKE.new_CDeviceTLType__SWIG_1(CDeviceTLType.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceTLType
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceTLType object</returns>
  public CDeviceTLType Set(DeviceTLType value) {
    CDeviceTLType ret = new CDeviceTLType(neoapi_csharpPINVOKE.CDeviceTLType_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceTLType
  /// </summary>
  /// <returns>The value as DeviceTLType</returns>
  public DeviceTLType Get() {
    DeviceTLType ret = (DeviceTLType)neoapi_csharpPINVOKE.CDeviceTLType_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceTapGeometry
/// </summary>
public enum DeviceTapGeometry {
  /// <summary>Geometry_10X</summary>
  Geometry_10X = 0,
  /// <summary>Geometry_10X_1Y</summary>
  Geometry_10X_1Y,
  /// <summary>Geometry_1X</summary>
  Geometry_1X,
  /// <summary>Geometry_1X10</summary>
  Geometry_1X10,
  /// <summary>Geometry_1X10_1Y</summary>
  Geometry_1X10_1Y,
  /// <summary>Geometry_1X2</summary>
  Geometry_1X2,
  /// <summary>Geometry_1X2_1Y</summary>
  Geometry_1X2_1Y,
  /// <summary>Geometry_1X2_1Y2</summary>
  Geometry_1X2_1Y2,
  /// <summary>Geometry_1X2_2YE</summary>
  Geometry_1X2_2YE,
  /// <summary>Geometry_1X3</summary>
  Geometry_1X3,
  /// <summary>Geometry_1X3_1Y</summary>
  Geometry_1X3_1Y,
  /// <summary>Geometry_1X4</summary>
  Geometry_1X4,
  /// <summary>Geometry_1X4_1Y</summary>
  Geometry_1X4_1Y,
  /// <summary>Geometry_1X8</summary>
  Geometry_1X8,
  /// <summary>Geometry_1X8_1Y</summary>
  Geometry_1X8_1Y,
  /// <summary>Geometry_1X_1Y</summary>
  Geometry_1X_1Y,
  /// <summary>Geometry_1X_1Y2</summary>
  Geometry_1X_1Y2,
  /// <summary>Geometry_1X_2YE</summary>
  Geometry_1X_2YE,
  /// <summary>Geometry_2X</summary>
  Geometry_2X,
  /// <summary>Geometry_2X2</summary>
  Geometry_2X2,
  /// <summary>Geometry_2X2E</summary>
  Geometry_2X2E,
  /// <summary>Geometry_2X2E_1Y</summary>
  Geometry_2X2E_1Y,
  /// <summary>Geometry_2X2E_2YE</summary>
  Geometry_2X2E_2YE,
  /// <summary>Geometry_2X2M</summary>
  Geometry_2X2M,
  /// <summary>Geometry_2X2M_1Y</summary>
  Geometry_2X2M_1Y,
  /// <summary>Geometry_2X2_1Y</summary>
  Geometry_2X2_1Y,
  /// <summary>Geometry_2XE</summary>
  Geometry_2XE,
  /// <summary>Geometry_2XE_1Y</summary>
  Geometry_2XE_1Y,
  /// <summary>Geometry_2XE_1Y2</summary>
  Geometry_2XE_1Y2,
  /// <summary>Geometry_2XE_2YE</summary>
  Geometry_2XE_2YE,
  /// <summary>Geometry_2XM</summary>
  Geometry_2XM,
  /// <summary>Geometry_2XM_1Y</summary>
  Geometry_2XM_1Y,
  /// <summary>Geometry_2XM_1Y2</summary>
  Geometry_2XM_1Y2,
  /// <summary>Geometry_2XM_2YE</summary>
  Geometry_2XM_2YE,
  /// <summary>Geometry_2X_1Y</summary>
  Geometry_2X_1Y,
  /// <summary>Geometry_2X_1Y2</summary>
  Geometry_2X_1Y2,
  /// <summary>Geometry_2X_2YE</summary>
  Geometry_2X_2YE,
  /// <summary>Geometry_3X</summary>
  Geometry_3X,
  /// <summary>Geometry_3X_1Y</summary>
  Geometry_3X_1Y,
  /// <summary>Geometry_4X</summary>
  Geometry_4X,
  /// <summary>Geometry_4X2</summary>
  Geometry_4X2,
  /// <summary>Geometry_4X2E</summary>
  Geometry_4X2E,
  /// <summary>Geometry_4X2E_1Y</summary>
  Geometry_4X2E_1Y,
  /// <summary>Geometry_4X2_1Y</summary>
  Geometry_4X2_1Y,
  /// <summary>Geometry_4X_1Y</summary>
  Geometry_4X_1Y,
  /// <summary>Geometry_8X</summary>
  Geometry_8X,
  /// <summary>Geometry_8X_1Y</summary>
  Geometry_8X_1Y
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceTapGeometry
/// </summary>
public class CDeviceTapGeometry : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceTapGeometry(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceTapGeometry_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceTapGeometry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceTapGeometry() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceTapGeometry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceTapGeometry
    /// </summary>
    public DeviceTapGeometry Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceTapGeometry(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceTapGeometry__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceTapGeometry(CDeviceTapGeometry feature) : this(neoapi_csharpPINVOKE.new_CDeviceTapGeometry__SWIG_1(CDeviceTapGeometry.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceTapGeometry
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceTapGeometry object</returns>
  public CDeviceTapGeometry Set(DeviceTapGeometry value) {
    CDeviceTapGeometry ret = new CDeviceTapGeometry(neoapi_csharpPINVOKE.CDeviceTapGeometry_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceTapGeometry
  /// </summary>
  /// <returns>The value as DeviceTapGeometry</returns>
  public DeviceTapGeometry Get() {
    DeviceTapGeometry ret = (DeviceTapGeometry)neoapi_csharpPINVOKE.CDeviceTapGeometry_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceTemperatureSelector
/// </summary>
public enum DeviceTemperatureSelector {
  /// <summary>Temperature inside the camera housing. AVAILABLE: Always</summary>
  InHouse = 0,
  /// <summary>Temperature of the device's mainboard.</summary>
  Mainboard,
  /// <summary>Temperature of the image sensor of the camera.</summary>
  Sensor
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceTemperatureSelector
/// </summary>
public class CDeviceTemperatureSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceTemperatureSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceTemperatureSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceTemperatureSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceTemperatureSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceTemperatureSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceTemperatureSelector
    /// </summary>
    public DeviceTemperatureSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceTemperatureSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceTemperatureSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceTemperatureSelector(CDeviceTemperatureSelector feature) : this(neoapi_csharpPINVOKE.new_CDeviceTemperatureSelector__SWIG_1(CDeviceTemperatureSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceTemperatureSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceTemperatureSelector object</returns>
  public CDeviceTemperatureSelector Set(DeviceTemperatureSelector value) {
    CDeviceTemperatureSelector ret = new CDeviceTemperatureSelector(neoapi_csharpPINVOKE.CDeviceTemperatureSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceTemperatureSelector
  /// </summary>
  /// <returns>The value as DeviceTemperatureSelector</returns>
  public DeviceTemperatureSelector Get() {
    DeviceTemperatureSelector ret = (DeviceTemperatureSelector)neoapi_csharpPINVOKE.CDeviceTemperatureSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceTemperatureStatus
/// </summary>
public enum DeviceTemperatureStatus {
  /// <summary>The device operates in a critical temperature range.</summary>
  Exceeded = 0,
  /// <summary>The device operates in an increased temperature range.</summary>
  High,
  /// <summary>The device operates in normal temperature range.</summary>
  Normal
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceTemperatureStatus
/// </summary>
public class CDeviceTemperatureStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceTemperatureStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceTemperatureStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceTemperatureStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceTemperatureStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceTemperatureStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceTemperatureStatus
    /// </summary>
    public DeviceTemperatureStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceTemperatureStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceTemperatureStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceTemperatureStatus(CDeviceTemperatureStatus feature) : this(neoapi_csharpPINVOKE.new_CDeviceTemperatureStatus__SWIG_1(CDeviceTemperatureStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceTemperatureStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceTemperatureStatus object</returns>
  public CDeviceTemperatureStatus Set(DeviceTemperatureStatus value) {
    CDeviceTemperatureStatus ret = new CDeviceTemperatureStatus(neoapi_csharpPINVOKE.CDeviceTemperatureStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceTemperatureStatus
  /// </summary>
  /// <returns>The value as DeviceTemperatureStatus</returns>
  public DeviceTemperatureStatus Get() {
    DeviceTemperatureStatus ret = (DeviceTemperatureStatus)neoapi_csharpPINVOKE.CDeviceTemperatureStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceTemperatureStatusTransitionSelector
/// </summary>
public enum DeviceTemperatureStatusTransitionSelector {
  /// <summary>Exceeded To Normal</summary>
  ExceededToNormal = 0,
  /// <summary>High To Exceeded</summary>
  HighToExceeded,
  /// <summary>Normal To High</summary>
  NormalToHigh
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceTemperatureStatusTransitionSelector
/// </summary>
public class CDeviceTemperatureStatusTransitionSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceTemperatureStatusTransitionSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceTemperatureStatusTransitionSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceTemperatureStatusTransitionSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceTemperatureStatusTransitionSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceTemperatureStatusTransitionSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceTemperatureStatusTransitionSelector
    /// </summary>
    public DeviceTemperatureStatusTransitionSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceTemperatureStatusTransitionSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceTemperatureStatusTransitionSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceTemperatureStatusTransitionSelector(CDeviceTemperatureStatusTransitionSelector feature) : this(neoapi_csharpPINVOKE.new_CDeviceTemperatureStatusTransitionSelector__SWIG_1(CDeviceTemperatureStatusTransitionSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceTemperatureStatusTransitionSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceTemperatureStatusTransitionSelector object</returns>
  public CDeviceTemperatureStatusTransitionSelector Set(DeviceTemperatureStatusTransitionSelector value) {
    CDeviceTemperatureStatusTransitionSelector ret = new CDeviceTemperatureStatusTransitionSelector(neoapi_csharpPINVOKE.CDeviceTemperatureStatusTransitionSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceTemperatureStatusTransitionSelector
  /// </summary>
  /// <returns>The value as DeviceTemperatureStatusTransitionSelector</returns>
  public DeviceTemperatureStatusTransitionSelector Get() {
    DeviceTemperatureStatusTransitionSelector ret = (DeviceTemperatureStatusTransitionSelector)neoapi_csharpPINVOKE.CDeviceTemperatureStatusTransitionSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for DeviceType
/// </summary>
public enum DeviceType {
  /// <summary>Controllable device (with no data stream handling).</summary>
  Peripheral = 0,
  /// <summary>Data stream receiver device.</summary>
  Receiver,
  /// <summary>Data stream receiver and transmitter device.</summary>
  Transceiver,
  /// <summary>Data stream transmitter device.</summary>
  Transmitter
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature DeviceType
/// </summary>
public class CDeviceType : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CDeviceType(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CDeviceType_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CDeviceType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CDeviceType() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CDeviceType(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of DeviceType
    /// </summary>
    public DeviceType Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CDeviceType(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CDeviceType__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CDeviceType(CDeviceType feature) : this(neoapi_csharpPINVOKE.new_CDeviceType__SWIG_1(CDeviceType.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of DeviceType
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CDeviceType object</returns>
  public CDeviceType Set(DeviceType value) {
    CDeviceType ret = new CDeviceType(neoapi_csharpPINVOKE.CDeviceType_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of DeviceType
  /// </summary>
  /// <returns>The value as DeviceType</returns>
  public DeviceType Get() {
    DeviceType ret = (DeviceType)neoapi_csharpPINVOKE.CDeviceType_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for EventNotification
/// </summary>
public enum EventNotification {
  /// <summary>The selected Event notification is disabled.</summary>
  Off = 0,
  /// <summary>The selected Event notification is enabled.</summary>
  On,
  /// <summary>The selected Event notification is enabled for one event then return to Off state.</summary>
  Once
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature EventNotification
/// </summary>
public class CEventNotification : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CEventNotification(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CEventNotification_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CEventNotification obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CEventNotification() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CEventNotification(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of EventNotification
    /// </summary>
    public EventNotification Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CEventNotification(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CEventNotification__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CEventNotification(CEventNotification feature) : this(neoapi_csharpPINVOKE.new_CEventNotification__SWIG_1(CEventNotification.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of EventNotification
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CEventNotification object</returns>
  public CEventNotification Set(EventNotification value) {
    CEventNotification ret = new CEventNotification(neoapi_csharpPINVOKE.CEventNotification_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of EventNotification
  /// </summary>
  /// <returns>The value as EventNotification</returns>
  public EventNotification Get() {
    EventNotification ret = (EventNotification)neoapi_csharpPINVOKE.CEventNotification_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for EventSelector
/// </summary>
public enum EventSelector {
  /// <summary>Device just completed the Acquisition of one or many Frames.</summary>
  AcquisitionEnd = 0,
  /// <summary>Device just detected an error during the active Acquisition.</summary>
  AcquisitionError,
  /// <summary>Device just started the Acquisition of one or many Frames.</summary>
  AcquisitionStart,
  /// <summary>Device just completed the transfer of one or many Frames.</summary>
  AcquisitionTransferEnd,
  /// <summary>Device just started the transfer of one or many Frames.</summary>
  AcquisitionTransferStart,
  /// <summary>Device just received a trigger for the Acquisition of one or many Frames.</summary>
  AcquisitionTrigger,
  /// <summary>Device just missed a trigger for the Acquisition of one or many Frames.</summary>
  AcquisitionTriggerMissed,
  /// <summary>The event will be generated when an action command has triggered an image in the camera.</summary>
  Action1,
  /// <summary>The event will be generated when a valid scheduled action command is received and is scheduled to be executed at a time that is already past.</summary>
  ActionLate,
  /// <summary>The event will be generated when counter 0 ends counting.</summary>
  Counter0End,
  /// <summary>The event will be generated when counter 0 starts counting.</summary>
  Counter0Start,
  /// <summary>The event will be generated when counter 1 ends counting.</summary>
  Counter1End,
  /// <summary>The event will be generated when counter 1 starts counting.</summary>
  Counter1Start,
  /// <summary>The event will be generated when the status of the internal device temperature has been changed. AVAILABLE: Always</summary>
  DeviceTemperatureStatusChanged,
  /// <summary>The event will be generated when the Encoder 0 restarts moving.</summary>
  Encoder0Restarted,
  /// <summary>The event will be generated when the Encoder 0 stops for longer than EncoderTimeout.</summary>
  Encoder0Stopped,
  /// <summary>The event will be generated when the Encoder 1 restarts moving.</summary>
  Encoder1Restarted,
  /// <summary>The event will be generated when the Encoder 1 stops for longer than EncoderTimeout.</summary>
  Encoder1Stopped,
  /// <summary>Device just detected an error during the active Acquisition.</summary>
  Error,
  /// <summary>The event will be generated when an event had to be discarded in the camera.</summary>
  EventDiscarded,
  /// <summary>The event will be generated when an event was lost in the camera. AVAILABLE: Always</summary>
  EventLost,
  /// <summary>Device just completed the exposure of one Frame (or Line).</summary>
  ExposureEnd,
  /// <summary>Device just started the exposure of one Frame (or Line).</summary>
  ExposureStart,
  /// <summary>Device just completed the capture of a burst of Frames.</summary>
  FrameBurstEnd,
  /// <summary>Device just started the capture of a burst of Frames.</summary>
  FrameBurstStart,
  /// <summary>Device just completed the capture of one Frame.</summary>
  FrameEnd,
  /// <summary>Device just started the capture of one Frame.</summary>
  FrameStart,
  /// <summary>Device just completed the transfer of one Frame.</summary>
  FrameTransferEnd,
  /// <summary>The event will be generated when the internal camera buffer is overflowed and an image has been lost. AVAILABLE: Always</summary>
  FrameTransferSkipped,
  /// <summary>Device just started the transfer of one Frame.</summary>
  FrameTransferStart,
  /// <summary>Device just received a trigger to start the capture of one Frame.</summary>
  FrameTrigger,
  /// <summary>Device just missed a trigger to start the capture of one Frame.</summary>
  FrameTriggerMissed,
  /// <summary>Device just detected an error. AVAILABLE: Always</summary>
  GigEVisionError,
  /// <summary>The device runs in heartbeat timeout. AVAILABLE: Always</summary>
  GigEVisionHeartbeatTimeOut,
  /// <summary>The event will be generated when a Falling or Rising Edge is detected on the Line 0.</summary>
  Line0AnyEdge,
  /// <summary>The event will be generated when a Falling Edge is detected on the Line 0.</summary>
  Line0FallingEdge,
  /// <summary>The event will be generated when a Rising Edge is detected on the Line 0.</summary>
  Line0RisingEdge,
  /// <summary>The event will be generated when a Falling or Rising Edge is detected on the Line 1.</summary>
  Line1AnyEdge,
  /// <summary>The event will be generated when a Falling Edge is detected on the Line 1.</summary>
  Line1FallingEdge,
  /// <summary>The event will be generated when a Rising Edge is detected on the Line 1.</summary>
  Line1RisingEdge,
  /// <summary>The event will be generated when a Falling Edge is detected on the Line 2. AVAILABLE: Always</summary>
  Line2FallingEdge,
  /// <summary>The event will be generated when a Rising Edge is detected on the Line 2. AVAILABLE: Always</summary>
  Line2RisingEdge,
  /// <summary>The event will be generated when a Falling Edge is detected on the Line 3. AVAILABLE: Always</summary>
  Line3FallingEdge,
  /// <summary>The event will be generated when a Rising Edge is detected on the Line 3. AVAILABLE: Always</summary>
  Line3RisingEdge,
  /// <summary>The event will be generated when a Falling Edge is detected on the Line 4. AVAILABLE: Always</summary>
  Line4FallingEdge,
  /// <summary>The event will be generated when a Rising Edge is detected on the Line 4. AVAILABLE: Always</summary>
  Line4RisingEdge,
  /// <summary>The event will be generated when a Falling Edge is detected on the Line 5. AVAILABLE: Always</summary>
  Line5FallingEdge,
  /// <summary>The event will be generated when a Rising Edge is detected on the Line 5. AVAILABLE: Always</summary>
  Line5RisingEdge,
  /// <summary>The event will be generated when a Falling Edge is detected on the Line 6. AVAILABLE: Always</summary>
  Line6FallingEdge,
  /// <summary>The event will be generated when a Rising Edge is detected on the Line 6. AVAILABLE: Always</summary>
  Line6RisingEdge,
  /// <summary>The event will be generated when a Falling Edge is detected on the Line 7. AVAILABLE: Always</summary>
  Line7FallingEdge,
  /// <summary>The event will be generated when a Rising Edge is detected on the Line 7. AVAILABLE: Always</summary>
  Line7RisingEdge,
  /// <summary>Device just completed the capture of one Line.</summary>
  LineEnd,
  /// <summary>Device just started the capture of one Line.</summary>
  LineStart,
  /// <summary>Device just received a trigger to start the capture of one Line.</summary>
  LineTrigger,
  /// <summary>Device just missed a trigger to start the capture of one Line.</summary>
  LineTriggerMissed,
  /// <summary>The event will be generated when the link speed has changed.</summary>
  LinkSpeedChange,
  /// <summary>The event will be generated when a Rising Edge is detected on the LinkTrigger 0.</summary>
  LinkTrigger0,
  /// <summary>The event will be generated when a Rising Edge is detected on the LinkTrigger 1.</summary>
  LinkTrigger1,
  /// <summary>The event will be generated when a Link down at ethernet interface 0 detect.</summary>
  PhysicalConnection0Down,
  /// <summary>The event will be generated when a Link up at ethernet interface 0 detect.</summary>
  PhysicalConnection0Up,
  /// <summary>The event will be generated when a Link down at ethernet interface 1 detect.</summary>
  PhysicalConnection1Down,
  /// <summary>The event will be generated when a Link up at ethernet interface 1 detect.</summary>
  PhysicalConnection1Up,
  /// <summary>The event will be generated when a primary application switchover has been granted (GigE Vision Specific).</summary>
  PrimaryApplicationSwitch,
  /// <summary>The event will be generated when the status of the internal PTP servo has been changed. AVAILABLE: Always.</summary>
  PtpServoStatusChanged,
  /// <summary>The event will be generated when the status of the internal PTP state machine has been changed. AVAILABLE: Always.</summary>
  PtpStatusChanged,
  /// <summary>Device sequencer set has changed.</summary>
  SequencerSetChange,
  /// <summary>Device just completed the transfer of one Block.</summary>
  Stream0TransferBlockEnd,
  /// <summary>Device just started the transfer of one Block.</summary>
  Stream0TransferBlockStart,
  /// <summary>Device just received a trigger to start the transfer of one Block.</summary>
  Stream0TransferBlockTrigger,
  /// <summary>Device just completed the transfer of a burst of Blocks.</summary>
  Stream0TransferBurstEnd,
  /// <summary>Device just started the transfer of a burst of Blocks.</summary>
  Stream0TransferBurstStart,
  /// <summary>Device just completed the transfer of one or many Blocks.</summary>
  Stream0TransferEnd,
  /// <summary>Device transfer queue overflowed.</summary>
  Stream0TransferOverflow,
  /// <summary>Device just paused the transfer.</summary>
  Stream0TransferPause,
  /// <summary>Device just resumed the transfer.</summary>
  Stream0TransferResume,
  /// <summary>Device just started the transfer of one or many Blocks.</summary>
  Stream0TransferStart,
  /// <summary>The test event will be generated when the device receives the TestEventGenerate command (EventNotification for the Test event is always On).</summary>
  Test,
  /// <summary>The event will be generated when Timer 0 ends counting.</summary>
  Timer0End,
  /// <summary>The event will be generated when Timer 0 starts counting.</summary>
  Timer0Start,
  /// <summary>The event will be generated when Timer 1 ends counting.</summary>
  Timer1End,
  /// <summary>The event will be generated when Timer 1 starts counting.</summary>
  Timer1Start,
  /// <summary>The event will be generated when Timer 2 ends counting.</summary>
  Timer2End,
  /// <summary>The event will be generated when Timer 3 ends counting.</summary>
  Timer3End,
  /// <summary>The event will be generated when no internal camera buffer is available. AVAILABLE: Always</summary>
  TransferBufferFull,
  /// <summary>The event will be generated when an internal camera buffer is available again. AVAILABLE: Always</summary>
  TransferBufferReady,
  /// <summary>Trigger Overlapped. AVAILABLE: Always</summary>
  TriggerOverlapped,
  /// <summary>The event will be generated when the camera is able to process an incoming trigger signal. AVAILABLE: Always</summary>
  TriggerReady,
  /// <summary>The event will be generated when camera reject an incoming trigger signal. AVAILABLE: Always</summary>
  TriggerSkipped
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature EventSelector
/// </summary>
public class CEventSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CEventSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CEventSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CEventSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CEventSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CEventSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of EventSelector
    /// </summary>
    public EventSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CEventSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CEventSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CEventSelector(CEventSelector feature) : this(neoapi_csharpPINVOKE.new_CEventSelector__SWIG_1(CEventSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of EventSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CEventSelector object</returns>
  public CEventSelector Set(EventSelector value) {
    CEventSelector ret = new CEventSelector(neoapi_csharpPINVOKE.CEventSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of EventSelector
  /// </summary>
  /// <returns>The value as EventSelector</returns>
  public EventSelector Get() {
    EventSelector ret = (EventSelector)neoapi_csharpPINVOKE.CEventSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ExposureAuto
/// </summary>
public enum ExposureAuto {
  /// <summary>Exposure duration is constantly adapted by the device to maximize the dynamic range.</summary>
  Continuous = 0,
  /// <summary>Exposure duration is user controlled using ExposureTime.</summary>
  Off,
  /// <summary>Exposure duration is adapted once by the device. Once it has converged, it returns to the Off state.</summary>
  Once
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ExposureAuto
/// </summary>
public class CExposureAuto : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CExposureAuto(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CExposureAuto_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CExposureAuto obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CExposureAuto() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CExposureAuto(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ExposureAuto
    /// </summary>
    public ExposureAuto Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CExposureAuto(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CExposureAuto__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CExposureAuto(CExposureAuto feature) : this(neoapi_csharpPINVOKE.new_CExposureAuto__SWIG_1(CExposureAuto.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ExposureAuto
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CExposureAuto object</returns>
  public CExposureAuto Set(ExposureAuto value) {
    CExposureAuto ret = new CExposureAuto(neoapi_csharpPINVOKE.CExposureAuto_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ExposureAuto
  /// </summary>
  /// <returns>The value as ExposureAuto</returns>
  public ExposureAuto Get() {
    ExposureAuto ret = (ExposureAuto)neoapi_csharpPINVOKE.CExposureAuto_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ExposureMode
/// </summary>
public enum ExposureMode {
  /// <summary>Disables the Exposure and let the shutter open.</summary>
  Off = 0,
  /// <summary>Timed exposure. The exposure duration time is set using the ExposureTime or ExposureAuto features and the exposure starts with the FrameStart or LineStart.</summary>
  Timed,
  /// <summary>Uses one or more trigger signal(s) to control the exposure duration independently from the current Frame or Line triggers. See ExposureStart, ExposureEnd and ExposureActive of the TriggerSelector feature.</summary>
  TriggerControlled,
  /// <summary>Uses the width of the current Frame or Line trigger signal(s) pulse to control the exposure duration. Note that if the Frame or Line TriggerActivation is RisingEdge or LevelHigh, the exposure duration will be the time the trigger stays High. If TriggerActivation is FallingEdge or LevelLow, the exposure time will last as long as the trigger stays Low.</summary>
  TriggerWidth
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ExposureMode
/// </summary>
public class CExposureMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CExposureMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CExposureMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CExposureMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CExposureMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CExposureMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ExposureMode
    /// </summary>
    public ExposureMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CExposureMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CExposureMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CExposureMode(CExposureMode feature) : this(neoapi_csharpPINVOKE.new_CExposureMode__SWIG_1(CExposureMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ExposureMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CExposureMode object</returns>
  public CExposureMode Set(ExposureMode value) {
    CExposureMode ret = new CExposureMode(neoapi_csharpPINVOKE.CExposureMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ExposureMode
  /// </summary>
  /// <returns>The value as ExposureMode</returns>
  public ExposureMode Get() {
    ExposureMode ret = (ExposureMode)neoapi_csharpPINVOKE.CExposureMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for FocalLengthStatus
/// </summary>
public enum FocalLengthStatus {
  /// <summary>Busy</summary>
  Busy = 0,
  /// <summary>Error</summary>
  Error,
  /// <summary>Not Connected</summary>
  NotConnected,
  /// <summary>Not Initialized</summary>
  NotInitialized,
  /// <summary>Not Supported</summary>
  NotSupported,
  /// <summary>Ready</summary>
  Ready
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature FocalLengthStatus
/// </summary>
public class CFocalLengthStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CFocalLengthStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CFocalLengthStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CFocalLengthStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CFocalLengthStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CFocalLengthStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of FocalLengthStatus
    /// </summary>
    public FocalLengthStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CFocalLengthStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CFocalLengthStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CFocalLengthStatus(CFocalLengthStatus feature) : this(neoapi_csharpPINVOKE.new_CFocalLengthStatus__SWIG_1(CFocalLengthStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of FocalLengthStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CFocalLengthStatus object</returns>
  public CFocalLengthStatus Set(FocalLengthStatus value) {
    CFocalLengthStatus ret = new CFocalLengthStatus(neoapi_csharpPINVOKE.CFocalLengthStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of FocalLengthStatus
  /// </summary>
  /// <returns>The value as FocalLengthStatus</returns>
  public FocalLengthStatus Get() {
    FocalLengthStatus ret = (FocalLengthStatus)neoapi_csharpPINVOKE.CFocalLengthStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for FocusStatus
/// </summary>
public enum FocusStatus {
  /// <summary>Busy</summary>
  Busy = 0,
  /// <summary>Error</summary>
  Error,
  /// <summary>Not Connected</summary>
  NotConnected,
  /// <summary>Not Initialized</summary>
  NotInitialized,
  /// <summary>Not Supported</summary>
  NotSupported,
  /// <summary>Ready</summary>
  Ready
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature FocusStatus
/// </summary>
public class CFocusStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CFocusStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CFocusStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CFocusStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CFocusStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CFocusStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of FocusStatus
    /// </summary>
    public FocusStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CFocusStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CFocusStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CFocusStatus(CFocusStatus feature) : this(neoapi_csharpPINVOKE.new_CFocusStatus__SWIG_1(CFocusStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of FocusStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CFocusStatus object</returns>
  public CFocusStatus Set(FocusStatus value) {
    CFocusStatus ret = new CFocusStatus(neoapi_csharpPINVOKE.CFocusStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of FocusStatus
  /// </summary>
  /// <returns>The value as FocusStatus</returns>
  public FocusStatus Get() {
    FocusStatus ret = (FocusStatus)neoapi_csharpPINVOKE.CFocusStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for GainAuto
/// </summary>
public enum GainAuto {
  /// <summary>Gain is constantly adjusted by the device.</summary>
  Continuous = 0,
  /// <summary>Gain is User controlled using Gain.</summary>
  Off,
  /// <summary>Gain is automatically adjusted once by the device. Once it has converged, it automatically returns to the Off state.</summary>
  Once
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature GainAuto
/// </summary>
public class CGainAuto : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CGainAuto(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CGainAuto_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CGainAuto obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CGainAuto() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CGainAuto(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of GainAuto
    /// </summary>
    public GainAuto Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CGainAuto(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CGainAuto__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CGainAuto(CGainAuto feature) : this(neoapi_csharpPINVOKE.new_CGainAuto__SWIG_1(CGainAuto.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of GainAuto
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CGainAuto object</returns>
  public CGainAuto Set(GainAuto value) {
    CGainAuto ret = new CGainAuto(neoapi_csharpPINVOKE.CGainAuto_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of GainAuto
  /// </summary>
  /// <returns>The value as GainAuto</returns>
  public GainAuto Get() {
    GainAuto ret = (GainAuto)neoapi_csharpPINVOKE.CGainAuto_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for GainSelector
/// </summary>
public enum GainSelector {
  /// <summary>Gain will be applied to all channels or taps.</summary>
  All = 0,
  /// <summary>Gain will be applied to all analog channels or taps.</summary>
  AnalogAll,
  /// <summary>Gain will be applied to the blue analog channel.</summary>
  AnalogBlue,
  /// <summary>Gain will be applied to the green analog channel.</summary>
  AnalogGreen,
  /// <summary>Gain will be applied to the red analog channel.</summary>
  AnalogRed,
  /// <summary>Analog gain will be applied to Tap 1.</summary>
  AnalogTap1,
  /// <summary>Analog gain will be applied to Tap 2.</summary>
  AnalogTap2,
  /// <summary>Gain will be applied to U analog channel.</summary>
  AnalogU,
  /// <summary>Gain will be applied to V analog channel.</summary>
  AnalogV,
  /// <summary>Gain will be applied to Y analog channel.</summary>
  AnalogY,
  /// <summary>Gain will be applied to the blue analog channel.</summary>
  Blue,
  /// <summary>Gain will be applied to all digital channels or taps.</summary>
  DigitalAll,
  /// <summary>Gain will be applied to the blue digital channel.</summary>
  DigitalBlue,
  /// <summary>Gain will be applied to the green digital channel.</summary>
  DigitalGreen,
  /// <summary>Gain will be applied to the red digital channel.</summary>
  DigitalRed,
  /// <summary>Digital gain will be applied to Tap 1.</summary>
  DigitalTap1,
  /// <summary>Digital gain will be applied to Tap 2.</summary>
  DigitalTap2,
  /// <summary>Gain will be applied to U digital channel.</summary>
  DigitalU,
  /// <summary>Gain will be applied to V digital channel.</summary>
  DigitalV,
  /// <summary>Gain will be applied to Y digital channel.</summary>
  DigitalY,
  /// <summary>Gain will be applied to the green analog channel.</summary>
  Green,
  /// <summary>Gain will be applied to the green blue channel. AVAILABLE: Always</summary>
  GreenBlue,
  /// <summary>Gain will be applied to the green red channel. AVAILABLE: Always</summary>
  GreenRed,
  /// <summary>Gain will be applied to the red analog channel.</summary>
  Red,
  /// <summary>Analog gain will be applied to Tap 1.</summary>
  Tap1,
  /// <summary>Analog gain will be applied to Tap 2.</summary>
  Tap2,
  /// <summary>Gain will be applied to U analog channel.</summary>
  U,
  /// <summary>Gain will be applied to V analog channel.</summary>
  V,
  /// <summary>Gain will be applied to Y analog channel.</summary>
  Y
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature GainSelector
/// </summary>
public class CGainSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CGainSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CGainSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CGainSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CGainSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CGainSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of GainSelector
    /// </summary>
    public GainSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CGainSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CGainSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CGainSelector(CGainSelector feature) : this(neoapi_csharpPINVOKE.new_CGainSelector__SWIG_1(CGainSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of GainSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CGainSelector object</returns>
  public CGainSelector Set(GainSelector value) {
    CGainSelector ret = new CGainSelector(neoapi_csharpPINVOKE.CGainSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of GainSelector
  /// </summary>
  /// <returns>The value as GainSelector</returns>
  public GainSelector Get() {
    GainSelector ret = (GainSelector)neoapi_csharpPINVOKE.CGainSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for GevCCP
/// </summary>
public enum GevCCP {
  /// <summary>Control Access</summary>
  ControlAccess = 0,
  /// <summary>Control Access Switchover Active</summary>
  ControlAccessSwitchoverActive,
  /// <summary>Exclusive Access</summary>
  ExclusiveAccess,
  /// <summary>Open Access</summary>
  OpenAccess
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature GevCCP
/// </summary>
public class CGevCCP : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CGevCCP(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CGevCCP_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CGevCCP obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CGevCCP() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CGevCCP(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of GevCCP
    /// </summary>
    public GevCCP Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CGevCCP(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CGevCCP__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CGevCCP(CGevCCP feature) : this(neoapi_csharpPINVOKE.new_CGevCCP__SWIG_1(CGevCCP.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of GevCCP
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CGevCCP object</returns>
  public CGevCCP Set(GevCCP value) {
    CGevCCP ret = new CGevCCP(neoapi_csharpPINVOKE.CGevCCP_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of GevCCP
  /// </summary>
  /// <returns>The value as GevCCP</returns>
  public GevCCP Get() {
    GevCCP ret = (GevCCP)neoapi_csharpPINVOKE.CGevCCP_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for GevGVCPExtendedStatusCodesSelector
/// </summary>
public enum GevGVCPExtendedStatusCodesSelector {
  /// <summary>Version 1 1</summary>
  Version1_1 = 0,
  /// <summary>Version 2 0</summary>
  Version2_0
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature GevGVCPExtendedStatusCodesSelector
/// </summary>
public class CGevGVCPExtendedStatusCodesSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CGevGVCPExtendedStatusCodesSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CGevGVCPExtendedStatusCodesSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CGevGVCPExtendedStatusCodesSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CGevGVCPExtendedStatusCodesSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CGevGVCPExtendedStatusCodesSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of GevGVCPExtendedStatusCodesSelector
    /// </summary>
    public GevGVCPExtendedStatusCodesSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CGevGVCPExtendedStatusCodesSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CGevGVCPExtendedStatusCodesSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CGevGVCPExtendedStatusCodesSelector(CGevGVCPExtendedStatusCodesSelector feature) : this(neoapi_csharpPINVOKE.new_CGevGVCPExtendedStatusCodesSelector__SWIG_1(CGevGVCPExtendedStatusCodesSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of GevGVCPExtendedStatusCodesSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CGevGVCPExtendedStatusCodesSelector object</returns>
  public CGevGVCPExtendedStatusCodesSelector Set(GevGVCPExtendedStatusCodesSelector value) {
    CGevGVCPExtendedStatusCodesSelector ret = new CGevGVCPExtendedStatusCodesSelector(neoapi_csharpPINVOKE.CGevGVCPExtendedStatusCodesSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of GevGVCPExtendedStatusCodesSelector
  /// </summary>
  /// <returns>The value as GevGVCPExtendedStatusCodesSelector</returns>
  public GevGVCPExtendedStatusCodesSelector Get() {
    GevGVCPExtendedStatusCodesSelector ret = (GevGVCPExtendedStatusCodesSelector)neoapi_csharpPINVOKE.CGevGVCPExtendedStatusCodesSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for GevIPConfigurationStatus
/// </summary>
public enum GevIPConfigurationStatus {
  /// <summary>DHCP</summary>
  DHCP = 0,
  /// <summary>Force IP</summary>
  ForceIP,
  /// <summary>LLA</summary>
  LLA,
  /// <summary>None</summary>
  None,
  /// <summary>Persistent IP</summary>
  PersistentIP
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature GevIPConfigurationStatus
/// </summary>
public class CGevIPConfigurationStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CGevIPConfigurationStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CGevIPConfigurationStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CGevIPConfigurationStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CGevIPConfigurationStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CGevIPConfigurationStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of GevIPConfigurationStatus
    /// </summary>
    public GevIPConfigurationStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CGevIPConfigurationStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CGevIPConfigurationStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CGevIPConfigurationStatus(CGevIPConfigurationStatus feature) : this(neoapi_csharpPINVOKE.new_CGevIPConfigurationStatus__SWIG_1(CGevIPConfigurationStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of GevIPConfigurationStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CGevIPConfigurationStatus object</returns>
  public CGevIPConfigurationStatus Set(GevIPConfigurationStatus value) {
    CGevIPConfigurationStatus ret = new CGevIPConfigurationStatus(neoapi_csharpPINVOKE.CGevIPConfigurationStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of GevIPConfigurationStatus
  /// </summary>
  /// <returns>The value as GevIPConfigurationStatus</returns>
  public GevIPConfigurationStatus Get() {
    GevIPConfigurationStatus ret = (GevIPConfigurationStatus)neoapi_csharpPINVOKE.CGevIPConfigurationStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for GevSupportedOptionSelector
/// </summary>
public enum GevSupportedOptionSelector {
  /// <summary>Action</summary>
  Action = 0,
  /// <summary>CCP Application Socket</summary>
  CCPApplicationSocket,
  /// <summary>Commands Concatenation</summary>
  CommandsConcatenation,
  /// <summary>Discovery Ack Delay</summary>
  DiscoveryAckDelay,
  /// <summary>Discovery Ack Delay Writable</summary>
  DiscoveryAckDelayWritable,
  /// <summary>Dynamic LAG</summary>
  DynamicLAG,
  /// <summary>Event</summary>
  Event,
  /// <summary>Event Data</summary>
  EventData,
  /// <summary>Extended Status Codes</summary>
  ExtendedStatusCodes,
  /// <summary>Extended Status Codes Version 2 0</summary>
  ExtendedStatusCodesVersion2_0,
  /// <summary>Heartbeat Disable</summary>
  HeartbeatDisable,
  /// <summary>IEEE 1588. AVAILABLE: (DeviceTLVersionMajor >= 2)</summary>
  IEEE1588,
  /// <summary>IP Configuration DHCP</summary>
  IPConfigurationDHCP,
  /// <summary>IP Configuration LLA</summary>
  IPConfigurationLLA,
  /// <summary>IP Configuration Persistent IP</summary>
  IPConfigurationPersistentIP,
  /// <summary>Link Speed</summary>
  LinkSpeed,
  /// <summary>Manifest Table</summary>
  ManifestTable,
  /// <summary>Message Channel Source Socket</summary>
  MessageChannelSourceSocket,
  /// <summary>Multi Link</summary>
  MultiLink,
  /// <summary>PAUSE Frame Generation</summary>
  PAUSEFrameGeneration,
  /// <summary>PAUSE Frame Reception</summary>
  PAUSEFrameReception,
  /// <summary>Packet Resend</summary>
  PacketResend,
  /// <summary>Pending Ack</summary>
  PendingAck,
  /// <summary>Primary Application Switchover</summary>
  PrimaryApplicationSwitchover,
  /// <summary>Ptp</summary>
  Ptp,
  /// <summary>Scheduled Action</summary>
  ScheduledAction,
  /// <summary>Serial Number</summary>
  SerialNumber,
  /// <summary>Single Link</summary>
  SingleLink,
  /// <summary>Standard ID Mode</summary>
  StandardIDMode,
  /// <summary>Static LAG</summary>
  StaticLAG,
  /// <summary>Stream Channel 0 All In Transmission</summary>
  StreamChannel0AllInTransmission,
  /// <summary>Stream Channel 0 Big And Little Endian</summary>
  StreamChannel0BigAndLittleEndian,
  /// <summary>Stream Channel 0 Extended Chunk Data</summary>
  StreamChannel0ExtendedChunkData,
  /// <summary>Stream Channel 0 IP Reassembly</summary>
  StreamChannel0IPReassembly,
  /// <summary>Stream Channel 0 Multi Zone</summary>
  StreamChannel0MultiZone,
  /// <summary>Stream Channel 0 Packet Resend Destination</summary>
  StreamChannel0PacketResendDestination,
  /// <summary>Stream Channel 0 Unconditional Streaming</summary>
  StreamChannel0UnconditionalStreaming,
  /// <summary>Stream Channel 1 All In Transmission</summary>
  StreamChannel1AllInTransmission,
  /// <summary>Stream Channel 1 Big And Little Endian</summary>
  StreamChannel1BigAndLittleEndian,
  /// <summary>Stream Channel 1 Extended Chunk Data</summary>
  StreamChannel1ExtendedChunkData,
  /// <summary>Stream Channel 1 IP Reassembly</summary>
  StreamChannel1IPReassembly,
  /// <summary>Stream Channel 1 Multi Zone</summary>
  StreamChannel1MultiZone,
  /// <summary>Stream Channel 1 Packet Resend Destination</summary>
  StreamChannel1PacketResendDestination,
  /// <summary>Stream Channel 1 Unconditional Streaming</summary>
  StreamChannel1UnconditionalStreaming,
  /// <summary>Stream Channel 2 All In Transmission</summary>
  StreamChannel2AllInTransmission,
  /// <summary>Stream Channel 2 Big And Little Endian</summary>
  StreamChannel2BigAndLittleEndian,
  /// <summary>Stream Channel 2 Extended Chunk Data</summary>
  StreamChannel2ExtendedChunkData,
  /// <summary>Stream Channel 2 IP Reassembly</summary>
  StreamChannel2IPReassembly,
  /// <summary>Stream Channel 2 Multi Zone</summary>
  StreamChannel2MultiZone,
  /// <summary>Stream Channel 2 Packet Resend Destination</summary>
  StreamChannel2PacketResendDestination,
  /// <summary>Stream Channel 2 Unconditional Streaming</summary>
  StreamChannel2UnconditionalStreaming,
  /// <summary>Stream Channel Source Socket</summary>
  StreamChannelSourceSocket,
  /// <summary>Test Data</summary>
  TestData,
  /// <summary>Unconditional Action</summary>
  UnconditionalAction,
  /// <summary>User Defined Name</summary>
  UserDefinedName,
  /// <summary>Write Mem</summary>
  WriteMem
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature GevSupportedOptionSelector
/// </summary>
public class CGevSupportedOptionSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CGevSupportedOptionSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CGevSupportedOptionSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CGevSupportedOptionSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CGevSupportedOptionSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CGevSupportedOptionSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of GevSupportedOptionSelector
    /// </summary>
    public GevSupportedOptionSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CGevSupportedOptionSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CGevSupportedOptionSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CGevSupportedOptionSelector(CGevSupportedOptionSelector feature) : this(neoapi_csharpPINVOKE.new_CGevSupportedOptionSelector__SWIG_1(CGevSupportedOptionSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of GevSupportedOptionSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CGevSupportedOptionSelector object</returns>
  public CGevSupportedOptionSelector Set(GevSupportedOptionSelector value) {
    CGevSupportedOptionSelector ret = new CGevSupportedOptionSelector(neoapi_csharpPINVOKE.CGevSupportedOptionSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of GevSupportedOptionSelector
  /// </summary>
  /// <returns>The value as GevSupportedOptionSelector</returns>
  public GevSupportedOptionSelector Get() {
    GevSupportedOptionSelector ret = (GevSupportedOptionSelector)neoapi_csharpPINVOKE.CGevSupportedOptionSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for HDRGainRatioSelector
/// </summary>
public enum HDRGainRatioSelector {
  /// <summary>Sets HDR gain ratio to dynamic range of 12.0dB.</summary>
  Gain12_0dB = 0,
  /// <summary>Sets HDR gain ratio to dynamic range of 2.5dB.</summary>
  Gain2_5dB,
  /// <summary>Sets HDR gain ratio to dynamic range of 3.5dB.</summary>
  Gain3_5dB,
  /// <summary>Sets HDR gain ratio to dynamic range of 6.0dB.</summary>
  Gain6_0dB,
  /// <summary>Sets HDR gain ratio to dynamic range of 9.5dB.</summary>
  Gain9_5dB,
  /// <summary>Sets HDR gain ratio to dynamic range of 0dB.</summary>
  Off
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature HDRGainRatioSelector
/// </summary>
public class CHDRGainRatioSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CHDRGainRatioSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CHDRGainRatioSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CHDRGainRatioSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CHDRGainRatioSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CHDRGainRatioSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of HDRGainRatioSelector
    /// </summary>
    public HDRGainRatioSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CHDRGainRatioSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CHDRGainRatioSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CHDRGainRatioSelector(CHDRGainRatioSelector feature) : this(neoapi_csharpPINVOKE.new_CHDRGainRatioSelector__SWIG_1(CHDRGainRatioSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of HDRGainRatioSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CHDRGainRatioSelector object</returns>
  public CHDRGainRatioSelector Set(HDRGainRatioSelector value) {
    CHDRGainRatioSelector ret = new CHDRGainRatioSelector(neoapi_csharpPINVOKE.CHDRGainRatioSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of HDRGainRatioSelector
  /// </summary>
  /// <returns>The value as HDRGainRatioSelector</returns>
  public HDRGainRatioSelector Get() {
    HDRGainRatioSelector ret = (HDRGainRatioSelector)neoapi_csharpPINVOKE.CHDRGainRatioSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for HDRTonemappingCurvePresetSelector
/// </summary>
public enum HDRTonemappingCurvePresetSelector {
  /// <summary>The HDR tone-mapping preset for a steep logarithmic transfer curve will be used.</summary>
  Preset1 = 0,
  /// <summary>The HDR tone-mapping preset for a middle steep logarithmic transfer curve will be used.</summary>
  Preset2,
  /// <summary>The HDR tone-mapping preset for a slight logarithmic transfer curve will be used.</summary>
  Preset3
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature HDRTonemappingCurvePresetSelector
/// </summary>
public class CHDRTonemappingCurvePresetSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CHDRTonemappingCurvePresetSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CHDRTonemappingCurvePresetSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CHDRTonemappingCurvePresetSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CHDRTonemappingCurvePresetSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CHDRTonemappingCurvePresetSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of HDRTonemappingCurvePresetSelector
    /// </summary>
    public HDRTonemappingCurvePresetSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CHDRTonemappingCurvePresetSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CHDRTonemappingCurvePresetSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CHDRTonemappingCurvePresetSelector(CHDRTonemappingCurvePresetSelector feature) : this(neoapi_csharpPINVOKE.new_CHDRTonemappingCurvePresetSelector__SWIG_1(CHDRTonemappingCurvePresetSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of HDRTonemappingCurvePresetSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CHDRTonemappingCurvePresetSelector object</returns>
  public CHDRTonemappingCurvePresetSelector Set(HDRTonemappingCurvePresetSelector value) {
    CHDRTonemappingCurvePresetSelector ret = new CHDRTonemappingCurvePresetSelector(neoapi_csharpPINVOKE.CHDRTonemappingCurvePresetSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of HDRTonemappingCurvePresetSelector
  /// </summary>
  /// <returns>The value as HDRTonemappingCurvePresetSelector</returns>
  public HDRTonemappingCurvePresetSelector Get() {
    HDRTonemappingCurvePresetSelector ret = (HDRTonemappingCurvePresetSelector)neoapi_csharpPINVOKE.CHDRTonemappingCurvePresetSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ImageCompressionJPEGFormatOption
/// </summary>
public enum ImageCompressionJPEGFormatOption {
  /// <summary>Provides optimized color and slightly better compression than baseline standard by using custom Huffman tables optimized after statistical analysis of the image content.</summary>
  BaselineOptimized = 0,
  /// <summary>Indicates this is a baseline sequential (single-scan) DCT-based JPEG.</summary>
  BaselineStandard,
  /// <summary>Selects lossless JPEG compression based on a predictive coding model.</summary>
  Lossless,
  /// <summary>Indicates this is a progressive (multi-scan) DCT-based JPEG.</summary>
  Progressive
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ImageCompressionJPEGFormatOption
/// </summary>
public class CImageCompressionJPEGFormatOption : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CImageCompressionJPEGFormatOption(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CImageCompressionJPEGFormatOption_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CImageCompressionJPEGFormatOption obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CImageCompressionJPEGFormatOption() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CImageCompressionJPEGFormatOption(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ImageCompressionJPEGFormatOption
    /// </summary>
    public ImageCompressionJPEGFormatOption Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CImageCompressionJPEGFormatOption(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CImageCompressionJPEGFormatOption__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CImageCompressionJPEGFormatOption(CImageCompressionJPEGFormatOption feature) : this(neoapi_csharpPINVOKE.new_CImageCompressionJPEGFormatOption__SWIG_1(CImageCompressionJPEGFormatOption.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ImageCompressionJPEGFormatOption
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CImageCompressionJPEGFormatOption object</returns>
  public CImageCompressionJPEGFormatOption Set(ImageCompressionJPEGFormatOption value) {
    CImageCompressionJPEGFormatOption ret = new CImageCompressionJPEGFormatOption(neoapi_csharpPINVOKE.CImageCompressionJPEGFormatOption_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ImageCompressionJPEGFormatOption
  /// </summary>
  /// <returns>The value as ImageCompressionJPEGFormatOption</returns>
  public ImageCompressionJPEGFormatOption Get() {
    ImageCompressionJPEGFormatOption ret = (ImageCompressionJPEGFormatOption)neoapi_csharpPINVOKE.CImageCompressionJPEGFormatOption_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ImageCompressionMode
/// </summary>
public enum ImageCompressionMode {
  /// <summary>H.264 compression is selected.</summary>
  H264 = 0,
  /// <summary>JPEG compression is selected.</summary>
  JPEG,
  /// <summary>JPEG 2000 compression is selected.</summary>
  JPEG2000,
  /// <summary>Default value. Image compression is disabled. Images are transmitted uncompressed.</summary>
  Off
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ImageCompressionMode
/// </summary>
public class CImageCompressionMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CImageCompressionMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CImageCompressionMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CImageCompressionMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CImageCompressionMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CImageCompressionMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ImageCompressionMode
    /// </summary>
    public ImageCompressionMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CImageCompressionMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CImageCompressionMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CImageCompressionMode(CImageCompressionMode feature) : this(neoapi_csharpPINVOKE.new_CImageCompressionMode__SWIG_1(CImageCompressionMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ImageCompressionMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CImageCompressionMode object</returns>
  public CImageCompressionMode Set(ImageCompressionMode value) {
    CImageCompressionMode ret = new CImageCompressionMode(neoapi_csharpPINVOKE.CImageCompressionMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ImageCompressionMode
  /// </summary>
  /// <returns>The value as ImageCompressionMode</returns>
  public ImageCompressionMode Get() {
    ImageCompressionMode ret = (ImageCompressionMode)neoapi_csharpPINVOKE.CImageCompressionMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ImageCompressionRateOption
/// </summary>
public enum ImageCompressionRateOption {
  /// <summary>Output stream follows a constant bit rate. Allows easy bandwidth management on the link.</summary>
  FixBitrate = 0,
  /// <summary>Output stream has a constant image quality. Can be used when image processing algorithms are sensitive to image degradation caused by excessive data compression.</summary>
  FixQuality
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ImageCompressionRateOption
/// </summary>
public class CImageCompressionRateOption : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CImageCompressionRateOption(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CImageCompressionRateOption_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CImageCompressionRateOption obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CImageCompressionRateOption() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CImageCompressionRateOption(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ImageCompressionRateOption
    /// </summary>
    public ImageCompressionRateOption Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CImageCompressionRateOption(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CImageCompressionRateOption__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CImageCompressionRateOption(CImageCompressionRateOption feature) : this(neoapi_csharpPINVOKE.new_CImageCompressionRateOption__SWIG_1(CImageCompressionRateOption.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ImageCompressionRateOption
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CImageCompressionRateOption object</returns>
  public CImageCompressionRateOption Set(ImageCompressionRateOption value) {
    CImageCompressionRateOption ret = new CImageCompressionRateOption(neoapi_csharpPINVOKE.CImageCompressionRateOption_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ImageCompressionRateOption
  /// </summary>
  /// <returns>The value as ImageCompressionRateOption</returns>
  public ImageCompressionRateOption Get() {
    ImageCompressionRateOption ret = (ImageCompressionRateOption)neoapi_csharpPINVOKE.CImageCompressionRateOption_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for InterfaceSpeedMode
/// </summary>
public enum InterfaceSpeedMode {
  /// <summary>Interface speed mode is 100 Mbps.</summary>
  Ethernet100Mbps = 0,
  /// <summary>Operation at 10 Gbps. AVAILABLE: Always.</summary>
  Ethernet10Gbps,
  /// <summary>Interface speed mode is 1 Gbps.</summary>
  Ethernet1Gbps,
  /// <summary>Operation at 2.5 Gbps. AVAILABLE: Always.</summary>
  Ethernet2_5Gbps,
  /// <summary>Operation at 5 Gbps. AVAILABLE: Always.</summary>
  Ethernet5Gbps,
  /// <summary>USB Operation at 12 Mbps</summary>
  FullSpeed,
  /// <summary>USB Operation at 480 Mbps</summary>
  HighSpeed,
  /// <summary>USB Operation at 1.5 Mbps</summary>
  LowSpeed,
  /// <summary>USB Operation at 5 Gbps</summary>
  SuperSpeed
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature InterfaceSpeedMode
/// </summary>
public class CInterfaceSpeedMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CInterfaceSpeedMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CInterfaceSpeedMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CInterfaceSpeedMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CInterfaceSpeedMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CInterfaceSpeedMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of InterfaceSpeedMode
    /// </summary>
    public InterfaceSpeedMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CInterfaceSpeedMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CInterfaceSpeedMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CInterfaceSpeedMode(CInterfaceSpeedMode feature) : this(neoapi_csharpPINVOKE.new_CInterfaceSpeedMode__SWIG_1(CInterfaceSpeedMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of InterfaceSpeedMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CInterfaceSpeedMode object</returns>
  public CInterfaceSpeedMode Set(InterfaceSpeedMode value) {
    CInterfaceSpeedMode ret = new CInterfaceSpeedMode(neoapi_csharpPINVOKE.CInterfaceSpeedMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of InterfaceSpeedMode
  /// </summary>
  /// <returns>The value as InterfaceSpeedMode</returns>
  public InterfaceSpeedMode Get() {
    InterfaceSpeedMode ret = (InterfaceSpeedMode)neoapi_csharpPINVOKE.CInterfaceSpeedMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for LUTContent
/// </summary>
public enum LUTContent {
  /// <summary>The LUT Values are calculated in an automatically way related to the value of the feature Gamma.</summary>
  Gamma = 0,
  /// <summary>The LUT is defined and editable with the features LUTIndex and LUTValue.</summary>
  UserdefinedLUT
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature LUTContent
/// </summary>
public class CLUTContent : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CLUTContent(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CLUTContent_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLUTContent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CLUTContent() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CLUTContent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of LUTContent
    /// </summary>
    public LUTContent Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CLUTContent(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CLUTContent__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CLUTContent(CLUTContent feature) : this(neoapi_csharpPINVOKE.new_CLUTContent__SWIG_1(CLUTContent.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of LUTContent
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CLUTContent object</returns>
  public CLUTContent Set(LUTContent value) {
    CLUTContent ret = new CLUTContent(neoapi_csharpPINVOKE.CLUTContent_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of LUTContent
  /// </summary>
  /// <returns>The value as LUTContent</returns>
  public LUTContent Get() {
    LUTContent ret = (LUTContent)neoapi_csharpPINVOKE.CLUTContent_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for LUTSelector
/// </summary>
public enum LUTSelector {
  /// <summary>Selects the Blue LUT.</summary>
  Blue = 0,
  /// <summary>Selects the Green LUT.</summary>
  Green,
  /// <summary>Selects the Luminance LUT.</summary>
  Luminance,
  /// <summary>Selects the Red LUT.</summary>
  Red
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature LUTSelector
/// </summary>
public class CLUTSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CLUTSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CLUTSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLUTSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CLUTSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CLUTSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of LUTSelector
    /// </summary>
    public LUTSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CLUTSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CLUTSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CLUTSelector(CLUTSelector feature) : this(neoapi_csharpPINVOKE.new_CLUTSelector__SWIG_1(CLUTSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of LUTSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CLUTSelector object</returns>
  public CLUTSelector Set(LUTSelector value) {
    CLUTSelector ret = new CLUTSelector(neoapi_csharpPINVOKE.CLUTSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of LUTSelector
  /// </summary>
  /// <returns>The value as LUTSelector</returns>
  public LUTSelector Get() {
    LUTSelector ret = (LUTSelector)neoapi_csharpPINVOKE.CLUTSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for LineFormat
/// </summary>
public enum LineFormat {
  /// <summary>The Line is currently accepting or sending LVDS level signals.</summary>
  LVDS = 0,
  /// <summary>The Line is not connected.</summary>
  NoConnect,
  /// <summary>The Line is Open Drain (or Open Collector).</summary>
  OpenDrain,
  /// <summary>The Line is Open Source. AVAILABLE: (LineMode[LineSelector] = Output)</summary>
  OpenSource,
  /// <summary>The Line is opto-coupled.</summary>
  OptoCoupled,
  /// <summary>The Line is Push Pull. AVAILABLE: (LineMode[LineSelector] = Output)</summary>
  PushPull,
  /// <summary>The Line is currently accepting or sending RS422 level signals.</summary>
  RS422,
  /// <summary>The Line is currently accepting or sending TTL level signals.</summary>
  TTL,
  /// <summary>The Line is currently in Tri-State mode (Not driven).</summary>
  TriState
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature LineFormat
/// </summary>
public class CLineFormat : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CLineFormat(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CLineFormat_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLineFormat obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CLineFormat() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CLineFormat(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of LineFormat
    /// </summary>
    public LineFormat Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CLineFormat(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CLineFormat__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CLineFormat(CLineFormat feature) : this(neoapi_csharpPINVOKE.new_CLineFormat__SWIG_1(CLineFormat.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of LineFormat
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CLineFormat object</returns>
  public CLineFormat Set(LineFormat value) {
    CLineFormat ret = new CLineFormat(neoapi_csharpPINVOKE.CLineFormat_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of LineFormat
  /// </summary>
  /// <returns>The value as LineFormat</returns>
  public LineFormat Get() {
    LineFormat ret = (LineFormat)neoapi_csharpPINVOKE.CLineFormat_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for LineMode
/// </summary>
public enum LineMode {
  /// <summary>The selected physical line is used to Input an electrical signal.</summary>
  Input = 0,
  /// <summary>The selected physical line is used to Output an electrical signal.</summary>
  Output
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature LineMode
/// </summary>
public class CLineMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CLineMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CLineMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLineMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CLineMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CLineMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of LineMode
    /// </summary>
    public LineMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CLineMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CLineMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CLineMode(CLineMode feature) : this(neoapi_csharpPINVOKE.new_CLineMode__SWIG_1(CLineMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of LineMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CLineMode object</returns>
  public CLineMode Set(LineMode value) {
    CLineMode ret = new CLineMode(neoapi_csharpPINVOKE.CLineMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of LineMode
  /// </summary>
  /// <returns>The value as LineMode</returns>
  public LineMode Get() {
    LineMode ret = (LineMode)neoapi_csharpPINVOKE.CLineMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for LinePWMConfigurationMode
/// </summary>
public enum LinePWMConfigurationMode {
  /// <summary>Disables the line PWM configuration mode.</summary>
  Off = 0,
  /// <summary>Enables the line PWM configuration mode.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature LinePWMConfigurationMode
/// </summary>
public class CLinePWMConfigurationMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CLinePWMConfigurationMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CLinePWMConfigurationMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLinePWMConfigurationMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CLinePWMConfigurationMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CLinePWMConfigurationMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of LinePWMConfigurationMode
    /// </summary>
    public LinePWMConfigurationMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CLinePWMConfigurationMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CLinePWMConfigurationMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CLinePWMConfigurationMode(CLinePWMConfigurationMode feature) : this(neoapi_csharpPINVOKE.new_CLinePWMConfigurationMode__SWIG_1(CLinePWMConfigurationMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of LinePWMConfigurationMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CLinePWMConfigurationMode object</returns>
  public CLinePWMConfigurationMode Set(LinePWMConfigurationMode value) {
    CLinePWMConfigurationMode ret = new CLinePWMConfigurationMode(neoapi_csharpPINVOKE.CLinePWMConfigurationMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of LinePWMConfigurationMode
  /// </summary>
  /// <returns>The value as LinePWMConfigurationMode</returns>
  public LinePWMConfigurationMode Get() {
    LinePWMConfigurationMode ret = (LinePWMConfigurationMode)neoapi_csharpPINVOKE.CLinePWMConfigurationMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for LinePWMMode
/// </summary>
public enum LinePWMMode {
  /// <summary>The selected output line generate a fixed frequency of pulses starting with every transition from 0 to 1 and stopping with every transition from 1 to 0.</summary>
  FixedFrequency = 0,
  /// <summary>The PWM Mode is off. The selected output line acts as a normal output.</summary>
  Off,
  /// <summary>The selected output line generates one pulse with every transition from 0 to 1.</summary>
  OnePulse
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature LinePWMMode
/// </summary>
public class CLinePWMMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CLinePWMMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CLinePWMMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLinePWMMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CLinePWMMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CLinePWMMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of LinePWMMode
    /// </summary>
    public LinePWMMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CLinePWMMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CLinePWMMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CLinePWMMode(CLinePWMMode feature) : this(neoapi_csharpPINVOKE.new_CLinePWMMode__SWIG_1(CLinePWMMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of LinePWMMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CLinePWMMode object</returns>
  public CLinePWMMode Set(LinePWMMode value) {
    CLinePWMMode ret = new CLinePWMMode(neoapi_csharpPINVOKE.CLinePWMMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of LinePWMMode
  /// </summary>
  /// <returns>The value as LinePWMMode</returns>
  public LinePWMMode Get() {
    LinePWMMode ret = (LinePWMMode)neoapi_csharpPINVOKE.CLinePWMMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for LineSelector
/// </summary>
public enum LineSelector {
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.</summary>
  CC1 = 0,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.</summary>
  CC2,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.</summary>
  CC3,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink Product only.</summary>
  CC4,
  /// <summary>Index of the physical line and associated I/O control block to use.</summary>
  Line0,
  /// <summary>Index of the physical line and associated I/O control block to use.</summary>
  Line1,
  /// <summary>Index of the physical line and associated I/O control block to use.</summary>
  Line2,
  /// <summary>Index of the physical line and associated I/O control block to use. AVAILABLE: Always</summary>
  Line3,
  /// <summary>Index of the physical line and associated I/O control block to use. AVAILABLE: Always</summary>
  Line4,
  /// <summary>Index of the physical line and associated I/O control block to use. AVAILABLE: Always</summary>
  Line5,
  /// <summary>Index of the physical line and associated I/O control block to use. AVAILABLE: Always</summary>
  Line6,
  /// <summary>Index of the physical line and associated I/O control block to use. AVAILABLE: Always</summary>
  Line7,
  /// <summary>Index of the virtual line going on the Transport layer to use.</summary>
  LinkTrigger0,
  /// <summary>Index of the virtual line going on the Transport layer to use.</summary>
  LinkTrigger1,
  /// <summary>Index of the virtual line going on the Transport layer to use.</summary>
  LinkTrigger2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature LineSelector
/// </summary>
public class CLineSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CLineSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CLineSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLineSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CLineSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CLineSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of LineSelector
    /// </summary>
    public LineSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CLineSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CLineSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CLineSelector(CLineSelector feature) : this(neoapi_csharpPINVOKE.new_CLineSelector__SWIG_1(CLineSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of LineSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CLineSelector object</returns>
  public CLineSelector Set(LineSelector value) {
    CLineSelector ret = new CLineSelector(neoapi_csharpPINVOKE.CLineSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of LineSelector
  /// </summary>
  /// <returns>The value as LineSelector</returns>
  public LineSelector Get() {
    LineSelector ret = (LineSelector)neoapi_csharpPINVOKE.CLineSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for LineSource
/// </summary>
public enum LineSource {
  /// <summary>Device is currently doing an acquisition of one or many Frames.</summary>
  AcquisitionActive = 0,
  /// <summary>Device is currently waiting for a trigger for the capture of one or many Frames.</summary>
  AcquisitionTrigger,
  /// <summary>Device has missed an Acquisition start trigger.</summary>
  AcquisitionTriggerMissed,
  /// <summary>Device is currently waiting for a trigger for the capture of one or many Frames.</summary>
  AcquisitionTriggerWait,
  /// <summary>The chosen counter is in active state (counting).</summary>
  Counter0Active,
  /// <summary>The chosen counter is in active state (counting).</summary>
  Counter1Active,
  /// <summary>The chosen counter is in active state (counting).</summary>
  Counter2Active,
  /// <summary>The chosen Encoder Output state.</summary>
  Encoder0,
  /// <summary>The chosen Encoder Output state.</summary>
  Encoder1,
  /// <summary>The chosen Encoder Output state.</summary>
  Encoder2,
  /// <summary>Device is doing the exposure of a Frame (or Line).</summary>
  ExposureActive,
  /// <summary>Device is currently doing the capture of a Frame.</summary>
  FrameActive,
  /// <summary>Device is currently waiting for a Frame start trigger.</summary>
  FrameTrigger,
  /// <summary>Device has missed a Frame start trigger.</summary>
  FrameTriggerMissed,
  /// <summary>Device is currently waiting for a Frame start trigger.</summary>
  FrameTriggerWait,
  /// <summary>Device is currently waiting for signal of input line 0. AVAILABLE: Always</summary>
  Line0,
  /// <summary>Device is currently waiting for signal of input line 10. AVAILABLE: Always</summary>
  Line1,
  /// <summary>Device is currently doing the capture of a Line.</summary>
  LineActive,
  /// <summary>Device is currently waiting for a Line start trigger.</summary>
  LineTrigger,
  /// <summary>Device has missed a Line start trigger.</summary>
  LineTriggerMissed,
  /// <summary>Device is currently waiting for a Line start trigger.</summary>
  LineTriggerWait,
  /// <summary>The choosen Logic Block output state.</summary>
  LogicBlock0,
  /// <summary>The choosen Logic Block output state.</summary>
  LogicBlock1,
  /// <summary>The choosen Logic Block output state.</summary>
  LogicBlock2,
  /// <summary>Line output is disabled (Tri-State).</summary>
  Off,
  /// <summary>Device is doing the readout of a Frame. AVAILABLE: Always</summary>
  ReadoutActive,
  /// <summary>The chosen Sequencer Output is in active state.</summary>
  SequencerOutput0,
  /// <summary>The chosen Sequencer Output is in active state.</summary>
  SequencerOutput1,
  /// <summary>The chosen Sequencer Output is in active state.</summary>
  SequencerOutput2,
  /// <summary>The choosen Software Signal output state.</summary>
  SoftwareSignal0,
  /// <summary>The choosen Software Signal output state.</summary>
  SoftwareSignal1,
  /// <summary>The choosen Software Signal output state.</summary>
  SoftwareSignal2,
  /// <summary>Transfer on the stream is active.</summary>
  Stream0TransferActive,
  /// <summary>Transfer on the stream is in overflow.</summary>
  Stream0TransferOverflow,
  /// <summary>Transfer on the stream is paused.</summary>
  Stream0TransferPaused,
  /// <summary>Transfer on the stream is stopped.</summary>
  Stream0TransferStopped,
  /// <summary>Transfer on the stream is stopping.</summary>
  Stream0TransferStopping,
  /// <summary>Transfer on the stream is active.</summary>
  Stream1TransferActive,
  /// <summary>Transfer on the stream is in overflow.</summary>
  Stream1TransferOverflow,
  /// <summary>Transfer on the stream is paused.</summary>
  Stream1TransferPaused,
  /// <summary>Transfer on the stream is stopped.</summary>
  Stream1TransferStopped,
  /// <summary>Transfer on the stream is stopping.</summary>
  Stream1TransferStopping,
  /// <summary>The chosen Timer is in active state.</summary>
  Timer0Active,
  /// <summary>The chosen Timer is in active state.</summary>
  Timer1Active,
  /// <summary>The chosen Timer is in active state.</summary>
  Timer2Active,
  /// <summary>The chosen Timer is in active state. AVAILABLE: Always</summary>
  Timer3Active,
  /// <summary>Mark Overlapped.</summary>
  TriggerOverlapped,
  /// <summary>Device is ready for trigger. AVAILABLE: Always</summary>
  TriggerReady,
  /// <summary>Trigger Skipped.</summary>
  TriggerSkipped,
  /// <summary>The chosen User Output Bit state as defined by its current UserOutputValue.</summary>
  UserOutput0,
  /// <summary>The chosen User Output Bit state as defined by its current UserOutputValue.</summary>
  UserOutput1,
  /// <summary>The chosen User Output Bit state as defined by its current UserOutputValue.</summary>
  UserOutput2,
  /// <summary>The chosen User Output Bit state as defined by its current UserOutputValue. AVAILABLE: Always</summary>
  UserOutput3,
  /// <summary>The chosen User Output Bit state as defined by its current UserOutputValue. AVAILABLE: Always</summary>
  UserOutput4
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature LineSource
/// </summary>
public class CLineSource : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CLineSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CLineSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLineSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CLineSource() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CLineSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of LineSource
    /// </summary>
    public LineSource Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CLineSource(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CLineSource__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CLineSource(CLineSource feature) : this(neoapi_csharpPINVOKE.new_CLineSource__SWIG_1(CLineSource.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of LineSource
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CLineSource object</returns>
  public CLineSource Set(LineSource value) {
    CLineSource ret = new CLineSource(neoapi_csharpPINVOKE.CLineSource_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of LineSource
  /// </summary>
  /// <returns>The value as LineSource</returns>
  public LineSource Get() {
    LineSource ret = (LineSource)neoapi_csharpPINVOKE.CLineSource_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for MemoryActivePart
/// </summary>
public enum MemoryActivePart {
  /// <summary>Part 1 is the active memory part.</summary>
  Part_1 = 0,
  /// <summary>Part 2 is the active memory part.</summary>
  Part_2,
  /// <summary>Part 3 is the active memory part.</summary>
  Part_3,
  /// <summary>Part 4 is the active memory part.</summary>
  Part_4
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature MemoryActivePart
/// </summary>
public class CMemoryActivePart : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CMemoryActivePart(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CMemoryActivePart_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CMemoryActivePart obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CMemoryActivePart() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CMemoryActivePart(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of MemoryActivePart
    /// </summary>
    public MemoryActivePart Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CMemoryActivePart(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CMemoryActivePart__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CMemoryActivePart(CMemoryActivePart feature) : this(neoapi_csharpPINVOKE.new_CMemoryActivePart__SWIG_1(CMemoryActivePart.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of MemoryActivePart
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CMemoryActivePart object</returns>
  public CMemoryActivePart Set(MemoryActivePart value) {
    CMemoryActivePart ret = new CMemoryActivePart(neoapi_csharpPINVOKE.CMemoryActivePart_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of MemoryActivePart
  /// </summary>
  /// <returns>The value as MemoryActivePart</returns>
  public MemoryActivePart Get() {
    MemoryActivePart ret = (MemoryActivePart)neoapi_csharpPINVOKE.CMemoryActivePart_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for MemoryMode
/// </summary>
public enum MemoryMode {
  /// <summary>The memory is configured and in use.</summary>
  Active = 0,
  /// <summary>The selected memory part will be written and read simultaneously. The memory will be read when MemoryPartFilledBlocks are available.</summary>
  Burst,
  /// <summary>Configuration of internal memory to store images is active.</summary>
  Config,
  /// <summary>No images are stored in this mode.</summary>
  Off
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature MemoryMode
/// </summary>
public class CMemoryMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CMemoryMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CMemoryMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CMemoryMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CMemoryMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CMemoryMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of MemoryMode
    /// </summary>
    public MemoryMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CMemoryMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CMemoryMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CMemoryMode(CMemoryMode feature) : this(neoapi_csharpPINVOKE.new_CMemoryMode__SWIG_1(CMemoryMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of MemoryMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CMemoryMode object</returns>
  public CMemoryMode Set(MemoryMode value) {
    CMemoryMode ret = new CMemoryMode(neoapi_csharpPINVOKE.CMemoryMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of MemoryMode
  /// </summary>
  /// <returns>The value as MemoryMode</returns>
  public MemoryMode Get() {
    MemoryMode ret = (MemoryMode)neoapi_csharpPINVOKE.CMemoryMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for MemoryPartIncrementSource
/// </summary>
public enum MemoryPartIncrementSource {
  /// <summary>Selects line 1 as source to switch the active memory part.</summary>
  Line1 = 0,
  /// <summary>Selects the command MemoryPartIncrementSoftware as source to switch the active memory part.</summary>
  Software
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature MemoryPartIncrementSource
/// </summary>
public class CMemoryPartIncrementSource : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CMemoryPartIncrementSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CMemoryPartIncrementSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CMemoryPartIncrementSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CMemoryPartIncrementSource() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CMemoryPartIncrementSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of MemoryPartIncrementSource
    /// </summary>
    public MemoryPartIncrementSource Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CMemoryPartIncrementSource(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CMemoryPartIncrementSource__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CMemoryPartIncrementSource(CMemoryPartIncrementSource feature) : this(neoapi_csharpPINVOKE.new_CMemoryPartIncrementSource__SWIG_1(CMemoryPartIncrementSource.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of MemoryPartIncrementSource
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CMemoryPartIncrementSource object</returns>
  public CMemoryPartIncrementSource Set(MemoryPartIncrementSource value) {
    CMemoryPartIncrementSource ret = new CMemoryPartIncrementSource(neoapi_csharpPINVOKE.CMemoryPartIncrementSource_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of MemoryPartIncrementSource
  /// </summary>
  /// <returns>The value as MemoryPartIncrementSource</returns>
  public MemoryPartIncrementSource Get() {
    MemoryPartIncrementSource ret = (MemoryPartIncrementSource)neoapi_csharpPINVOKE.CMemoryPartIncrementSource_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for MemoryPartMode
/// </summary>
public enum MemoryPartMode {
  /// <summary>The selected memory part will be written cyclic. The oldest image will be overwritten as first.</summary>
  Cyclic = 0,
  /// <summary>The selected memory part will be written once without overrun. No images will be overwritten.</summary>
  Once
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature MemoryPartMode
/// </summary>
public class CMemoryPartMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CMemoryPartMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CMemoryPartMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CMemoryPartMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CMemoryPartMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CMemoryPartMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of MemoryPartMode
    /// </summary>
    public MemoryPartMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CMemoryPartMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CMemoryPartMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CMemoryPartMode(CMemoryPartMode feature) : this(neoapi_csharpPINVOKE.new_CMemoryPartMode__SWIG_1(CMemoryPartMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of MemoryPartMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CMemoryPartMode object</returns>
  public CMemoryPartMode Set(MemoryPartMode value) {
    CMemoryPartMode ret = new CMemoryPartMode(neoapi_csharpPINVOKE.CMemoryPartMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of MemoryPartMode
  /// </summary>
  /// <returns>The value as MemoryPartMode</returns>
  public MemoryPartMode Get() {
    MemoryPartMode ret = (MemoryPartMode)neoapi_csharpPINVOKE.CMemoryPartMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for MemoryPartSelector
/// </summary>
public enum MemoryPartSelector {
  /// <summary>Selects memory part 1.</summary>
  Part_1 = 0,
  /// <summary>Selects memory part 2.</summary>
  Part_2,
  /// <summary>Selects memory part 3.</summary>
  Part_3,
  /// <summary>Selects memory part 4.</summary>
  Part_4
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature MemoryPartSelector
/// </summary>
public class CMemoryPartSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CMemoryPartSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CMemoryPartSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CMemoryPartSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CMemoryPartSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CMemoryPartSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of MemoryPartSelector
    /// </summary>
    public MemoryPartSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CMemoryPartSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CMemoryPartSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CMemoryPartSelector(CMemoryPartSelector feature) : this(neoapi_csharpPINVOKE.new_CMemoryPartSelector__SWIG_1(CMemoryPartSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of MemoryPartSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CMemoryPartSelector object</returns>
  public CMemoryPartSelector Set(MemoryPartSelector value) {
    CMemoryPartSelector ret = new CMemoryPartSelector(neoapi_csharpPINVOKE.CMemoryPartSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of MemoryPartSelector
  /// </summary>
  /// <returns>The value as MemoryPartSelector</returns>
  public MemoryPartSelector Get() {
    MemoryPartSelector ret = (MemoryPartSelector)neoapi_csharpPINVOKE.CMemoryPartSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for OpticControllerSelector
/// </summary>
public enum OpticControllerSelector {
  /// <summary>Selects Optic Controller 0.</summary>
  OpticController0 = 0,
  /// <summary>Selects Optic Controller 1.</summary>
  OpticController1
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature OpticControllerSelector
/// </summary>
public class COpticControllerSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal COpticControllerSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.COpticControllerSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(COpticControllerSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~COpticControllerSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_COpticControllerSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of OpticControllerSelector
    /// </summary>
    public OpticControllerSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public COpticControllerSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_COpticControllerSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public COpticControllerSelector(COpticControllerSelector feature) : this(neoapi_csharpPINVOKE.new_COpticControllerSelector__SWIG_1(COpticControllerSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of OpticControllerSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The COpticControllerSelector object</returns>
  public COpticControllerSelector Set(OpticControllerSelector value) {
    COpticControllerSelector ret = new COpticControllerSelector(neoapi_csharpPINVOKE.COpticControllerSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of OpticControllerSelector
  /// </summary>
  /// <returns>The value as OpticControllerSelector</returns>
  public OpticControllerSelector Get() {
    OpticControllerSelector ret = (OpticControllerSelector)neoapi_csharpPINVOKE.COpticControllerSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for OpticControllerStatus
/// </summary>
public enum OpticControllerStatus {
  /// <summary>The optic controller executes a feature access/command.</summary>
  Busy = 0,
  /// <summary>The optic controller encountered an error.</summary>
  Error,
  /// <summary>The optic contoller is physically not connected.</summary>
  NotConnected,
  /// <summary>The optic controller is not initialized.</summary>
  NotInitialized,
  /// <summary>The optic controller is physically connected but not supported.</summary>
  NotSupported,
  /// <summary>The optic controller is ready to use.</summary>
  Ready
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature OpticControllerStatus
/// </summary>
public class COpticControllerStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal COpticControllerStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.COpticControllerStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(COpticControllerStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~COpticControllerStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_COpticControllerStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of OpticControllerStatus
    /// </summary>
    public OpticControllerStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public COpticControllerStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_COpticControllerStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public COpticControllerStatus(COpticControllerStatus feature) : this(neoapi_csharpPINVOKE.new_COpticControllerStatus__SWIG_1(COpticControllerStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of OpticControllerStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The COpticControllerStatus object</returns>
  public COpticControllerStatus Set(OpticControllerStatus value) {
    COpticControllerStatus ret = new COpticControllerStatus(neoapi_csharpPINVOKE.COpticControllerStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of OpticControllerStatus
  /// </summary>
  /// <returns>The value as OpticControllerStatus</returns>
  public OpticControllerStatus Get() {
    OpticControllerStatus ret = (OpticControllerStatus)neoapi_csharpPINVOKE.COpticControllerStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PartialScanEnabled
/// </summary>
public enum PartialScanEnabled {
  /// <summary>Off</summary>
  Off = 0,
  /// <summary>On</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PartialScanEnabled
/// </summary>
public class CPartialScanEnabled : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPartialScanEnabled(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPartialScanEnabled_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPartialScanEnabled obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPartialScanEnabled() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPartialScanEnabled(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PartialScanEnabled
    /// </summary>
    public PartialScanEnabled Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPartialScanEnabled(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPartialScanEnabled__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPartialScanEnabled(CPartialScanEnabled feature) : this(neoapi_csharpPINVOKE.new_CPartialScanEnabled__SWIG_1(CPartialScanEnabled.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PartialScanEnabled
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPartialScanEnabled object</returns>
  public CPartialScanEnabled Set(PartialScanEnabled value) {
    CPartialScanEnabled ret = new CPartialScanEnabled(neoapi_csharpPINVOKE.CPartialScanEnabled_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PartialScanEnabled
  /// </summary>
  /// <returns>The value as PartialScanEnabled</returns>
  public PartialScanEnabled Get() {
    PartialScanEnabled ret = (PartialScanEnabled)neoapi_csharpPINVOKE.CPartialScanEnabled_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PixelFormat
/// </summary>
public enum PixelFormat {
  /// <summary>Blue 10-bit</summary>
  B10 = 0,
  /// <summary>Blue 12-bit</summary>
  B12,
  /// <summary>Blue 16-bit</summary>
  B16,
  /// <summary>Blue 8-bit</summary>
  B8,
  /// <summary>Blue-Green-Red 10-bit unpacked</summary>
  BGR10,
  /// <summary>Blue-Green-Red 10-bit packed</summary>
  BGR10p,
  /// <summary>Blue-Green-Red 12-bit unpacked</summary>
  BGR12,
  /// <summary>Blue-Green-Red 12-bit packed</summary>
  BGR12p,
  /// <summary>Blue-Green-Red 14-bit unpacked</summary>
  BGR14,
  /// <summary>Blue-Green-Red 16-bit</summary>
  BGR16,
  /// <summary>Blue-Green-Red 5/6/5-bit packed</summary>
  BGR565p,
  /// <summary>Blue-Green-Red 8-bit</summary>
  BGR8,
  /// <summary>Blue-Green-Red-alpha 10-bit unpacked</summary>
  BGRa10,
  /// <summary>Blue-Green-Red-alpha 10-bit packed</summary>
  BGRa10p,
  /// <summary>Blue-Green-Red-alpha 12-bit unpacked</summary>
  BGRa12,
  /// <summary>Blue-Green-Red-alpha 12-bit packed</summary>
  BGRa12p,
  /// <summary>Blue-Green-Red-alpha 14-bit unpacked</summary>
  BGRa14,
  /// <summary>Blue-Green-Red-alpha 16-bit</summary>
  BGRa16,
  /// <summary>Blue-Green-Red-alpha 8-bit</summary>
  BGRa8,
  /// <summary>Bayer Blue-Green 10-bit unpacked</summary>
  BayerBG10,
  /// <summary>Bayer Blue-Green 10-bit packed</summary>
  BayerBG10p,
  /// <summary>Bayer Blue-Green 12-bit unpacked</summary>
  BayerBG12,
  /// <summary>Bayer Blue-Green 12-bit packed</summary>
  BayerBG12p,
  /// <summary>Bayer Blue-Green 14-bit</summary>
  BayerBG14,
  /// <summary>Bayer Blue-Green 14-bit packed</summary>
  BayerBG14p,
  /// <summary>Bayer Blue-Green 16-bit</summary>
  BayerBG16,
  /// <summary>Bayer Blue-Green 4-bit packed</summary>
  BayerBG4p,
  /// <summary>Bayer Blue-Green 8-bit</summary>
  BayerBG8,
  /// <summary>Bayer Green-Blue 10-bit unpacked</summary>
  BayerGB10,
  /// <summary>Bayer Green Blue 10 bit packed.</summary>
  BayerGB10Packed,
  /// <summary>Bayer Green-Blue 10-bit packed</summary>
  BayerGB10p,
  /// <summary>Bayer Green-Blue 12-bit unpacked</summary>
  BayerGB12,
  /// <summary>Bayer Green Blue 12 bit packed.</summary>
  BayerGB12Packed,
  /// <summary>Bayer Green-Blue 12-bit packed</summary>
  BayerGB12p,
  /// <summary>Bayer Green-Blue 14-bit</summary>
  BayerGB14,
  /// <summary>Bayer Green-Blue 14-bit packed</summary>
  BayerGB14p,
  /// <summary>Bayer Green-Blue 16-bit</summary>
  BayerGB16,
  /// <summary>Bayer Green-Blue 4-bit packed</summary>
  BayerGB4p,
  /// <summary>Bayer Green-Blue 8-bit</summary>
  BayerGB8,
  /// <summary>Bayer Green-Red 10-bit unpacked</summary>
  BayerGR10,
  /// <summary>Bayer Green-Red 10-bit packed</summary>
  BayerGR10p,
  /// <summary>Bayer Green-Red 12-bit unpacked</summary>
  BayerGR12,
  /// <summary>Bayer Green-Red 12-bit packed</summary>
  BayerGR12p,
  /// <summary>Bayer Green-Red 14-bit</summary>
  BayerGR14,
  /// <summary>Bayer Green-Red 14-bit packed</summary>
  BayerGR14p,
  /// <summary>Bayer Green-Red 16-bit</summary>
  BayerGR16,
  /// <summary>Bayer Green-Red 4-bit packed</summary>
  BayerGR4p,
  /// <summary>Bayer Green-Red 8-bit</summary>
  BayerGR8,
  /// <summary>Bayer Red-Green 10-bit unpacked</summary>
  BayerRG10,
  /// <summary>Bayer Red Green 10 bit packed.</summary>
  BayerRG10Packed,
  /// <summary>Bayer Red-Green 10-bit packed</summary>
  BayerRG10p,
  /// <summary>Bayer Red-Green 12-bit unpacked</summary>
  BayerRG12,
  /// <summary>Bayer Red Green 12 bit packed.</summary>
  BayerRG12Packed,
  /// <summary>Bayer Red-Green 12-bit packed</summary>
  BayerRG12p,
  /// <summary>Bayer Red-Green 14-bit</summary>
  BayerRG14,
  /// <summary>Bayer Red-Green 14-bit packed</summary>
  BayerRG14p,
  /// <summary>Bayer Red-Green 16-bit</summary>
  BayerRG16,
  /// <summary>Bayer Red-Green 4-bit packed</summary>
  BayerRG4p,
  /// <summary>Bayer Red-Green 8-bit</summary>
  BayerRG8,
  /// <summary>Bi-color Blue/Green - Red/Green 10-bit unpacked</summary>
  BiColorBGRG10,
  /// <summary>Bi-color Blue/Green - Red/Green 10-bit packed</summary>
  BiColorBGRG10p,
  /// <summary>Bi-color Blue/Green - Red/Green 12-bit unpacked</summary>
  BiColorBGRG12,
  /// <summary>Bi-color Blue/Green - Red/Green 12-bit packed</summary>
  BiColorBGRG12p,
  /// <summary>Bi-color Blue/Green - Red/Green 8-bit</summary>
  BiColorBGRG8,
  /// <summary>Bi-color Red/Green - Blue/Green 10-bit unpacked</summary>
  BiColorRGBG10,
  /// <summary>Bi-color Red/Green - Blue/Green 10-bit packed</summary>
  BiColorRGBG10p,
  /// <summary>Bi-color Red/Green - Blue/Green 12-bit unpacked</summary>
  BiColorRGBG12,
  /// <summary>Bi-color Red/Green - Blue/Green 12-bit packed</summary>
  BiColorRGBG12p,
  /// <summary>Bi-color Red/Green - Blue/Green 8-bit</summary>
  BiColorRGBG8,
  /// <summary>Confidence 1-bit unpacked</summary>
  Confidence1,
  /// <summary>Confidence 16-bit</summary>
  Confidence16,
  /// <summary>Confidence 1-bit packed</summary>
  Confidence1p,
  /// <summary>Confidence 32-bit floating point</summary>
  Confidence32f,
  /// <summary>Confidence 8-bit</summary>
  Confidence8,
  /// <summary>3D coordinate A 10-bit packed</summary>
  Coord3D_A10p,
  /// <summary>3D coordinate A 12-bit packed</summary>
  Coord3D_A12p,
  /// <summary>3D coordinate A 16-bit</summary>
  Coord3D_A16,
  /// <summary>3D coordinate A 32-bit floating point</summary>
  Coord3D_A32f,
  /// <summary>3D coordinate A 8-bit</summary>
  Coord3D_A8,
  /// <summary>3D coordinate A-B-C 10-bit packed</summary>
  Coord3D_ABC10p,
  /// <summary>3D coordinate A-B-C 10-bit packed planar</summary>
  Coord3D_ABC10p_Planar,
  /// <summary>3D coordinate A-B-C 12-bit packed</summary>
  Coord3D_ABC12p,
  /// <summary>3D coordinate A-B-C 12-bit packed planar</summary>
  Coord3D_ABC12p_Planar,
  /// <summary>3D coordinate A-B-C 16-bit</summary>
  Coord3D_ABC16,
  /// <summary>3D coordinate A-B-C 16-bit planar</summary>
  Coord3D_ABC16_Planar,
  /// <summary>3D coordinate A-B-C 32-bit floating point</summary>
  Coord3D_ABC32f,
  /// <summary>3D coordinate A-B-C 32-bit floating point planar</summary>
  Coord3D_ABC32f_Planar,
  /// <summary>3D coordinate A-B-C 8-bit</summary>
  Coord3D_ABC8,
  /// <summary>3D coordinate A-B-C 8-bit planar</summary>
  Coord3D_ABC8_Planar,
  /// <summary>3D coordinate A-C 10-bit packed</summary>
  Coord3D_AC10p,
  /// <summary>3D coordinate A-C 10-bit packed planar</summary>
  Coord3D_AC10p_Planar,
  /// <summary>3D coordinate A-C 12-bit packed</summary>
  Coord3D_AC12p,
  /// <summary>3D coordinate A-C 12-bit packed planar</summary>
  Coord3D_AC12p_Planar,
  /// <summary>3D coordinate A-C 16-bit</summary>
  Coord3D_AC16,
  /// <summary>3D coordinate A-C 16-bit planar</summary>
  Coord3D_AC16_Planar,
  /// <summary>3D coordinate A-C 32-bit floating point</summary>
  Coord3D_AC32f,
  /// <summary>3D coordinate A-C 32-bit floating point planar</summary>
  Coord3D_AC32f_Planar,
  /// <summary>3D coordinate A-C 8-bit</summary>
  Coord3D_AC8,
  /// <summary>3D coordinate A-C 8-bit planar</summary>
  Coord3D_AC8_Planar,
  /// <summary>3D coordinate B 10-bit packed</summary>
  Coord3D_B10p,
  /// <summary>3D coordinate B 12-bit packed</summary>
  Coord3D_B12p,
  /// <summary>3D coordinate B 16-bit</summary>
  Coord3D_B16,
  /// <summary>3D coordinate B 32-bit floating point</summary>
  Coord3D_B32f,
  /// <summary>3D coordinate B 8-bit</summary>
  Coord3D_B8,
  /// <summary>3D coordinate C 10-bit packed</summary>
  Coord3D_C10p,
  /// <summary>3D coordinate C 12-bit packed</summary>
  Coord3D_C12p,
  /// <summary>3D coordinate C 16-bit</summary>
  Coord3D_C16,
  /// <summary>3D coordinate C 32-bit floating point</summary>
  Coord3D_C32f,
  /// <summary>3D coordinate C 8-bit</summary>
  Coord3D_C8,
  /// <summary>Data 16-bit</summary>
  Data16,
  /// <summary>Data 16-bit signed</summary>
  Data16s,
  /// <summary>Data 32-bit</summary>
  Data32,
  /// <summary>Data 32-bit floating point</summary>
  Data32f,
  /// <summary>Data 32-bit signed</summary>
  Data32s,
  /// <summary>Data 64-bit</summary>
  Data64,
  /// <summary>Data 64-bit floating point</summary>
  Data64f,
  /// <summary>Data 64-bit signed</summary>
  Data64s,
  /// <summary>Data 8-bit</summary>
  Data8,
  /// <summary>Data 8-bit signed</summary>
  Data8s,
  /// <summary>Bayer Blue-Green 10-bit unpacked</summary>
  G10,
  /// <summary>Bayer Blue-Green 12-bit unpacked</summary>
  G12,
  /// <summary>Bayer Blue-Green 16-bit</summary>
  G16,
  /// <summary>Bayer Blue-Green 8-bit</summary>
  G8,
  /// <summary>Monochrome 10-bit unpacked</summary>
  Mono10,
  /// <summary>Mono 10 bit packed. AVAILABLE: Always.</summary>
  Mono10Packed,
  /// <summary>Monochrome 10-bit packed</summary>
  Mono10p,
  /// <summary>Monochrome 12-bit unpacked</summary>
  Mono12,
  /// <summary>Mono 12 bit packed. AVAILABLE: Always.</summary>
  Mono12Packed,
  /// <summary>Monochrome 12-bit packed</summary>
  Mono12p,
  /// <summary>Monochrome 14-bit unpacked</summary>
  Mono14,
  /// <summary>Monochrome 14-bit packed</summary>
  Mono14p,
  /// <summary>Monochrome 16-bit</summary>
  Mono16,
  /// <summary>Monochrome 1-bit packed</summary>
  Mono1p,
  /// <summary>Monochrome 2-bit packed</summary>
  Mono2p,
  /// <summary>Monochrome 32-bit</summary>
  Mono32,
  /// <summary>Monochrome 4-bit packed</summary>
  Mono4p,
  /// <summary>Monochrome 8-bit</summary>
  Mono8,
  /// <summary>Monochrome 8-bit signed</summary>
  Mono8s,
  /// <summary>Blue-Green-Red 10-bit unpacked</summary>
  R10,
  /// <summary>Blue-Green-Red 12-bit unpacked</summary>
  R12,
  /// <summary>Blue-Green-Red 16-bit</summary>
  R16,
  /// <summary>Blue-Green-Red 8-bit</summary>
  R8,
  /// <summary>Red-Green-Blue 10-bit unpacked</summary>
  RGB10,
  /// <summary>Red-Green-Blue 10-bit unpacked planar</summary>
  RGB10_Planar,
  /// <summary>Red-Green-Blue 10-bit packed</summary>
  RGB10p,
  /// <summary>Red-Green-Blue 10-bit packed into 32-bit</summary>
  RGB10p32,
  /// <summary>Red-Green-Blue 12-bit unpacked</summary>
  RGB12,
  /// <summary>Red-Green-Blue 12-bit unpacked planar</summary>
  RGB12_Planar,
  /// <summary>Red-Green-Blue 12-bit packed</summary>
  RGB12p,
  /// <summary>Red-Green-Blue 14-bit unpacked</summary>
  RGB14,
  /// <summary>Red-Green-Blue 16-bit</summary>
  RGB16,
  /// <summary>Red-Green-Blue 16-bit planar</summary>
  RGB16_Planar,
  /// <summary>Red-Green-Blue 5/6/5-bit packed</summary>
  RGB565p,
  /// <summary>Red-Green-Blue 8-bit</summary>
  RGB8,
  /// <summary>Red-Green-Blue 8-bit planar</summary>
  RGB8_Planar,
  /// <summary>Red-Green-Blue-alpha 10-bit unpacked</summary>
  RGBa10,
  /// <summary>Red-Green-Blue-alpha 10-bit packed</summary>
  RGBa10p,
  /// <summary>Red-Green-Blue-alpha 12-bit unpacked</summary>
  RGBa12,
  /// <summary>Red-Green-Blue-alpha 12-bit packed</summary>
  RGBa12p,
  /// <summary>Red-Green-Blue-alpha 14-bit unpacked</summary>
  RGBa14,
  /// <summary>Red-Green-Blue-alpha 16-bit</summary>
  RGBa16,
  /// <summary>Red-Green-Blue-alpha 8-bit</summary>
  RGBa8,
  /// <summary>Sparse Color Filter #1 White-Blue-White-Green 10-bit unpacked</summary>
  SCF1WBWG10,
  /// <summary>Sparse Color Filter #1 White-Blue-White-Green 10-bit packed</summary>
  SCF1WBWG10p,
  /// <summary>Sparse Color Filter #1 White-Blue-White-Green 12-bit unpacked</summary>
  SCF1WBWG12,
  /// <summary>Sparse Color Filter #1 White-Blue-White-Green 12-bit packed</summary>
  SCF1WBWG12p,
  /// <summary>Sparse Color Filter #1 White-Blue-White-Green 14-bit unpacked</summary>
  SCF1WBWG14,
  /// <summary>Sparse Color Filter #1 White-Blue-White-Green 16-bit unpacked</summary>
  SCF1WBWG16,
  /// <summary>Sparse Color Filter #1 White-Blue-White-Green 8-bit</summary>
  SCF1WBWG8,
  /// <summary>Sparse Color Filter #1 White-Green-White-Blue 10-bit unpacked</summary>
  SCF1WGWB10,
  /// <summary>Sparse Color Filter #1 White-Green-White-Blue 10-bit packed</summary>
  SCF1WGWB10p,
  /// <summary>Sparse Color Filter #1 White-Green-White-Blue 12-bit unpacked</summary>
  SCF1WGWB12,
  /// <summary>Sparse Color Filter #1 White-Green-White-Blue 12-bit packed</summary>
  SCF1WGWB12p,
  /// <summary>Sparse Color Filter #1 White-Green-White-Blue 14-bit unpacked</summary>
  SCF1WGWB14,
  /// <summary>Sparse Color Filter #1 White-Green-White-Blue 16-bit</summary>
  SCF1WGWB16,
  /// <summary>Sparse Color Filter #1 White-Green-White-Blue 8-bit</summary>
  SCF1WGWB8,
  /// <summary>Sparse Color Filter #1 White-Green-White-Red 10-bit unpacked</summary>
  SCF1WGWR10,
  /// <summary>Sparse Color Filter #1 White-Green-White-Red 10-bit packed</summary>
  SCF1WGWR10p,
  /// <summary>Sparse Color Filter #1 White-Green-White-Red 12-bit unpacked</summary>
  SCF1WGWR12,
  /// <summary>Sparse Color Filter #1 White-Green-White-Red 12-bit packed</summary>
  SCF1WGWR12p,
  /// <summary>Sparse Color Filter #1 White-Green-White-Red 14-bit unpacked</summary>
  SCF1WGWR14,
  /// <summary>Sparse Color Filter #1 White-Green-White-Red 16-bit</summary>
  SCF1WGWR16,
  /// <summary>Sparse Color Filter #1 White-Green-White-Red 8-bit</summary>
  SCF1WGWR8,
  /// <summary>Sparse Color Filter #1 White-Red-White-Green 10-bit unpacked</summary>
  SCF1WRWG10,
  /// <summary>Sparse Color Filter #1 White-Red-White-Green 10-bit packed</summary>
  SCF1WRWG10p,
  /// <summary>Sparse Color Filter #1 White-Red-White-Green 12-bit unpacked</summary>
  SCF1WRWG12,
  /// <summary>Sparse Color Filter #1 White-Red-White-Green 12-bit packed</summary>
  SCF1WRWG12p,
  /// <summary>Sparse Color Filter #1 White-Red-White-Green 14-bit unpacked</summary>
  SCF1WRWG14,
  /// <summary>Sparse Color Filter #1 White-Red-White-Green 16-bit</summary>
  SCF1WRWG16,
  /// <summary>Sparse Color Filter #1 White-Red-White-Green 8-bit</summary>
  SCF1WRWG8,
  /// <summary>YCbCr 4:4:4 10-bit unpacked</summary>
  YCbCr10_CbYCr,
  /// <summary>YCbCr 4:4:4 10-bit packed</summary>
  YCbCr10p_CbYCr,
  /// <summary>YCbCr 4:4:4 12-bit unpacked</summary>
  YCbCr12_CbYCr,
  /// <summary>YCbCr 4:4:4 12-bit packed</summary>
  YCbCr12p_CbYCr,
  /// <summary>YCbCr 4:4:4 10-bit unpacked BT.2020</summary>
  YCbCr2020_10_CbYCr,
  /// <summary>YCbCr 4:4:4 10-bit packed BT.2020</summary>
  YCbCr2020_10p_CbYCr,
  /// <summary>YCbCr 4:4:4 12-bit unpacked BT.2020</summary>
  YCbCr2020_12_CbYCr,
  /// <summary>YCbCr 4:4:4 12-bit packed BT.2020</summary>
  YCbCr2020_12p_CbYCr,
  /// <summary>YCbCr 4:1:1 8-bit BT.2020</summary>
  YCbCr2020_411_8_CbYYCrYY,
  /// <summary>YCbCr 4:2:2 10-bit unpacked BT.2020</summary>
  YCbCr2020_422_10,
  /// <summary>YCbCr 4:2:2 10-bit unpacked BT.2020</summary>
  YCbCr2020_422_10_CbYCrY,
  /// <summary>YCbCr 4:2:2 10-bit packed BT.2020</summary>
  YCbCr2020_422_10p,
  /// <summary>YCbCr 4:2:2 10-bit packed BT.2020</summary>
  YCbCr2020_422_10p_CbYCrY,
  /// <summary>YCbCr 4:2:2 12-bit unpacked BT.2020</summary>
  YCbCr2020_422_12,
  /// <summary>YCbCr 4:2:2 12-bit unpacked BT.2020</summary>
  YCbCr2020_422_12_CbYCrY,
  /// <summary>YCbCr 4:2:2 12-bit packed BT.2020</summary>
  YCbCr2020_422_12p,
  /// <summary>YCbCr 4:2:2 12-bit packed BT.2020</summary>
  YCbCr2020_422_12p_CbYCrY,
  /// <summary>YCbCr 4:2:2 8-bit BT.2020</summary>
  YCbCr2020_422_8,
  /// <summary>YCbCr 4:2:2 8-bit BT.2020</summary>
  YCbCr2020_422_8_CbYCrY,
  /// <summary>YCbCr 4:4:4 8-bit BT.2020</summary>
  YCbCr2020_8_CbYCr,
  /// <summary>YCbCr 4:1:1 8-bit</summary>
  YCbCr411_8,
  /// <summary>YCbCr 4:1:1 8-bit</summary>
  YCbCr411_8_CbYYCrYY,
  /// <summary>YCbCr 4:2:0 8-bit YY/CbCr Semiplanar</summary>
  YCbCr420_8_YY_CbCr_Semiplanar,
  /// <summary>YCbCr 4:2:0 8-bit YY/CrCb Semiplanar</summary>
  YCbCr420_8_YY_CrCb_Semiplanar,
  /// <summary>YCbCr 4:2:2 10-bit unpacked</summary>
  YCbCr422_10,
  /// <summary>YCbCr 4:2:2 10-bit unpacked</summary>
  YCbCr422_10_CbYCrY,
  /// <summary>YCbCr 4:2:2 10-bit packed</summary>
  YCbCr422_10p,
  /// <summary>YCbCr 4:2:2 10-bit packed</summary>
  YCbCr422_10p_CbYCrY,
  /// <summary>YCbCr 4:2:2 12-bit unpacked</summary>
  YCbCr422_12,
  /// <summary>YCbCr 4:2:2 12-bit unpacked</summary>
  YCbCr422_12_CbYCrY,
  /// <summary>YCbCr 4:2:2 12-bit packed</summary>
  YCbCr422_12p,
  /// <summary>YCbCr 4:2:2 12-bit packed</summary>
  YCbCr422_12p_CbYCrY,
  /// <summary>YCbCr 4:2:2 8-bit</summary>
  YCbCr422_8,
  /// <summary>YCbCr 4:2:2 8-bit</summary>
  YCbCr422_8_CbYCrY,
  /// <summary>YCbCr 4:2:2 8-bit YY/CbCr Semiplanar</summary>
  YCbCr422_8_YY_CbCr_Semiplanar,
  /// <summary>YCbCr 4:2:2 8-bit YY/CrCb Semiplanar</summary>
  YCbCr422_8_YY_CrCb_Semiplanar,
  /// <summary>YCbCr 4:4:4 10-bit unpacked BT.601</summary>
  YCbCr601_10_CbYCr,
  /// <summary>YCbCr 4:4:4 10-bit packed BT.601</summary>
  YCbCr601_10p_CbYCr,
  /// <summary>YCbCr 4:4:4 12-bit unpacked BT.601</summary>
  YCbCr601_12_CbYCr,
  /// <summary>YCbCr 4:4:4 12-bit packed BT.601</summary>
  YCbCr601_12p_CbYCr,
  /// <summary>YCbCr 4:1:1 8-bit BT.601</summary>
  YCbCr601_411_8_CbYYCrYY,
  /// <summary>YCbCr 4:2:2 10-bit unpacked BT.601</summary>
  YCbCr601_422_10,
  /// <summary>YCbCr 4:2:2 10-bit unpacked BT.601</summary>
  YCbCr601_422_10_CbYCrY,
  /// <summary>YCbCr 4:2:2 10-bit packed BT.601</summary>
  YCbCr601_422_10p,
  /// <summary>YCbCr 4:2:2 10-bit packed BT.601</summary>
  YCbCr601_422_10p_CbYCrY,
  /// <summary>YCbCr 4:2:2 12-bit unpacked BT.601</summary>
  YCbCr601_422_12,
  /// <summary>YCbCr 4:2:2 12-bit unpacked BT.601</summary>
  YCbCr601_422_12_CbYCrY,
  /// <summary>YCbCr 4:2:2 12-bit packed BT.601</summary>
  YCbCr601_422_12p,
  /// <summary>YCbCr 4:2:2 12-bit packed BT.601</summary>
  YCbCr601_422_12p_CbYCrY,
  /// <summary>YCbCr 4:2:2 8-bit BT.601</summary>
  YCbCr601_422_8,
  /// <summary>YCbCr 4:2:2 8-bit BT.601</summary>
  YCbCr601_422_8_CbYCrY,
  /// <summary>YCbCr 4:4:4 8-bit BT.601</summary>
  YCbCr601_8_CbYCr,
  /// <summary>YCbCr 4:4:4 10-bit unpacked BT.709</summary>
  YCbCr709_10_CbYCr,
  /// <summary>YCbCr 4:4:4 10-bit packed BT.709</summary>
  YCbCr709_10p_CbYCr,
  /// <summary>YCbCr 4:4:4 12-bit unpacked BT.709</summary>
  YCbCr709_12_CbYCr,
  /// <summary>YCbCr 4:4:4 12-bit packed BT.709</summary>
  YCbCr709_12p_CbYCr,
  /// <summary>YCbCr 4:1:1 8-bit BT.709</summary>
  YCbCr709_411_8_CbYYCrYY,
  /// <summary>YCbCr 4:2:2 10-bit unpacked BT.709</summary>
  YCbCr709_422_10,
  /// <summary>YCbCr 4:2:2 10-bit unpacked BT.709</summary>
  YCbCr709_422_10_CbYCrY,
  /// <summary>YCbCr 4:2:2 10-bit packed BT.709</summary>
  YCbCr709_422_10p,
  /// <summary>YCbCr 4:2:2 10-bit packed BT.709</summary>
  YCbCr709_422_10p_CbYCrY,
  /// <summary>YCbCr 4:2:2 12-bit unpacked BT.709</summary>
  YCbCr709_422_12,
  /// <summary>YCbCr 4:2:2 12-bit unpacked BT.709</summary>
  YCbCr709_422_12_CbYCrY,
  /// <summary>YCbCr 4:2:2 12-bit packed BT.709</summary>
  YCbCr709_422_12p,
  /// <summary>YCbCr 4:2:2 12-bit packed BT.709</summary>
  YCbCr709_422_12p_CbYCrY,
  /// <summary>YCbCr 4:2:2 8-bit BT.709</summary>
  YCbCr709_422_8,
  /// <summary>YCbCr 4:2:2 8-bit BT.709</summary>
  YCbCr709_422_8_CbYCrY,
  /// <summary>YCbCr 4:4:4 8-bit BT.709</summary>
  YCbCr709_8_CbYCr,
  /// <summary>YCbCr 4:4:4 8-bit</summary>
  YCbCr8,
  /// <summary>YCbCr 4:4:4 8-bit</summary>
  YCbCr8_CbYCr,
  /// <summary>YUV 411 8 bit packed.</summary>
  YUV411Packed,
  /// <summary>YUV 411 8 bit. AVAILABLE: Always.</summary>
  YUV411_8,
  /// <summary>YUV 4:1:1 8-bit</summary>
  YUV411_8_UYYVYY,
  /// <summary>YUV 422 8 bit packed.</summary>
  YUV422Packed,
  /// <summary>YUV 4:2:2 8-bit</summary>
  YUV422_8,
  /// <summary>YUV 4:2:2 8-bit</summary>
  YUV422_8_UYVY,
  /// <summary>YUV 444 8 bit packed.</summary>
  YUV444Packed,
  /// <summary>YUV 8 bit. AVAILABLE: Always.</summary>
  YUV8,
  /// <summary>YUV 4:4:4 8-bit</summary>
  YUV8_UYV
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PixelFormat
/// </summary>
public class CPixelFormat : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPixelFormat(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPixelFormat_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPixelFormat obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPixelFormat() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPixelFormat(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PixelFormat
    /// </summary>
    public PixelFormat Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPixelFormat(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPixelFormat__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPixelFormat(CPixelFormat feature) : this(neoapi_csharpPINVOKE.new_CPixelFormat__SWIG_1(CPixelFormat.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PixelFormat
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPixelFormat object</returns>
  public CPixelFormat Set(PixelFormat value) {
    CPixelFormat ret = new CPixelFormat(neoapi_csharpPINVOKE.CPixelFormat_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PixelFormat
  /// </summary>
  /// <returns>The value as PixelFormat</returns>
  public PixelFormat Get() {
    PixelFormat ret = (PixelFormat)neoapi_csharpPINVOKE.CPixelFormat_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PtpClockAccuracy
/// </summary>
public enum PtpClockAccuracy {
  /// <summary>Alternate PTP Profile</summary>
  AlternatePTPProfile = 0,
  /// <summary>Greater Than 10s</summary>
  GreaterThan10s,
  /// <summary>Reserved</summary>
  Reserved,
  /// <summary>Unknown</summary>
  Unknown,
  /// <summary>Within 100ms</summary>
  Within100ms,
  /// <summary>Within 100ns</summary>
  Within100ns,
  /// <summary>Within 100us</summary>
  Within100us,
  /// <summary>Within 10ms</summary>
  Within10ms,
  /// <summary>Within 10s</summary>
  Within10s,
  /// <summary>Within 10us</summary>
  Within10us,
  /// <summary>Within 1ms</summary>
  Within1ms,
  /// <summary>Within 1s</summary>
  Within1s,
  /// <summary>Within 1us</summary>
  Within1us,
  /// <summary>Within 250ms</summary>
  Within250ms,
  /// <summary>Within 250ns</summary>
  Within250ns,
  /// <summary>Within 250us</summary>
  Within250us,
  /// <summary>Within 25ms</summary>
  Within25ms,
  /// <summary>Within 25ns</summary>
  Within25ns,
  /// <summary>Within 25us</summary>
  Within25us,
  /// <summary>Within 2p 5ms</summary>
  Within2p5ms,
  /// <summary>Within 2p5us</summary>
  Within2p5us
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PtpClockAccuracy
/// </summary>
public class CPtpClockAccuracy : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPtpClockAccuracy(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPtpClockAccuracy_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPtpClockAccuracy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPtpClockAccuracy() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPtpClockAccuracy(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PtpClockAccuracy
    /// </summary>
    public PtpClockAccuracy Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPtpClockAccuracy(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPtpClockAccuracy__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPtpClockAccuracy(CPtpClockAccuracy feature) : this(neoapi_csharpPINVOKE.new_CPtpClockAccuracy__SWIG_1(CPtpClockAccuracy.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PtpClockAccuracy
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPtpClockAccuracy object</returns>
  public CPtpClockAccuracy Set(PtpClockAccuracy value) {
    CPtpClockAccuracy ret = new CPtpClockAccuracy(neoapi_csharpPINVOKE.CPtpClockAccuracy_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PtpClockAccuracy
  /// </summary>
  /// <returns>The value as PtpClockAccuracy</returns>
  public PtpClockAccuracy Get() {
    PtpClockAccuracy ret = (PtpClockAccuracy)neoapi_csharpPINVOKE.CPtpClockAccuracy_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PtpClockOffsetMode
/// </summary>
public enum PtpClockOffsetMode {
  /// <summary>Timestamp Offset will be added to cameras internal timestamp.</summary>
  Add = 0,
  /// <summary>Timestamp Offset will be subtracted from cameras internal timestamp.</summary>
  Sub
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PtpClockOffsetMode
/// </summary>
public class CPtpClockOffsetMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPtpClockOffsetMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPtpClockOffsetMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPtpClockOffsetMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPtpClockOffsetMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPtpClockOffsetMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PtpClockOffsetMode
    /// </summary>
    public PtpClockOffsetMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPtpClockOffsetMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPtpClockOffsetMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPtpClockOffsetMode(CPtpClockOffsetMode feature) : this(neoapi_csharpPINVOKE.new_CPtpClockOffsetMode__SWIG_1(CPtpClockOffsetMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PtpClockOffsetMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPtpClockOffsetMode object</returns>
  public CPtpClockOffsetMode Set(PtpClockOffsetMode value) {
    CPtpClockOffsetMode ret = new CPtpClockOffsetMode(neoapi_csharpPINVOKE.CPtpClockOffsetMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PtpClockOffsetMode
  /// </summary>
  /// <returns>The value as PtpClockOffsetMode</returns>
  public PtpClockOffsetMode Get() {
    PtpClockOffsetMode ret = (PtpClockOffsetMode)neoapi_csharpPINVOKE.CPtpClockOffsetMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PtpDriftOffsetMode
/// </summary>
public enum PtpDriftOffsetMode {
  /// <summary>Drift Offset will be added to cameras internal timestamp increment.</summary>
  Add = 0,
  /// <summary>Drift Offset will be subtracted from cameras internal timestamp increment.</summary>
  Sub
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PtpDriftOffsetMode
/// </summary>
public class CPtpDriftOffsetMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPtpDriftOffsetMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPtpDriftOffsetMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPtpDriftOffsetMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPtpDriftOffsetMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPtpDriftOffsetMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PtpDriftOffsetMode
    /// </summary>
    public PtpDriftOffsetMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPtpDriftOffsetMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPtpDriftOffsetMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPtpDriftOffsetMode(CPtpDriftOffsetMode feature) : this(neoapi_csharpPINVOKE.new_CPtpDriftOffsetMode__SWIG_1(CPtpDriftOffsetMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PtpDriftOffsetMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPtpDriftOffsetMode object</returns>
  public CPtpDriftOffsetMode Set(PtpDriftOffsetMode value) {
    CPtpDriftOffsetMode ret = new CPtpDriftOffsetMode(neoapi_csharpPINVOKE.CPtpDriftOffsetMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PtpDriftOffsetMode
  /// </summary>
  /// <returns>The value as PtpDriftOffsetMode</returns>
  public PtpDriftOffsetMode Get() {
    PtpDriftOffsetMode ret = (PtpDriftOffsetMode)neoapi_csharpPINVOKE.CPtpDriftOffsetMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PtpMode
/// </summary>
public enum PtpMode {
  /// <summary>The device uses the IEEE 1588 best master clock algorithm to determine which device is master, and which devices are slaves.</summary>
  Auto = 0,
  /// <summary>The clock of the device will act as a PTP slave only to align with a master device clock.</summary>
  Slave
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PtpMode
/// </summary>
public class CPtpMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPtpMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPtpMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPtpMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPtpMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPtpMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PtpMode
    /// </summary>
    public PtpMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPtpMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPtpMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPtpMode(CPtpMode feature) : this(neoapi_csharpPINVOKE.new_CPtpMode__SWIG_1(CPtpMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PtpMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPtpMode object</returns>
  public CPtpMode Set(PtpMode value) {
    CPtpMode ret = new CPtpMode(neoapi_csharpPINVOKE.CPtpMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PtpMode
  /// </summary>
  /// <returns>The value as PtpMode</returns>
  public PtpMode Get() {
    PtpMode ret = (PtpMode)neoapi_csharpPINVOKE.CPtpMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PtpServoStatus
/// </summary>
public enum PtpServoStatus {
  /// <summary>Device - Specific</summary>
  DeviceSpecific = 0,
  /// <summary>Locked</summary>
  Locked,
  /// <summary>Unknown</summary>
  Unknown
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PtpServoStatus
/// </summary>
public class CPtpServoStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPtpServoStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPtpServoStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPtpServoStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPtpServoStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPtpServoStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PtpServoStatus
    /// </summary>
    public PtpServoStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPtpServoStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPtpServoStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPtpServoStatus(CPtpServoStatus feature) : this(neoapi_csharpPINVOKE.new_CPtpServoStatus__SWIG_1(CPtpServoStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PtpServoStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPtpServoStatus object</returns>
  public CPtpServoStatus Set(PtpServoStatus value) {
    CPtpServoStatus ret = new CPtpServoStatus(neoapi_csharpPINVOKE.CPtpServoStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PtpServoStatus
  /// </summary>
  /// <returns>The value as PtpServoStatus</returns>
  public PtpServoStatus Get() {
    PtpServoStatus ret = (PtpServoStatus)neoapi_csharpPINVOKE.CPtpServoStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PtpStatus
/// </summary>
public enum PtpStatus {
  /// <summary>Disabled</summary>
  Disabled = 0,
  /// <summary>Faulty</summary>
  Faulty,
  /// <summary>Initializing</summary>
  Initializing,
  /// <summary>Listening</summary>
  Listening,
  /// <summary>Master</summary>
  Master,
  /// <summary>Passive</summary>
  Passive,
  /// <summary>Pre Master</summary>
  PreMaster,
  /// <summary>Slave</summary>
  Slave,
  /// <summary>Uncalibrated</summary>
  Uncalibrated
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PtpStatus
/// </summary>
public class CPtpStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPtpStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPtpStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPtpStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPtpStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPtpStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PtpStatus
    /// </summary>
    public PtpStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPtpStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPtpStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPtpStatus(CPtpStatus feature) : this(neoapi_csharpPINVOKE.new_CPtpStatus__SWIG_1(CPtpStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PtpStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPtpStatus object</returns>
  public CPtpStatus Set(PtpStatus value) {
    CPtpStatus ret = new CPtpStatus(neoapi_csharpPINVOKE.CPtpStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PtpStatus
  /// </summary>
  /// <returns>The value as PtpStatus</returns>
  public PtpStatus Get() {
    PtpStatus ret = (PtpStatus)neoapi_csharpPINVOKE.CPtpStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PtpSyncMessageIntervalStatus
/// </summary>
public enum PtpSyncMessageIntervalStatus {
  /// <summary>Sync message interval is not valid. This may result in PtpServoStatus instability.</summary>
  Invalid = 0,
  /// <summary>Sync message interval is valid and supported by the device.</summary>
  Valid
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PtpSyncMessageIntervalStatus
/// </summary>
public class CPtpSyncMessageIntervalStatus : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPtpSyncMessageIntervalStatus(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPtpSyncMessageIntervalStatus_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPtpSyncMessageIntervalStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPtpSyncMessageIntervalStatus() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPtpSyncMessageIntervalStatus(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PtpSyncMessageIntervalStatus
    /// </summary>
    public PtpSyncMessageIntervalStatus Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPtpSyncMessageIntervalStatus(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPtpSyncMessageIntervalStatus__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPtpSyncMessageIntervalStatus(CPtpSyncMessageIntervalStatus feature) : this(neoapi_csharpPINVOKE.new_CPtpSyncMessageIntervalStatus__SWIG_1(CPtpSyncMessageIntervalStatus.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PtpSyncMessageIntervalStatus
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPtpSyncMessageIntervalStatus object</returns>
  public CPtpSyncMessageIntervalStatus Set(PtpSyncMessageIntervalStatus value) {
    CPtpSyncMessageIntervalStatus ret = new CPtpSyncMessageIntervalStatus(neoapi_csharpPINVOKE.CPtpSyncMessageIntervalStatus_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PtpSyncMessageIntervalStatus
  /// </summary>
  /// <returns>The value as PtpSyncMessageIntervalStatus</returns>
  public PtpSyncMessageIntervalStatus Get() {
    PtpSyncMessageIntervalStatus ret = (PtpSyncMessageIntervalStatus)neoapi_csharpPINVOKE.CPtpSyncMessageIntervalStatus_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for PtpTimestampOffsetMode
/// </summary>
public enum PtpTimestampOffsetMode {
  /// <summary>Timestamp Offset will be used for both Tx and Rx.</summary>
  RxAndTxOffset = 0,
  /// <summary>Timestamp Offset will be used for Rx only.</summary>
  RxOffset,
  /// <summary>Timestamp Offset will be used for both Tx and Rx.</summary>
  TxOffset
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature PtpTimestampOffsetMode
/// </summary>
public class CPtpTimestampOffsetMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPtpTimestampOffsetMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CPtpTimestampOffsetMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPtpTimestampOffsetMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CPtpTimestampOffsetMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CPtpTimestampOffsetMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of PtpTimestampOffsetMode
    /// </summary>
    public PtpTimestampOffsetMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CPtpTimestampOffsetMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CPtpTimestampOffsetMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CPtpTimestampOffsetMode(CPtpTimestampOffsetMode feature) : this(neoapi_csharpPINVOKE.new_CPtpTimestampOffsetMode__SWIG_1(CPtpTimestampOffsetMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of PtpTimestampOffsetMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CPtpTimestampOffsetMode object</returns>
  public CPtpTimestampOffsetMode Set(PtpTimestampOffsetMode value) {
    CPtpTimestampOffsetMode ret = new CPtpTimestampOffsetMode(neoapi_csharpPINVOKE.CPtpTimestampOffsetMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of PtpTimestampOffsetMode
  /// </summary>
  /// <returns>The value as PtpTimestampOffsetMode</returns>
  public PtpTimestampOffsetMode Get() {
    PtpTimestampOffsetMode ret = (PtpTimestampOffsetMode)neoapi_csharpPINVOKE.CPtpTimestampOffsetMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ReadOutBuffering
/// </summary>
public enum ReadOutBuffering {
  /// <summary>Uses 4 buffers.</summary>
  Buffered = 0,
  /// <summary>Uses 16 buffers.</summary>
  BufferedImages16,
  /// <summary>Uses 8 buffers.</summary>
  BufferedImages8,
  /// <summary>Uses 2 buffers.</summary>
  Live
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ReadOutBuffering
/// </summary>
public class CReadOutBuffering : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CReadOutBuffering(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CReadOutBuffering_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CReadOutBuffering obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CReadOutBuffering() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CReadOutBuffering(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ReadOutBuffering
    /// </summary>
    public ReadOutBuffering Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CReadOutBuffering(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CReadOutBuffering__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CReadOutBuffering(CReadOutBuffering feature) : this(neoapi_csharpPINVOKE.new_CReadOutBuffering__SWIG_1(CReadOutBuffering.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ReadOutBuffering
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CReadOutBuffering object</returns>
  public CReadOutBuffering Set(ReadOutBuffering value) {
    CReadOutBuffering ret = new CReadOutBuffering(neoapi_csharpPINVOKE.CReadOutBuffering_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ReadOutBuffering
  /// </summary>
  /// <returns>The value as ReadOutBuffering</returns>
  public ReadOutBuffering Get() {
    ReadOutBuffering ret = (ReadOutBuffering)neoapi_csharpPINVOKE.CReadOutBuffering_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ReadoutMode
/// </summary>
public enum ReadoutMode {
  /// <summary>Overlapped Readout.</summary>
  Overlapped = 0,
  /// <summary>Sequential Readout.</summary>
  Sequential
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ReadoutMode
/// </summary>
public class CReadoutMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CReadoutMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CReadoutMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CReadoutMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CReadoutMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CReadoutMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ReadoutMode
    /// </summary>
    public ReadoutMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CReadoutMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CReadoutMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CReadoutMode(CReadoutMode feature) : this(neoapi_csharpPINVOKE.new_CReadoutMode__SWIG_1(CReadoutMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ReadoutMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CReadoutMode object</returns>
  public CReadoutMode Set(ReadoutMode value) {
    CReadoutMode ret = new CReadoutMode(neoapi_csharpPINVOKE.CReadoutMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ReadoutMode
  /// </summary>
  /// <returns>The value as ReadoutMode</returns>
  public ReadoutMode Get() {
    ReadoutMode ret = (ReadoutMode)neoapi_csharpPINVOKE.CReadoutMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for RegionAcquisitionMode
/// </summary>
public enum RegionAcquisitionMode {
  /// <summary>Regions acquisition is in memory.</summary>
  Memory = 0,
  /// <summary>Regions acquisition is in sensor.</summary>
  Sensor
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature RegionAcquisitionMode
/// </summary>
public class CRegionAcquisitionMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CRegionAcquisitionMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CRegionAcquisitionMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CRegionAcquisitionMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CRegionAcquisitionMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CRegionAcquisitionMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of RegionAcquisitionMode
    /// </summary>
    public RegionAcquisitionMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CRegionAcquisitionMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CRegionAcquisitionMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CRegionAcquisitionMode(CRegionAcquisitionMode feature) : this(neoapi_csharpPINVOKE.new_CRegionAcquisitionMode__SWIG_1(CRegionAcquisitionMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of RegionAcquisitionMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CRegionAcquisitionMode object</returns>
  public CRegionAcquisitionMode Set(RegionAcquisitionMode value) {
    CRegionAcquisitionMode ret = new CRegionAcquisitionMode(neoapi_csharpPINVOKE.CRegionAcquisitionMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of RegionAcquisitionMode
  /// </summary>
  /// <returns>The value as RegionAcquisitionMode</returns>
  public RegionAcquisitionMode Get() {
    RegionAcquisitionMode ret = (RegionAcquisitionMode)neoapi_csharpPINVOKE.CRegionAcquisitionMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for RegionConfigurationMode
/// </summary>
public enum RegionConfigurationMode {
  /// <summary>Regions are not allowed to be overlapped.</summary>
  NonOverlapping = 0,
  /// <summary>Regions are not allowed to be overlapped.</summary>
  Overlapping
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature RegionConfigurationMode
/// </summary>
public class CRegionConfigurationMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CRegionConfigurationMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CRegionConfigurationMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CRegionConfigurationMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CRegionConfigurationMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CRegionConfigurationMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of RegionConfigurationMode
    /// </summary>
    public RegionConfigurationMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CRegionConfigurationMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CRegionConfigurationMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CRegionConfigurationMode(CRegionConfigurationMode feature) : this(neoapi_csharpPINVOKE.new_CRegionConfigurationMode__SWIG_1(CRegionConfigurationMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of RegionConfigurationMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CRegionConfigurationMode object</returns>
  public CRegionConfigurationMode Set(RegionConfigurationMode value) {
    CRegionConfigurationMode ret = new CRegionConfigurationMode(neoapi_csharpPINVOKE.CRegionConfigurationMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of RegionConfigurationMode
  /// </summary>
  /// <returns>The value as RegionConfigurationMode</returns>
  public RegionConfigurationMode Get() {
    RegionConfigurationMode ret = (RegionConfigurationMode)neoapi_csharpPINVOKE.CRegionConfigurationMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for RegionMode
/// </summary>
public enum RegionMode {
  /// <summary>Disable the usage of the Region.</summary>
  Off = 0,
  /// <summary>Enable the usage of the Region.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature RegionMode
/// </summary>
public class CRegionMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CRegionMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CRegionMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CRegionMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CRegionMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CRegionMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of RegionMode
    /// </summary>
    public RegionMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CRegionMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CRegionMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CRegionMode(CRegionMode feature) : this(neoapi_csharpPINVOKE.new_CRegionMode__SWIG_1(CRegionMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of RegionMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CRegionMode object</returns>
  public CRegionMode Set(RegionMode value) {
    CRegionMode ret = new CRegionMode(neoapi_csharpPINVOKE.CRegionMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of RegionMode
  /// </summary>
  /// <returns>The value as RegionMode</returns>
  public RegionMode Get() {
    RegionMode ret = (RegionMode)neoapi_csharpPINVOKE.CRegionMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for RegionSelector
/// </summary>
public enum RegionSelector {
  /// <summary>Selected features will control all the regions at the same time.</summary>
  All = 0,
  /// <summary>Selected feature will control the region 0.</summary>
  Region0,
  /// <summary>Selected feature will control the region 1.</summary>
  Region1,
  /// <summary>Selected feature will control the region 2.</summary>
  Region2,
  /// <summary>Selected feature will control the region 3.</summary>
  Region3,
  /// <summary>Selected feature will control the region 4.</summary>
  Region4,
  /// <summary>Selected feature will control the region 5.</summary>
  Region5,
  /// <summary>Selected feature will control the region 6.</summary>
  Region6,
  /// <summary>Selected feature will control the region 7.</summary>
  Region7,
  /// <summary>Selected feature will control the Scan3dExtraction0 output Region.</summary>
  Scan3dExtraction0,
  /// <summary>Selected feature will control the Scan3dExtraction1 output Region.</summary>
  Scan3dExtraction1,
  /// <summary>Selected feature will control the Scan3dExtraction2 output Region.</summary>
  Scan3dExtraction2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature RegionSelector
/// </summary>
public class CRegionSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CRegionSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CRegionSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CRegionSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CRegionSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CRegionSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of RegionSelector
    /// </summary>
    public RegionSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CRegionSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CRegionSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CRegionSelector(CRegionSelector feature) : this(neoapi_csharpPINVOKE.new_CRegionSelector__SWIG_1(CRegionSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of RegionSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CRegionSelector object</returns>
  public CRegionSelector Set(RegionSelector value) {
    CRegionSelector ret = new CRegionSelector(neoapi_csharpPINVOKE.CRegionSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of RegionSelector
  /// </summary>
  /// <returns>The value as RegionSelector</returns>
  public RegionSelector Get() {
    RegionSelector ret = (RegionSelector)neoapi_csharpPINVOKE.CRegionSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for RegionTransferMode
/// </summary>
public enum RegionTransferMode {
  /// <summary>Each region is transfer as a separate image.</summary>
  SeparateImages = 0,
  /// <summary>All regions are transfer as one stacked image.</summary>
  StackedImage
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature RegionTransferMode
/// </summary>
public class CRegionTransferMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CRegionTransferMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CRegionTransferMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CRegionTransferMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CRegionTransferMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CRegionTransferMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of RegionTransferMode
    /// </summary>
    public RegionTransferMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CRegionTransferMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CRegionTransferMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CRegionTransferMode(CRegionTransferMode feature) : this(neoapi_csharpPINVOKE.new_CRegionTransferMode__SWIG_1(CRegionTransferMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of RegionTransferMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CRegionTransferMode object</returns>
  public CRegionTransferMode Set(RegionTransferMode value) {
    CRegionTransferMode ret = new CRegionTransferMode(neoapi_csharpPINVOKE.CRegionTransferMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of RegionTransferMode
  /// </summary>
  /// <returns>The value as RegionTransferMode</returns>
  public RegionTransferMode Get() {
    RegionTransferMode ret = (RegionTransferMode)neoapi_csharpPINVOKE.CRegionTransferMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SIControl
/// </summary>
public enum SIControl {
  /// <summary>Stream is disabled.</summary>
  StreamDisabled = 0,
  /// <summary>Stream is enabled.</summary>
  StreamEnabled
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SIControl
/// </summary>
public class CSIControl : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSIControl(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSIControl_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSIControl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSIControl() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSIControl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SIControl
    /// </summary>
    public SIControl Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSIControl(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSIControl__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSIControl(CSIControl feature) : this(neoapi_csharpPINVOKE.new_CSIControl__SWIG_1(CSIControl.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SIControl
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSIControl object</returns>
  public CSIControl Set(SIControl value) {
    CSIControl ret = new CSIControl(neoapi_csharpPINVOKE.CSIControl_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SIControl
  /// </summary>
  /// <returns>The value as SIControl</returns>
  public SIControl Get() {
    SIControl ret = (SIControl)neoapi_csharpPINVOKE.CSIControl_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SensorADDigitization
/// </summary>
public enum SensorADDigitization {
  /// <summary>The sensors AD digitization is 10 bit per pixel.</summary>
  Bpp10 = 0,
  /// <summary>The sensors AD digitization is 12 bit per pixel.</summary>
  Bpp12,
  /// <summary>The sensors AD digitization is 8 bit per pixel.</summary>
  Bpp8
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SensorADDigitization
/// </summary>
public class CSensorADDigitization : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSensorADDigitization(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSensorADDigitization_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSensorADDigitization obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSensorADDigitization() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSensorADDigitization(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SensorADDigitization
    /// </summary>
    public SensorADDigitization Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSensorADDigitization(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSensorADDigitization__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSensorADDigitization(CSensorADDigitization feature) : this(neoapi_csharpPINVOKE.new_CSensorADDigitization__SWIG_1(CSensorADDigitization.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SensorADDigitization
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSensorADDigitization object</returns>
  public CSensorADDigitization Set(SensorADDigitization value) {
    CSensorADDigitization ret = new CSensorADDigitization(neoapi_csharpPINVOKE.CSensorADDigitization_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SensorADDigitization
  /// </summary>
  /// <returns>The value as SensorADDigitization</returns>
  public SensorADDigitization Get() {
    SensorADDigitization ret = (SensorADDigitization)neoapi_csharpPINVOKE.CSensorADDigitization_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SensorDigitizationTaps
/// </summary>
public enum SensorDigitizationTaps {
  /// <summary>8 taps.</summary>
  Eight = 0,
  /// <summary>4 taps.</summary>
  Four,
  /// <summary>1 tap.</summary>
  One,
  /// <summary>10 taps.</summary>
  Ten,
  /// <summary>3 taps.</summary>
  Three,
  /// <summary>2 taps.</summary>
  Two
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SensorDigitizationTaps
/// </summary>
public class CSensorDigitizationTaps : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSensorDigitizationTaps(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSensorDigitizationTaps_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSensorDigitizationTaps obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSensorDigitizationTaps() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSensorDigitizationTaps(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SensorDigitizationTaps
    /// </summary>
    public SensorDigitizationTaps Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSensorDigitizationTaps(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSensorDigitizationTaps__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSensorDigitizationTaps(CSensorDigitizationTaps feature) : this(neoapi_csharpPINVOKE.new_CSensorDigitizationTaps__SWIG_1(CSensorDigitizationTaps.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SensorDigitizationTaps
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSensorDigitizationTaps object</returns>
  public CSensorDigitizationTaps Set(SensorDigitizationTaps value) {
    CSensorDigitizationTaps ret = new CSensorDigitizationTaps(neoapi_csharpPINVOKE.CSensorDigitizationTaps_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SensorDigitizationTaps
  /// </summary>
  /// <returns>The value as SensorDigitizationTaps</returns>
  public SensorDigitizationTaps Get() {
    SensorDigitizationTaps ret = (SensorDigitizationTaps)neoapi_csharpPINVOKE.CSensorDigitizationTaps_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SensorShutterMode
/// </summary>
public enum SensorShutterMode {
  /// <summary>The shutter opens and closes at the same time for all pixels. All the pixels are exposed for the same length of time at the same time.</summary>
  Global = 0,
  /// <summary>The shutter opens at the same time for all pixels but ends in a sequential manner. The pixels are exposed for different lengths of time.</summary>
  GlobalReset,
  /// <summary>The shutter opens and closes sequentially for groups (typically lines) of pixels. All the pixels are exposed for the same length of time but not at the same time.</summary>
  Rolling
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SensorShutterMode
/// </summary>
public class CSensorShutterMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSensorShutterMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSensorShutterMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSensorShutterMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSensorShutterMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSensorShutterMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SensorShutterMode
    /// </summary>
    public SensorShutterMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSensorShutterMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSensorShutterMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSensorShutterMode(CSensorShutterMode feature) : this(neoapi_csharpPINVOKE.new_CSensorShutterMode__SWIG_1(CSensorShutterMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SensorShutterMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSensorShutterMode object</returns>
  public CSensorShutterMode Set(SensorShutterMode value) {
    CSensorShutterMode ret = new CSensorShutterMode(neoapi_csharpPINVOKE.CSensorShutterMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SensorShutterMode
  /// </summary>
  /// <returns>The value as SensorShutterMode</returns>
  public SensorShutterMode Get() {
    SensorShutterMode ret = (SensorShutterMode)neoapi_csharpPINVOKE.CSensorShutterMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SensorTaps
/// </summary>
public enum SensorTaps {
  /// <summary>8 taps.</summary>
  Eight = 0,
  /// <summary>4 taps.</summary>
  Four,
  /// <summary>1 tap.</summary>
  One,
  /// <summary>10 taps.</summary>
  Ten,
  /// <summary>3 taps.</summary>
  Three,
  /// <summary>2 taps.</summary>
  Two
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SensorTaps
/// </summary>
public class CSensorTaps : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSensorTaps(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSensorTaps_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSensorTaps obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSensorTaps() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSensorTaps(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SensorTaps
    /// </summary>
    public SensorTaps Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSensorTaps(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSensorTaps__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSensorTaps(CSensorTaps feature) : this(neoapi_csharpPINVOKE.new_CSensorTaps__SWIG_1(CSensorTaps.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SensorTaps
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSensorTaps object</returns>
  public CSensorTaps Set(SensorTaps value) {
    CSensorTaps ret = new CSensorTaps(neoapi_csharpPINVOKE.CSensorTaps_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SensorTaps
  /// </summary>
  /// <returns>The value as SensorTaps</returns>
  public SensorTaps Get() {
    SensorTaps ret = (SensorTaps)neoapi_csharpPINVOKE.CSensorTaps_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SequencerConfigurationMode
/// </summary>
public enum SequencerConfigurationMode {
  /// <summary>Disables the sequencer configuration mode.</summary>
  Off = 0,
  /// <summary>Enables the sequencer configuration mode.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SequencerConfigurationMode
/// </summary>
public class CSequencerConfigurationMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSequencerConfigurationMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSequencerConfigurationMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSequencerConfigurationMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSequencerConfigurationMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSequencerConfigurationMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SequencerConfigurationMode
    /// </summary>
    public SequencerConfigurationMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSequencerConfigurationMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSequencerConfigurationMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSequencerConfigurationMode(CSequencerConfigurationMode feature) : this(neoapi_csharpPINVOKE.new_CSequencerConfigurationMode__SWIG_1(CSequencerConfigurationMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SequencerConfigurationMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSequencerConfigurationMode object</returns>
  public CSequencerConfigurationMode Set(SequencerConfigurationMode value) {
    CSequencerConfigurationMode ret = new CSequencerConfigurationMode(neoapi_csharpPINVOKE.CSequencerConfigurationMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SequencerConfigurationMode
  /// </summary>
  /// <returns>The value as SequencerConfigurationMode</returns>
  public SequencerConfigurationMode Get() {
    SequencerConfigurationMode ret = (SequencerConfigurationMode)neoapi_csharpPINVOKE.CSequencerConfigurationMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SequencerFeatureSelector
/// </summary>
public enum SequencerFeatureSelector {
  /// <summary>Sets the duration (or number of events) before the CounterEnd event is generated. AVAILABLE: Always</summary>
  CounterDuration = 0,
  /// <summary>Selects the Activation mode Event Source signal. AVAILABLE: Always</summary>
  CounterEventActivation,
  /// <summary>Select the events that will be the source to increment the Counter. AVAILABLE: Always</summary>
  CounterEventSource,
  /// <summary>Selects the Activation mode of the Counter Reset Source signal. AVAILABLE: Always</summary>
  CounterResetActivation,
  /// <summary>Selects the signals that will be the source to reset the Counter. AVAILABLE: Always</summary>
  CounterResetSource,
  /// <summary>Device - Specific</summary>
  DeviceSpecific,
  /// <summary>Sets the operation mode of the Exposure (or shutter). AVAILABLE: Always</summary>
  ExposureMode,
  /// <summary>Returns the exposure time used to capture the image. AVAILABLE: Always</summary>
  ExposureTime,
  /// <summary>Controls the selected gain as an absolute physical value. AVAILABLE: Always</summary>
  Gain,
  /// <summary>Height of the image provided by the device (in pixels). AVAILABLE: Always</summary>
  Height,
  /// <summary>Horizontal offset from the origin to the region of interest (in pixels). AVAILABLE: Always</summary>
  OffsetX,
  /// <summary>Vertical offset from the origin to the region of interest (in pixels). AVAILABLE: Always</summary>
  OffsetY,
  /// <summary>Controls if the selected trigger is active. AVAILABLE: Always</summary>
  TriggerMode,
  /// <summary>Sets the value of the bit selected by UserOutputSelector. AVAILABLE: Always</summary>
  UserOutputValue,
  /// <summary>It is subject to the UserOutputValueAllMask. AVAILABLE: Always</summary>
  UserOutputValueAll,
  /// <summary>Width of the image provided by the device (in pixels). AVAILABLE: Always</summary>
  Width
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SequencerFeatureSelector
/// </summary>
public class CSequencerFeatureSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSequencerFeatureSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSequencerFeatureSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSequencerFeatureSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSequencerFeatureSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSequencerFeatureSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SequencerFeatureSelector
    /// </summary>
    public SequencerFeatureSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSequencerFeatureSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSequencerFeatureSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSequencerFeatureSelector(CSequencerFeatureSelector feature) : this(neoapi_csharpPINVOKE.new_CSequencerFeatureSelector__SWIG_1(CSequencerFeatureSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SequencerFeatureSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSequencerFeatureSelector object</returns>
  public CSequencerFeatureSelector Set(SequencerFeatureSelector value) {
    CSequencerFeatureSelector ret = new CSequencerFeatureSelector(neoapi_csharpPINVOKE.CSequencerFeatureSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SequencerFeatureSelector
  /// </summary>
  /// <returns>The value as SequencerFeatureSelector</returns>
  public SequencerFeatureSelector Get() {
    SequencerFeatureSelector ret = (SequencerFeatureSelector)neoapi_csharpPINVOKE.CSequencerFeatureSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SequencerMode
/// </summary>
public enum SequencerMode {
  /// <summary>Disables the sequencer.</summary>
  Off = 0,
  /// <summary>Enables the sequencer.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SequencerMode
/// </summary>
public class CSequencerMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSequencerMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSequencerMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSequencerMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSequencerMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSequencerMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SequencerMode
    /// </summary>
    public SequencerMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSequencerMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSequencerMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSequencerMode(CSequencerMode feature) : this(neoapi_csharpPINVOKE.new_CSequencerMode__SWIG_1(CSequencerMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SequencerMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSequencerMode object</returns>
  public CSequencerMode Set(SequencerMode value) {
    CSequencerMode ret = new CSequencerMode(neoapi_csharpPINVOKE.CSequencerMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SequencerMode
  /// </summary>
  /// <returns>The value as SequencerMode</returns>
  public SequencerMode Get() {
    SequencerMode ret = (SequencerMode)neoapi_csharpPINVOKE.CSequencerMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SequencerTriggerActivation
/// </summary>
public enum SequencerTriggerActivation {
  /// <summary>Specifies that the trigger is considered valid on the falling or rising edge of the source signal.</summary>
  AnyEdge = 0,
  /// <summary>Specifies that the trigger is considered valid on the falling edge of the source signal.</summary>
  FallingEdge,
  /// <summary>Specifies that the trigger is considered valid as long as the level of the source signal is high.</summary>
  LevelHigh,
  /// <summary>Specifies that the trigger is considered valid as long as the level of the source signal is low.</summary>
  LevelLow,
  /// <summary>Specifies that the trigger is considered valid on the rising edge of the source signal.</summary>
  RisingEdge
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SequencerTriggerActivation
/// </summary>
public class CSequencerTriggerActivation : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSequencerTriggerActivation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSequencerTriggerActivation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSequencerTriggerActivation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSequencerTriggerActivation() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSequencerTriggerActivation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SequencerTriggerActivation
    /// </summary>
    public SequencerTriggerActivation Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSequencerTriggerActivation(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSequencerTriggerActivation__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSequencerTriggerActivation(CSequencerTriggerActivation feature) : this(neoapi_csharpPINVOKE.new_CSequencerTriggerActivation__SWIG_1(CSequencerTriggerActivation.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SequencerTriggerActivation
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSequencerTriggerActivation object</returns>
  public CSequencerTriggerActivation Set(SequencerTriggerActivation value) {
    CSequencerTriggerActivation ret = new CSequencerTriggerActivation(neoapi_csharpPINVOKE.CSequencerTriggerActivation_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SequencerTriggerActivation
  /// </summary>
  /// <returns>The value as SequencerTriggerActivation</returns>
  public SequencerTriggerActivation Get() {
    SequencerTriggerActivation ret = (SequencerTriggerActivation)neoapi_csharpPINVOKE.CSequencerTriggerActivation_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SequencerTriggerSource
/// </summary>
public enum SequencerTriggerSource {
  /// <summary>Starts with the reception of the Acquisition End.</summary>
  AcquisitionEnd = 0,
  /// <summary>Starts with the reception of the Acquisition Start.</summary>
  AcquisitionStart,
  /// <summary>Starts with the reception of the Acquisition Trigger.</summary>
  AcquisitionTrigger,
  /// <summary>Starts with the reception of the missed Acquisition Trigger.</summary>
  AcquisitionTriggerMissed,
  /// <summary>Starts with the assertion of the chosen action signal.</summary>
  Action0,
  /// <summary>Starts with the assertion of the chosen action signal.</summary>
  Action1,
  /// <summary>Starts with the assertion of the chosen action signal.</summary>
  Action2,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.</summary>
  CC1,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.</summary>
  CC2,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.</summary>
  CC3,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.</summary>
  CC4,
  /// <summary>Starts with the reception of the Counter End.</summary>
  Counter0End,
  /// <summary>Starts with the reception of the Counter Start.</summary>
  Counter0Start,
  /// <summary>Starts with the reception of the Counter End.</summary>
  Counter1End,
  /// <summary>Starts with the reception of the Counter Start.</summary>
  Counter1Start,
  /// <summary>Starts with the reception of the Counter End.</summary>
  Counter2End,
  /// <summary>Starts with the reception of the Counter Start.</summary>
  Counter2Start,
  /// <summary>Starts with the reception of the Encoder output signal.</summary>
  Encoder0,
  /// <summary>Starts with the reception of the Encoder output signal.</summary>
  Encoder1,
  /// <summary>Starts with the reception of the Encoder output signal.</summary>
  Encoder2,
  /// <summary>Starts with the reception of the Exposure Active. AVAILABLE: Always</summary>
  ExposureActive,
  /// <summary>Starts with the reception of the Exposure End.</summary>
  ExposureEnd,
  /// <summary>Starts with the reception of the Exposure Start.</summary>
  ExposureStart,
  /// <summary>Starts with the reception of the Frame Burst End.</summary>
  FrameBurstEnd,
  /// <summary>Starts with the reception of the Frame Burst Start.</summary>
  FrameBurstStart,
  /// <summary>Starts with the reception of the Frame End.</summary>
  FrameEnd,
  /// <summary>Starts with the reception of the Frame Start.</summary>
  FrameStart,
  /// <summary>Starts with the reception of the Frame Start Trigger.</summary>
  FrameTrigger,
  /// <summary>Starts with the reception of the missed Frame Trigger.</summary>
  FrameTriggerMissed,
  /// <summary>Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.</summary>
  Line0,
  /// <summary>Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.</summary>
  Line1,
  /// <summary>Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.</summary>
  Line2,
  /// <summary>Starts with the reception of the chosen Link Trigger.</summary>
  LinkTrigger0,
  /// <summary>Starts with the reception of the chosen Link Trigger.</summary>
  LinkTrigger1,
  /// <summary>Starts with the reception of the chosen Link Trigger.</summary>
  LinkTrigger2,
  /// <summary>Starts with the reception of the Logic Block output signal.</summary>
  LogicBlock0,
  /// <summary>Starts with the reception of the Logic Block output signal.</summary>
  LogicBlock1,
  /// <summary>Starts with the reception of the Logic Block output signal.</summary>
  LogicBlock2,
  /// <summary>Disables the sequencer trigger.</summary>
  Off,
  /// <summary>Starts with the reception of the Read Out Active. AVAILABLE: Always</summary>
  ReadOutActive,
  /// <summary>Starts on the reception of the Software Signal.</summary>
  SoftwareSignal0,
  /// <summary>Starts on the reception of the Software Signal.</summary>
  SoftwareSignal1,
  /// <summary>Starts on the reception of the Software Signal.</summary>
  SoftwareSignal2,
  /// <summary>Starts with the reception of the Timer End.</summary>
  Timer0End,
  /// <summary>Starts with the reception of the Timer Start.</summary>
  Timer0Start,
  /// <summary>Starts with the reception of the Timer End.</summary>
  Timer1End,
  /// <summary>Starts with the reception of the Timer Start.</summary>
  Timer1Start,
  /// <summary>Starts with the reception of the Timer End.</summary>
  Timer2End,
  /// <summary>Starts with the reception of the Timer Start.</summary>
  Timer2Start,
  /// <summary>Specifies which User Output bit signal to use as internal source for the trigger.</summary>
  UserOutput0,
  /// <summary>Specifies which User Output bit signal to use as internal source for the trigger.</summary>
  UserOutput1,
  /// <summary>Specifies which User Output bit signal to use as internal source for the trigger.</summary>
  UserOutput2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SequencerTriggerSource
/// </summary>
public class CSequencerTriggerSource : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSequencerTriggerSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSequencerTriggerSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSequencerTriggerSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSequencerTriggerSource() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSequencerTriggerSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SequencerTriggerSource
    /// </summary>
    public SequencerTriggerSource Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSequencerTriggerSource(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSequencerTriggerSource__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSequencerTriggerSource(CSequencerTriggerSource feature) : this(neoapi_csharpPINVOKE.new_CSequencerTriggerSource__SWIG_1(CSequencerTriggerSource.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SequencerTriggerSource
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSequencerTriggerSource object</returns>
  public CSequencerTriggerSource Set(SequencerTriggerSource value) {
    CSequencerTriggerSource ret = new CSequencerTriggerSource(neoapi_csharpPINVOKE.CSequencerTriggerSource_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SequencerTriggerSource
  /// </summary>
  /// <returns>The value as SequencerTriggerSource</returns>
  public SequencerTriggerSource Get() {
    SequencerTriggerSource ret = (SequencerTriggerSource)neoapi_csharpPINVOKE.CSequencerTriggerSource_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for ShadingSelector
/// </summary>
public enum ShadingSelector {
  /// <summary>The shading port address for pixel 0 is selected.</summary>
  Pixel0 = 0,
  /// <summary>The shading port address for pixel 1 is selected.</summary>
  Pixel1
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature ShadingSelector
/// </summary>
public class CShadingSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CShadingSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CShadingSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CShadingSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CShadingSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CShadingSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of ShadingSelector
    /// </summary>
    public ShadingSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CShadingSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CShadingSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CShadingSelector(CShadingSelector feature) : this(neoapi_csharpPINVOKE.new_CShadingSelector__SWIG_1(CShadingSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of ShadingSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CShadingSelector object</returns>
  public CShadingSelector Set(ShadingSelector value) {
    CShadingSelector ret = new CShadingSelector(neoapi_csharpPINVOKE.CShadingSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of ShadingSelector
  /// </summary>
  /// <returns>The value as ShadingSelector</returns>
  public ShadingSelector Get() {
    ShadingSelector ret = (ShadingSelector)neoapi_csharpPINVOKE.CShadingSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SharpeningMode
/// </summary>
public enum SharpeningMode {
  /// <summary>Sharpening is enabled in active noise reduction mode</summary>
  ActiveNoiseReduction = 0,
  /// <summary>Sharpening is enabled in adaptive sharpening mode.</summary>
  AdaptiveSharpening,
  /// <summary>Sharpening is enabled in global sharpening mode.</summary>
  GlobalSharpening,
  /// <summary>Sharpening is disabled.</summary>
  Off
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SharpeningMode
/// </summary>
public class CSharpeningMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSharpeningMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSharpeningMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSharpeningMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSharpeningMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSharpeningMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SharpeningMode
    /// </summary>
    public SharpeningMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSharpeningMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSharpeningMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSharpeningMode(CSharpeningMode feature) : this(neoapi_csharpPINVOKE.new_CSharpeningMode__SWIG_1(CSharpeningMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SharpeningMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSharpeningMode object</returns>
  public CSharpeningMode Set(SharpeningMode value) {
    CSharpeningMode ret = new CSharpeningMode(neoapi_csharpPINVOKE.CSharpeningMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SharpeningMode
  /// </summary>
  /// <returns>The value as SharpeningMode</returns>
  public SharpeningMode Get() {
    SharpeningMode ret = (SharpeningMode)neoapi_csharpPINVOKE.CSharpeningMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SourceID
/// </summary>
public enum SourceID {
  /// <summary>Sesnor 1.</summary>
  Sensor1 = 0,
  /// <summary>Sensor 2.</summary>
  Sensor2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SourceID
/// </summary>
public class CSourceID : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSourceID(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSourceID_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSourceID obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSourceID() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSourceID(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SourceID
    /// </summary>
    public SourceID Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSourceID(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSourceID__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSourceID(CSourceID feature) : this(neoapi_csharpPINVOKE.new_CSourceID__SWIG_1(CSourceID.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SourceID
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSourceID object</returns>
  public CSourceID Set(SourceID value) {
    CSourceID ret = new CSourceID(neoapi_csharpPINVOKE.CSourceID_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SourceID
  /// </summary>
  /// <returns>The value as SourceID</returns>
  public SourceID Get() {
    SourceID ret = (SourceID)neoapi_csharpPINVOKE.CSourceID_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SourceSelector
/// </summary>
public enum SourceSelector {
  /// <summary>Selects all the data sources.</summary>
  All = 0,
  /// <summary>Selects the data source 0.</summary>
  Source0,
  /// <summary>Selects the data source 1.</summary>
  Source1,
  /// <summary>Selects the data source 2.</summary>
  Source2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SourceSelector
/// </summary>
public class CSourceSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSourceSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSourceSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSourceSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSourceSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSourceSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SourceSelector
    /// </summary>
    public SourceSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSourceSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSourceSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSourceSelector(CSourceSelector feature) : this(neoapi_csharpPINVOKE.new_CSourceSelector__SWIG_1(CSourceSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SourceSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSourceSelector object</returns>
  public CSourceSelector Set(SourceSelector value) {
    CSourceSelector ret = new CSourceSelector(neoapi_csharpPINVOKE.CSourceSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SourceSelector
  /// </summary>
  /// <returns>The value as SourceSelector</returns>
  public SourceSelector Get() {
    SourceSelector ret = (SourceSelector)neoapi_csharpPINVOKE.CSourceSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for SwitchPortSelector
/// </summary>
public enum SwitchPortSelector {
  /// <summary>Selects port 0.</summary>
  Port0 = 0,
  /// <summary>Selects port 1.</summary>
  Port1,
  /// <summary>Selects port 2.</summary>
  Port2,
  /// <summary>Selects port 3.</summary>
  Port3,
  /// <summary>Selects port 4.</summary>
  Port4,
  /// <summary>Selects port 5.</summary>
  Port5
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature SwitchPortSelector
/// </summary>
public class CSwitchPortSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSwitchPortSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CSwitchPortSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSwitchPortSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CSwitchPortSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CSwitchPortSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of SwitchPortSelector
    /// </summary>
    public SwitchPortSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CSwitchPortSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CSwitchPortSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CSwitchPortSelector(CSwitchPortSelector feature) : this(neoapi_csharpPINVOKE.new_CSwitchPortSelector__SWIG_1(CSwitchPortSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of SwitchPortSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CSwitchPortSelector object</returns>
  public CSwitchPortSelector Set(SwitchPortSelector value) {
    CSwitchPortSelector ret = new CSwitchPortSelector(neoapi_csharpPINVOKE.CSwitchPortSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of SwitchPortSelector
  /// </summary>
  /// <returns>The value as SwitchPortSelector</returns>
  public SwitchPortSelector Get() {
    SwitchPortSelector ret = (SwitchPortSelector)neoapi_csharpPINVOKE.CSwitchPortSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TestPattern
/// </summary>
public enum TestPattern {
  /// <summary>Image is filled with the darkest possible image.</summary>
  Black = 0,
  /// <summary>Image is filled with stripes of color including White, Black, Red, Green, Blue, Cyan, Magenta and Yellow.</summary>
  ColorBar,
  /// <summary>A frame counter is superimposed on the live image.</summary>
  FrameCounter,
  /// <summary>Image is filled diagonally with an image that goes from the darkest possible value to the brightest. AVAILABLE: Always</summary>
  GreyDiagonalRamp,
  /// <summary>Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving horizontal and vertical lines. AVAILABLE: Always</summary>
  GreyDiagonalRampHorizontalAndVerticalLineMoving,
  /// <summary>Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving horizontal lines. AVAILABLE: Always</summary>
  GreyDiagonalRampHorizontalLineMoving,
  /// <summary>Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving vertical lines. AVAILABLE: Always</summary>
  GreyDiagonalRampVerticalLineMoving,
  /// <summary>Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving lines. AVAILABLE: Always</summary>
  GreyDiagonalRampWithLineMoving,
  /// <summary>Image is filled horizontally with an image that goes from the darkest possible value to the brightest.</summary>
  GreyHorizontalRamp,
  /// <summary>Image is filled horizontally with an image that goes from the darkest possible value to the brightest with moving horizontal and vertical lines. AVAILABLE: Always</summary>
  GreyHorizontalRampHorizontalAndVerticalLineMoving,
  /// <summary>Image is filled horizontally with an image that goes from the darkest possible value to the brightest with moving horizontal lines. AVAILABLE: Always</summary>
  GreyHorizontalRampHorizontalLineMoving,
  /// <summary>Image is filled horizontally with an image that goes from the darkest possible value to the brightest and that moves horizontally from left to right at each frame.</summary>
  GreyHorizontalRampMoving,
  /// <summary>Image is filled horizontally with an image that goes from the darkest possible value to the brightest with moving vertical lines. AVAILABLE: Always</summary>
  GreyHorizontalRampVerticalLineMoving,
  /// <summary>Image is filled vertically with an image that goes from the darkest possible value to the brightest.</summary>
  GreyVerticalRamp,
  /// <summary>Image is filled vertically with an image that goes from the darkest possible value to the brightest with moving horizontal and vertical lines. AVAILABLE: Always</summary>
  GreyVerticalRampHorizontalAndVerticalLineMoving,
  /// <summary>Image is filled vertically with an image that goes from the darkest possible value to the brightest with moving horizontal lines. AVAILABLE: Always</summary>
  GreyVerticalRampHorizontalLineMoving,
  /// <summary>Image is filled vertically with an image that goes from the darkest possible value to the brightest and that moves vertically from top to bottom at each frame.</summary>
  GreyVerticalRampMoving,
  /// <summary>Image is filled vertically with an image that goes from the darkest possible value to the brightest with moving vertical lines. AVAILABLE: Always</summary>
  GreyVerticalRampVerticalLineMoving,
  /// <summary>Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving horizontal and vertical lines. AVAILABLE: Always</summary>
  HorizontalAndVerticalLineMoving,
  /// <summary>Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving horizontal lines. AVAILABLE: Always</summary>
  HorizontalLineMoving,
  /// <summary>Image is coming from the sensor.</summary>
  Off,
  /// <summary>Image is filled diagonally with an image that goes from the darkest possible value to the brightest with moving horizontal and vertical lines. AVAILABLE: Always</summary>
  VerticalLineMoving,
  /// <summary>A frame counter is superimposed on the live image.</summary>
  White
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TestPattern
/// </summary>
public class CTestPattern : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTestPattern(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTestPattern_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTestPattern obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTestPattern() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTestPattern(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TestPattern
    /// </summary>
    public TestPattern Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTestPattern(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTestPattern__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTestPattern(CTestPattern feature) : this(neoapi_csharpPINVOKE.new_CTestPattern__SWIG_1(CTestPattern.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TestPattern
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTestPattern object</returns>
  public CTestPattern Set(TestPattern value) {
    CTestPattern ret = new CTestPattern(neoapi_csharpPINVOKE.CTestPattern_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TestPattern
  /// </summary>
  /// <returns>The value as TestPattern</returns>
  public TestPattern Get() {
    TestPattern ret = (TestPattern)neoapi_csharpPINVOKE.CTestPattern_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TestPatternGeneratorSelector
/// </summary>
public enum TestPatternGeneratorSelector {
  /// <summary>TestPattern feature will control the image processor. AVAILABLE: Always</summary>
  ImageProcessor = 0,
  /// <summary>TestPattern feature will control the region 0 test pattern generator.</summary>
  Region0,
  /// <summary>TestPattern feature will control the region 1 test pattern generator.</summary>
  Region1,
  /// <summary>TestPattern feature will control the region 2 test pattern generator.</summary>
  Region2,
  /// <summary>TestPattern feature will control the sensor's test pattern generator.</summary>
  Sensor,
  /// <summary>TestPattern feature will control the sensor processor. AVAILABLE: Always</summary>
  SensorProcessor
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TestPatternGeneratorSelector
/// </summary>
public class CTestPatternGeneratorSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTestPatternGeneratorSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTestPatternGeneratorSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTestPatternGeneratorSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTestPatternGeneratorSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTestPatternGeneratorSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TestPatternGeneratorSelector
    /// </summary>
    public TestPatternGeneratorSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTestPatternGeneratorSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTestPatternGeneratorSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTestPatternGeneratorSelector(CTestPatternGeneratorSelector feature) : this(neoapi_csharpPINVOKE.new_CTestPatternGeneratorSelector__SWIG_1(CTestPatternGeneratorSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TestPatternGeneratorSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTestPatternGeneratorSelector object</returns>
  public CTestPatternGeneratorSelector Set(TestPatternGeneratorSelector value) {
    CTestPatternGeneratorSelector ret = new CTestPatternGeneratorSelector(neoapi_csharpPINVOKE.CTestPatternGeneratorSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TestPatternGeneratorSelector
  /// </summary>
  /// <returns>The value as TestPatternGeneratorSelector</returns>
  public TestPatternGeneratorSelector Get() {
    TestPatternGeneratorSelector ret = (TestPatternGeneratorSelector)neoapi_csharpPINVOKE.CTestPatternGeneratorSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TimerSelector
/// </summary>
public enum TimerSelector {
  /// <summary>Selects the Timer 0.</summary>
  Timer0 = 0,
  /// <summary>Selects the Timer 1.</summary>
  Timer1,
  /// <summary>Selects the Timer 2.</summary>
  Timer2,
  /// <summary>Selects the Timer 3. AVAILABLE: Always</summary>
  Timer3
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TimerSelector
/// </summary>
public class CTimerSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTimerSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTimerSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTimerSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTimerSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTimerSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TimerSelector
    /// </summary>
    public TimerSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTimerSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTimerSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTimerSelector(CTimerSelector feature) : this(neoapi_csharpPINVOKE.new_CTimerSelector__SWIG_1(CTimerSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TimerSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTimerSelector object</returns>
  public CTimerSelector Set(TimerSelector value) {
    CTimerSelector ret = new CTimerSelector(neoapi_csharpPINVOKE.CTimerSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TimerSelector
  /// </summary>
  /// <returns>The value as TimerSelector</returns>
  public TimerSelector Get() {
    TimerSelector ret = (TimerSelector)neoapi_csharpPINVOKE.CTimerSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TimerTriggerActivation
/// </summary>
public enum TimerTriggerActivation {
  /// <summary>Starts counting on the Falling or Rising Edge of the selected trigger signal.</summary>
  AnyEdge = 0,
  /// <summary>Starts counting on the Falling Edge of the selected trigger signal.</summary>
  FallingEdge,
  /// <summary>Counts as long as the selected trigger signal level is High.</summary>
  LevelHigh,
  /// <summary>Counts as long as the selected trigger signal level is Low.</summary>
  LevelLow,
  /// <summary>Starts counting on the Rising Edge of the selected trigger signal.</summary>
  RisingEdge
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TimerTriggerActivation
/// </summary>
public class CTimerTriggerActivation : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTimerTriggerActivation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTimerTriggerActivation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTimerTriggerActivation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTimerTriggerActivation() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTimerTriggerActivation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TimerTriggerActivation
    /// </summary>
    public TimerTriggerActivation Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTimerTriggerActivation(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTimerTriggerActivation__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTimerTriggerActivation(CTimerTriggerActivation feature) : this(neoapi_csharpPINVOKE.new_CTimerTriggerActivation__SWIG_1(CTimerTriggerActivation.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TimerTriggerActivation
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTimerTriggerActivation object</returns>
  public CTimerTriggerActivation Set(TimerTriggerActivation value) {
    CTimerTriggerActivation ret = new CTimerTriggerActivation(neoapi_csharpPINVOKE.CTimerTriggerActivation_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TimerTriggerActivation
  /// </summary>
  /// <returns>The value as TimerTriggerActivation</returns>
  public TimerTriggerActivation Get() {
    TimerTriggerActivation ret = (TimerTriggerActivation)neoapi_csharpPINVOKE.CTimerTriggerActivation_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TimerTriggerSource
/// </summary>
public enum TimerTriggerSource {
  /// <summary>Starts with the reception of the Acquisition End.</summary>
  AcquisitionEnd = 0,
  /// <summary>Starts with the reception of the Acquisition Start.</summary>
  AcquisitionStart,
  /// <summary>Starts with the reception of the Acquisition Trigger.</summary>
  AcquisitionTrigger,
  /// <summary>Starts with the reception of a missed Acquisition Trigger.</summary>
  AcquisitionTriggerMissed,
  /// <summary>Starts with the assertion of the chosen action signal.</summary>
  Action0,
  /// <summary>Starts with the assertion of the chosen action signal.</summary>
  Action1,
  /// <summary>Starts with the assertion of the chosen action signal.</summary>
  Action2,
  /// <summary>Starts with the reception of the Counter End.</summary>
  Counter0End,
  /// <summary>Starts with the reception of the Counter Start.</summary>
  Counter0Start,
  /// <summary>Starts with the reception of the Counter End.</summary>
  Counter1End,
  /// <summary>Starts with the reception of the Counter Start.</summary>
  Counter1Start,
  /// <summary>Starts with the reception of the Counter End.</summary>
  Counter2End,
  /// <summary>Starts with the reception of the Counter Start.</summary>
  Counter2Start,
  /// <summary>Starts with the reception of the Encoder output signal.</summary>
  Encoder0,
  /// <summary>Starts with the reception of the Encoder output signal.</summary>
  Encoder1,
  /// <summary>Starts with the reception of the Encoder output signal.</summary>
  Encoder2,
  /// <summary>Starts with the reception of the Exposure End.</summary>
  ExposureEnd,
  /// <summary>Starts with the reception of the Exposure Start.</summary>
  ExposureStart,
  /// <summary>Starts with the reception of the Frame Burst End.</summary>
  FrameBurstEnd,
  /// <summary>Starts with the reception of the Frame Burst Start.</summary>
  FrameBurstStart,
  /// <summary>Starts with the reception of the Frame End.</summary>
  FrameEnd,
  /// <summary>Starts with the reception of the Frame Start.</summary>
  FrameStart,
  /// <summary>FrameTransferSkipped AVAILABLE: Always</summary>
  FrameTransferSkipped,
  /// <summary>Starts with the reception of the Frame Start Trigger.</summary>
  FrameTrigger,
  /// <summary>Starts with the reception of a missed Frame Trigger.</summary>
  FrameTriggerMissed,
  /// <summary>Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.</summary>
  Line0,
  /// <summary>Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.</summary>
  Line1,
  /// <summary>Starts when the specified TimerTriggerActivation condition is met on the chosen I/O Line.</summary>
  Line2,
  /// <summary>Starts with the reception of the Line End.</summary>
  LineEnd,
  /// <summary>Starts with the reception of the Line Start.</summary>
  LineStart,
  /// <summary>Starts with the reception of the Line Start Trigger.</summary>
  LineTrigger,
  /// <summary>Starts with the reception of a missed Line Trigger.</summary>
  LineTriggerMissed,
  /// <summary>Starts with the reception of the chosen Link Trigger.</summary>
  LinkTrigger0,
  /// <summary>Starts with the reception of the chosen Link Trigger.</summary>
  LinkTrigger1,
  /// <summary>Starts with the reception of the chosen Link Trigger.</summary>
  LinkTrigger2,
  /// <summary>Starts with the reception of the Logic Block output signal.</summary>
  LogicBlock0,
  /// <summary>Starts with the reception of the Logic Block output signal.</summary>
  LogicBlock1,
  /// <summary>Starts with the reception of the Logic Block output signal.</summary>
  LogicBlock2,
  /// <summary>Disables the Timer trigger.</summary>
  Off,
  /// <summary>Starts when the trigger was generated by the software. AVAILABLE: Always</summary>
  Software,
  /// <summary>Starts on the reception of the Software Signal.</summary>
  SoftwareSignal0,
  /// <summary>Starts on the reception of the Software Signal.</summary>
  SoftwareSignal1,
  /// <summary>Starts on the reception of the Software Signal.</summary>
  SoftwareSignal2,
  /// <summary>Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.</summary>
  Timer0End,
  /// <summary>Starts with the reception of the Timer Start.</summary>
  Timer0Start,
  /// <summary>Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.</summary>
  Timer1End,
  /// <summary>Starts with the reception of the Timer Start.</summary>
  Timer1Start,
  /// <summary>Starts with the reception of the Timer End. Note that a timer can retrigger itself to achieve a free running Timer.</summary>
  Timer2End,
  /// <summary>Starts with the reception of the Timer Start.</summary>
  Timer2Start,
  /// <summary>Starts when a trigger was skipped. AVAILABLE: Always</summary>
  TriggerSkipped,
  /// <summary>Specifies which User Output bit signal to use as internal source for the trigger.</summary>
  UserOutput0,
  /// <summary>Specifies which User Output bit signal to use as internal source for the trigger.</summary>
  UserOutput1,
  /// <summary>Specifies which User Output bit signal to use as internal source for the trigger.</summary>
  UserOutput2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TimerTriggerSource
/// </summary>
public class CTimerTriggerSource : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTimerTriggerSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTimerTriggerSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTimerTriggerSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTimerTriggerSource() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTimerTriggerSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TimerTriggerSource
    /// </summary>
    public TimerTriggerSource Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTimerTriggerSource(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTimerTriggerSource__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTimerTriggerSource(CTimerTriggerSource feature) : this(neoapi_csharpPINVOKE.new_CTimerTriggerSource__SWIG_1(CTimerTriggerSource.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TimerTriggerSource
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTimerTriggerSource object</returns>
  public CTimerTriggerSource Set(TimerTriggerSource value) {
    CTimerTriggerSource ret = new CTimerTriggerSource(neoapi_csharpPINVOKE.CTimerTriggerSource_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TimerTriggerSource
  /// </summary>
  /// <returns>The value as TimerTriggerSource</returns>
  public TimerTriggerSource Get() {
    TimerTriggerSource ret = (TimerTriggerSource)neoapi_csharpPINVOKE.CTimerTriggerSource_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TransferControlMode
/// </summary>
public enum TransferControlMode {
  /// <summary>Automatic</summary>
  Automatic = 0,
  /// <summary>Basic</summary>
  Basic,
  /// <summary>User Controlled</summary>
  UserControlled
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TransferControlMode
/// </summary>
public class CTransferControlMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTransferControlMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTransferControlMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTransferControlMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTransferControlMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTransferControlMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TransferControlMode
    /// </summary>
    public TransferControlMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTransferControlMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTransferControlMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTransferControlMode(CTransferControlMode feature) : this(neoapi_csharpPINVOKE.new_CTransferControlMode__SWIG_1(CTransferControlMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TransferControlMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTransferControlMode object</returns>
  public CTransferControlMode Set(TransferControlMode value) {
    CTransferControlMode ret = new CTransferControlMode(neoapi_csharpPINVOKE.CTransferControlMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TransferControlMode
  /// </summary>
  /// <returns>The value as TransferControlMode</returns>
  public TransferControlMode Get() {
    TransferControlMode ret = (TransferControlMode)neoapi_csharpPINVOKE.CTransferControlMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TransferOperationMode
/// </summary>
public enum TransferOperationMode {
  /// <summary>Continuous</summary>
  Continuous = 0,
  /// <summary>Multi Block</summary>
  MultiBlock
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TransferOperationMode
/// </summary>
public class CTransferOperationMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTransferOperationMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTransferOperationMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTransferOperationMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTransferOperationMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTransferOperationMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TransferOperationMode
    /// </summary>
    public TransferOperationMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTransferOperationMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTransferOperationMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTransferOperationMode(CTransferOperationMode feature) : this(neoapi_csharpPINVOKE.new_CTransferOperationMode__SWIG_1(CTransferOperationMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TransferOperationMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTransferOperationMode object</returns>
  public CTransferOperationMode Set(TransferOperationMode value) {
    CTransferOperationMode ret = new CTransferOperationMode(neoapi_csharpPINVOKE.CTransferOperationMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TransferOperationMode
  /// </summary>
  /// <returns>The value as TransferOperationMode</returns>
  public TransferOperationMode Get() {
    TransferOperationMode ret = (TransferOperationMode)neoapi_csharpPINVOKE.CTransferOperationMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TransferSelector
/// </summary>
public enum TransferSelector {
  /// <summary>The transfer features control all the data streams simultaneously.</summary>
  All = 0,
  /// <summary>The transfer features control the data stream 0.</summary>
  Stream0,
  /// <summary>The transfer features control the data stream 1.</summary>
  Stream1,
  /// <summary>The transfer features control the data stream 2.</summary>
  Stream2,
  /// <summary>The transfer features control the data stream 3, used for memory part 3. AVAILABLE: Always</summary>
  Stream3,
  /// <summary>The transfer features control the data stream 4, used for memory part 4. AVAILABLE: Always</summary>
  Stream4
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TransferSelector
/// </summary>
public class CTransferSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTransferSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTransferSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTransferSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTransferSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTransferSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TransferSelector
    /// </summary>
    public TransferSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTransferSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTransferSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTransferSelector(CTransferSelector feature) : this(neoapi_csharpPINVOKE.new_CTransferSelector__SWIG_1(CTransferSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TransferSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTransferSelector object</returns>
  public CTransferSelector Set(TransferSelector value) {
    CTransferSelector ret = new CTransferSelector(neoapi_csharpPINVOKE.CTransferSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TransferSelector
  /// </summary>
  /// <returns>The value as TransferSelector</returns>
  public TransferSelector Get() {
    TransferSelector ret = (TransferSelector)neoapi_csharpPINVOKE.CTransferSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TransferStatusSelector
/// </summary>
public enum TransferStatusSelector {
  /// <summary>Data blocks transmission is suspended immediately.</summary>
  Paused = 0,
  /// <summary>Data blocks queue is in overflow state.</summary>
  QueueOverflow,
  /// <summary>Data blocks transmission is stopped.</summary>
  Stopped,
  /// <summary>Data blocks transmission is stopping. The current block transmission will be completed and the transfer state will stop.</summary>
  Stopping,
  /// <summary>Data blocks are transmitted when enough data is available.</summary>
  Streaming
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TransferStatusSelector
/// </summary>
public class CTransferStatusSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTransferStatusSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTransferStatusSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTransferStatusSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTransferStatusSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTransferStatusSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TransferStatusSelector
    /// </summary>
    public TransferStatusSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTransferStatusSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTransferStatusSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTransferStatusSelector(CTransferStatusSelector feature) : this(neoapi_csharpPINVOKE.new_CTransferStatusSelector__SWIG_1(CTransferStatusSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TransferStatusSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTransferStatusSelector object</returns>
  public CTransferStatusSelector Set(TransferStatusSelector value) {
    CTransferStatusSelector ret = new CTransferStatusSelector(neoapi_csharpPINVOKE.CTransferStatusSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TransferStatusSelector
  /// </summary>
  /// <returns>The value as TransferStatusSelector</returns>
  public TransferStatusSelector Get() {
    TransferStatusSelector ret = (TransferStatusSelector)neoapi_csharpPINVOKE.CTransferStatusSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TriggerActivation
/// </summary>
public enum TriggerActivation {
  /// <summary>Specifies that the trigger is considered valid on the falling or rising edge of the source signal.</summary>
  AnyEdge = 0,
  /// <summary>Specifies that the trigger is considered valid on the falling edge of the source signal.</summary>
  FallingEdge,
  /// <summary>Specifies that the trigger is considered valid as long as the level of the source signal is high.</summary>
  LevelHigh,
  /// <summary>Specifies that the trigger is considered valid as long as the level of the source signal is low.</summary>
  LevelLow,
  /// <summary>Specifies that the trigger is considered valid on the rising edge of the source signal.</summary>
  RisingEdge
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TriggerActivation
/// </summary>
public class CTriggerActivation : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTriggerActivation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTriggerActivation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTriggerActivation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTriggerActivation() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTriggerActivation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TriggerActivation
    /// </summary>
    public TriggerActivation Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTriggerActivation(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTriggerActivation__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTriggerActivation(CTriggerActivation feature) : this(neoapi_csharpPINVOKE.new_CTriggerActivation__SWIG_1(CTriggerActivation.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TriggerActivation
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTriggerActivation object</returns>
  public CTriggerActivation Set(TriggerActivation value) {
    CTriggerActivation ret = new CTriggerActivation(neoapi_csharpPINVOKE.CTriggerActivation_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TriggerActivation
  /// </summary>
  /// <returns>The value as TriggerActivation</returns>
  public TriggerActivation Get() {
    TriggerActivation ret = (TriggerActivation)neoapi_csharpPINVOKE.CTriggerActivation_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TriggerMode
/// </summary>
public enum TriggerMode {
  /// <summary>Disables the selected trigger.</summary>
  Off = 0,
  /// <summary>Enable the selected trigger.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TriggerMode
/// </summary>
public class CTriggerMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTriggerMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTriggerMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTriggerMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTriggerMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTriggerMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TriggerMode
    /// </summary>
    public TriggerMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTriggerMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTriggerMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTriggerMode(CTriggerMode feature) : this(neoapi_csharpPINVOKE.new_CTriggerMode__SWIG_1(CTriggerMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TriggerMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTriggerMode object</returns>
  public CTriggerMode Set(TriggerMode value) {
    CTriggerMode ret = new CTriggerMode(neoapi_csharpPINVOKE.CTriggerMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TriggerMode
  /// </summary>
  /// <returns>The value as TriggerMode</returns>
  public TriggerMode Get() {
    TriggerMode ret = (TriggerMode)neoapi_csharpPINVOKE.CTriggerMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TriggerOverlap
/// </summary>
public enum TriggerOverlap {
  /// <summary>No trigger overlap is permitted.</summary>
  Off = 0,
  /// <summary>Trigger is accepted (latched) at any time during the capture of the previous frame.</summary>
  PreviousFrame,
  /// <summary>Trigger is accepted (latched) at any time during the capture of the previous line.</summary>
  PreviousLine,
  /// <summary>Trigger is accepted immediately after the exposure period.</summary>
  ReadOut
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TriggerOverlap
/// </summary>
public class CTriggerOverlap : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTriggerOverlap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTriggerOverlap_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTriggerOverlap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTriggerOverlap() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTriggerOverlap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TriggerOverlap
    /// </summary>
    public TriggerOverlap Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTriggerOverlap(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTriggerOverlap__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTriggerOverlap(CTriggerOverlap feature) : this(neoapi_csharpPINVOKE.new_CTriggerOverlap__SWIG_1(CTriggerOverlap.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TriggerOverlap
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTriggerOverlap object</returns>
  public CTriggerOverlap Set(TriggerOverlap value) {
    CTriggerOverlap ret = new CTriggerOverlap(neoapi_csharpPINVOKE.CTriggerOverlap_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TriggerOverlap
  /// </summary>
  /// <returns>The value as TriggerOverlap</returns>
  public TriggerOverlap Get() {
    TriggerOverlap ret = (TriggerOverlap)neoapi_csharpPINVOKE.CTriggerOverlap_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TriggerSelector
/// </summary>
public enum TriggerSelector {
  /// <summary>Selects a trigger that controls the duration of the Acquisition of one or many frames. The Acquisition is activated when the trigger signal becomes active and terminated when it goes back to the inactive state.</summary>
  AcquisitionActive = 0,
  /// <summary>Selects a trigger that ends the Acquisition of one or many frames according to AcquisitionMode.</summary>
  AcquisitionEnd,
  /// <summary>Selects a trigger that starts the Acquisition of one or many frames according to AcquisitionMode.</summary>
  AcquisitionStart,
  /// <summary>Selects a trigger controlling the duration of the exposure of one frame (or Line).</summary>
  ExposureActive,
  /// <summary>Selects a trigger controlling the end of the exposure of one Frame (or Line).</summary>
  ExposureEnd,
  /// <summary>Selects a trigger controlling the start of the exposure of one Frame (or Line).</summary>
  ExposureStart,
  /// <summary>Selects a trigger controlling the duration of one frame (mainly used in linescan mode).</summary>
  FrameActive,
  /// <summary>Selects a trigger controlling the duration of the capture of the bursts of frames in an acquisition.</summary>
  FrameBurstActive,
  /// <summary>Selects a trigger ending the capture of the bursts of frames in an acquisition.</summary>
  FrameBurstEnd,
  /// <summary>Selects a trigger starting the capture of the bursts of frames in an acquisition. AcquisitionBurstFrameCount controls the length of each burst unless a FrameBurstEnd trigger is active. The total number of frames captured is also conditioned by AcquisitionFrameCount if AcquisitionMode is MultiFrame.</summary>
  FrameBurstStart,
  /// <summary>Selects a trigger ending the capture of one frame (mainly used in linescan mode).</summary>
  FrameEnd,
  /// <summary>Selects a trigger starting the capture of one frame.</summary>
  FrameStart,
  /// <summary>Selects a trigger starting the capture of one Line of a Frame (mainly used in linescan mode).</summary>
  LineStart,
  /// <summary>Selects a trigger controlling the first duration of a multi-slope exposure. Exposure is continued according to the pre-defined multi-slope settings.</summary>
  MultiSlopeExposureLimit1
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TriggerSelector
/// </summary>
public class CTriggerSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTriggerSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTriggerSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTriggerSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTriggerSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTriggerSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TriggerSelector
    /// </summary>
    public TriggerSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTriggerSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTriggerSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTriggerSelector(CTriggerSelector feature) : this(neoapi_csharpPINVOKE.new_CTriggerSelector__SWIG_1(CTriggerSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TriggerSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTriggerSelector object</returns>
  public CTriggerSelector Set(TriggerSelector value) {
    CTriggerSelector ret = new CTriggerSelector(neoapi_csharpPINVOKE.CTriggerSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TriggerSelector
  /// </summary>
  /// <returns>The value as TriggerSelector</returns>
  public TriggerSelector Get() {
    TriggerSelector ret = (TriggerSelector)neoapi_csharpPINVOKE.CTriggerSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for TriggerSource
/// </summary>
public enum TriggerSource {
  /// <summary>Specifies which Action command to use as internal source for the trigger.</summary>
  Action0 = 0,
  /// <summary>Specifies which Action command to use as internal source for the trigger.</summary>
  Action1,
  /// <summary>Specifies which Action command to use as internal source for the trigger.</summary>
  Action2,
  /// <summary>All trigger sources are active. AVAILABLE: (ExposureMode != TriggerWidth)</summary>
  All,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.</summary>
  CC1,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.</summary>
  CC2,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.</summary>
  CC3,
  /// <summary>Index of the Camera Link physical line and associated I/O control block to use. This ensures a direct mapping between the lines on the frame grabber and on the camera. Applicable to CameraLink products only.</summary>
  CC4,
  /// <summary>Specifies which of the Counter signal to use as internal source for the trigger.</summary>
  Counter0End,
  /// <summary>Specifies which of the Counter signal to use as internal source for the trigger.</summary>
  Counter0Start,
  /// <summary>Specifies which of the Counter signal to use as internal source for the trigger.</summary>
  Counter1End,
  /// <summary>Specifies which of the Counter signal to use as internal source for the trigger.</summary>
  Counter1Start,
  /// <summary>Specifies which of the Counter signal to use as internal source for the trigger.</summary>
  Counter2End,
  /// <summary>Specifies which of the Counter signal to use as internal source for the trigger.</summary>
  Counter2Start,
  /// <summary>Specifies which Encoder signal to use as internal source for the trigger.</summary>
  Encoder0,
  /// <summary>Specifies which Encoder signal to use as internal source for the trigger.</summary>
  Encoder1,
  /// <summary>Specifies which Encoder signal to use as internal source for the trigger.</summary>
  Encoder2,
  /// <summary>Specifies which physical line (or pin) and associated I/O control block to use as external source for the trigger signal.</summary>
  Line0,
  /// <summary>Specifies which physical line (or pin) and associated I/O control block to use as external source for the trigger signal.</summary>
  Line1,
  /// <summary>Specifies which physical line (or pin) and associated I/O control block to use as external source for the trigger signal.</summary>
  Line2,
  /// <summary>Specifies which physical line (or pin) and associated I/O control block to use as external source for the trigger signal. AVAILABLE: Always</summary>
  Line3,
  /// <summary>Specifies which Link Trigger to use as source for the trigger (received from the transport layer).</summary>
  LinkTrigger0,
  /// <summary>Specifies which Link Trigger to use as source for the trigger (received from the transport layer).</summary>
  LinkTrigger1,
  /// <summary>Specifies which Link Trigger to use as source for the trigger (received from the transport layer).</summary>
  LinkTrigger2,
  /// <summary>Specifies which Logic Block signal to use as internal source for the trigger.</summary>
  LogicBlock0,
  /// <summary>Specifies which Logic Block signal to use as internal source for the trigger.</summary>
  LogicBlock1,
  /// <summary>Specifies which Logic Block signal to use as internal source for the trigger.</summary>
  LogicBlock2,
  /// <summary>No trigger source is active. AVAILABLE: (ExposureMode = Timed)</summary>
  Off,
  /// <summary>Specifies that the trigger source will be generated by software using the TriggerSoftware command.</summary>
  Software,
  /// <summary>Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.</summary>
  SoftwareSignal0,
  /// <summary>Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.</summary>
  SoftwareSignal1,
  /// <summary>Specifies that the trigger source will be a signal generated by software using the SoftwareSignalPulse command.</summary>
  SoftwareSignal2,
  /// <summary>Specifies which Timer signal to use as internal source for the trigger.</summary>
  Timer0End,
  /// <summary>Specifies which Timer signal to use as internal source for the trigger.</summary>
  Timer0Start,
  /// <summary>Specifies which Timer signal to use as internal source for the trigger.</summary>
  Timer1End,
  /// <summary>Specifies which Timer signal to use as internal source for the trigger.</summary>
  Timer1Start,
  /// <summary>Specifies which Timer signal to use as internal source for the trigger.</summary>
  Timer2End,
  /// <summary>Specifies which Timer signal to use as internal source for the trigger.</summary>
  Timer2Start,
  /// <summary>Specifies which User Output bit signal to use as internal source for the trigger.</summary>
  UserOutput0,
  /// <summary>Specifies which User Output bit signal to use as internal source for the trigger.</summary>
  UserOutput1,
  /// <summary>Specifies which User Output bit signal to use as internal source for the trigger.</summary>
  UserOutput2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature TriggerSource
/// </summary>
public class CTriggerSource : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CTriggerSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CTriggerSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CTriggerSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CTriggerSource() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CTriggerSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of TriggerSource
    /// </summary>
    public TriggerSource Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CTriggerSource(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CTriggerSource__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CTriggerSource(CTriggerSource feature) : this(neoapi_csharpPINVOKE.new_CTriggerSource__SWIG_1(CTriggerSource.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of TriggerSource
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CTriggerSource object</returns>
  public CTriggerSource Set(TriggerSource value) {
    CTriggerSource ret = new CTriggerSource(neoapi_csharpPINVOKE.CTriggerSource_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of TriggerSource
  /// </summary>
  /// <returns>The value as TriggerSource</returns>
  public TriggerSource Get() {
    TriggerSource ret = (TriggerSource)neoapi_csharpPINVOKE.CTriggerSource_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for UserOutputSelector
/// </summary>
public enum UserOutputSelector {
  /// <summary>Selects the bit 0 of the User Output register.</summary>
  UserOutput0 = 0,
  /// <summary>Selects the bit 1 of the User Output register.</summary>
  UserOutput1,
  /// <summary>Selects the bit 2 of the User Output register.</summary>
  UserOutput2,
  /// <summary>Selects the bit 2 of the User Output register. AVAILABLE: Always</summary>
  UserOutput3,
  /// <summary>Selects the bit 3 of the User Output register. AVAILABLE: Always</summary>
  UserOutput4
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature UserOutputSelector
/// </summary>
public class CUserOutputSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CUserOutputSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CUserOutputSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CUserOutputSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CUserOutputSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CUserOutputSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of UserOutputSelector
    /// </summary>
    public UserOutputSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CUserOutputSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CUserOutputSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CUserOutputSelector(CUserOutputSelector feature) : this(neoapi_csharpPINVOKE.new_CUserOutputSelector__SWIG_1(CUserOutputSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of UserOutputSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CUserOutputSelector object</returns>
  public CUserOutputSelector Set(UserOutputSelector value) {
    CUserOutputSelector ret = new CUserOutputSelector(neoapi_csharpPINVOKE.CUserOutputSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of UserOutputSelector
  /// </summary>
  /// <returns>The value as UserOutputSelector</returns>
  public UserOutputSelector Get() {
    UserOutputSelector ret = (UserOutputSelector)neoapi_csharpPINVOKE.CUserOutputSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for UserSetDefault
/// </summary>
public enum UserSetDefault {
  /// <summary>Select the factory setting user set.</summary>
  Default = 0,
  /// <summary>Select the user set 0.</summary>
  UserSet0,
  /// <summary>Select the user set 1.</summary>
  UserSet1,
  /// <summary>Select the user set 2. AVAILABLE: (UserSet2 was saved before)</summary>
  UserSet2,
  /// <summary>Select the user set 3. AVAILABLE: (UserSet3 was saved before)</summary>
  UserSet3
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature UserSetDefault
/// </summary>
public class CUserSetDefault : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CUserSetDefault(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CUserSetDefault_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CUserSetDefault obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CUserSetDefault() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CUserSetDefault(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of UserSetDefault
    /// </summary>
    public UserSetDefault Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CUserSetDefault(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CUserSetDefault__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CUserSetDefault(CUserSetDefault feature) : this(neoapi_csharpPINVOKE.new_CUserSetDefault__SWIG_1(CUserSetDefault.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of UserSetDefault
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CUserSetDefault object</returns>
  public CUserSetDefault Set(UserSetDefault value) {
    CUserSetDefault ret = new CUserSetDefault(neoapi_csharpPINVOKE.CUserSetDefault_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of UserSetDefault
  /// </summary>
  /// <returns>The value as UserSetDefault</returns>
  public UserSetDefault Get() {
    UserSetDefault ret = (UserSetDefault)neoapi_csharpPINVOKE.CUserSetDefault_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for UserSetFeatureSelector
/// </summary>
public enum UserSetFeatureSelector {
  /// <summary>Number of frames to acquire in MultiFrame Acquisition mode. AVAILABLE: Always.</summary>
  AcquisitionFrameCount = 0,
  /// <summary>Controls the acquisition rate (in Hertz) at which the frames are captured. AVAILABLE: Always</summary>
  AcquisitionFrameRate,
  /// <summary>Controls if the AcquisitionFrameRate feature is writable and used to control the acquisition rate. AVAILABLE: Always</summary>
  AcquisitionFrameRateEnable,
  /// <summary>Sets the acquisition mode of the device. It defines mainly the number of frames to capture during an acquisition and the way the acquisition stops. AVAILABLE: Always</summary>
  AcquisitionMode,
  /// <summary>Provides the device key that allows the device to check the validity of action commands. The device internal assertion of an action signal is only authorized if the ActionDeviceKey and the action device key value in the protocol message are equal. AVAILABLE: Always</summary>
  ActionDeviceKey,
  /// <summary>Provides the key that the device will use to validate the action on reception of the action protocol message. AVAILABLE: Always</summary>
  ActionGroupKey,
  /// <summary>Provides the mask that the device will use to validate the action on reception of the action protocol message. AVAILABLE: Always</summary>
  ActionGroupMask,
  /// <summary>Height of the selected Auto Feature Region (in pixels). AVAILABLE: Always.</summary>
  AutoFeatureHeight,
  /// <summary>Horizontal offset from the origin to the Auto Feature Region (in pixels). AVAILABLE: Always.</summary>
  AutoFeatureOffsetX,
  /// <summary>Vertical offset from the origin to the Auto Feature Region (in pixels). AVAILABLE: Always.</summary>
  AutoFeatureOffsetY,
  /// <summary>Controls the mode of the selected Auto Feature Region. AVAILABLE: Always.</summary>
  AutoFeatureRegionMode,
  /// <summary>The Reference Region of interest. The Auto Feature Region is part of this region and all Auto Feature Region features are refs to this Reference Region. AVAILABLE: Always.</summary>
  AutoFeatureRegionReference,
  /// <summary>Width of the selected Auto Feature Region (in pixels). AVAILABLE: Always.</summary>
  AutoFeatureWidth,
  /// <summary>Shift Factor for 8bit pixel format caculated from 12 bit mode. AVAILABLE: Always.</summary>
  BOPFShift,
  /// <summary>Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted. AVAILABLE: Always.</summary>
  BalanceWhiteAuto,
  /// <summary>Number of horizontal photo-sensitive cells to combine together. AVAILABLE: Always</summary>
  BinningHorizontal,
  /// <summary>Sets the mode to use to combine horizontal photo-sensitive cells together when BinningHorizontal is used. AVAILABLE: Always</summary>
  BinningHorizontalMode,
  /// <summary>Number of vertical photo-sensitive cells to combine together. AVAILABLE: Always</summary>
  BinningVertical,
  /// <summary>Sets the mode used to combine horizontal photo-sensitive cells together when BinningVertical is used. AVAILABLE: Always</summary>
  BinningVerticalMode,
  /// <summary>Controls the analog black level as an absolute physical value. AVAILABLE: Always</summary>
  BlackLevel,
  /// <summary>Sets the nominal value for brightness in percent of full scale. It will be adjust with consider the setting in BrightnessAutoPriority. AVAILABLE: Always.</summary>
  BrightnessAutoNominalValue,
  /// <summary>The feature set the highest priority auto feature to adjust the brightness. AVAILABLE: Always.</summary>
  BrightnessAutoPriority,
  /// <summary>Enables the inclusion of the selected Chunk data in the payload of the image. AVAILABLE: Always</summary>
  ChunkEnable,
  /// <summary>Activates the inclusion of Chunk data in the payload of the image. AVAILABLE: Always</summary>
  ChunkModeActive,
  /// <summary>Controls the mode for automatic adjusting the gains of the active transformation matrix. AVAILABLE: Always.</summary>
  ColorTransformationAuto,
  /// <summary>Represents the value of the selected Gain factor or Offset inside the Transformation matrix. AVAILABLE: Always.</summary>
  ColorTransformationValue,
  /// <summary>Sets the duration (or number of events) before the CounterEnd event is generated. AVAILABLE: Always</summary>
  CounterDuration,
  /// <summary>Selects the Activation mode Event Source signal. AVAILABLE: Always</summary>
  CounterEventActivation,
  /// <summary>Select the events that will be the source to increment the Counter. AVAILABLE: Always</summary>
  CounterEventSource,
  /// <summary>Selects the Activation mode of the Counter Reset Source signal. AVAILABLE: Always</summary>
  CounterResetActivation,
  /// <summary>Selects the signals that will be the source to reset the Counter. AVAILABLE: Always</summary>
  CounterResetSource,
  /// <summary>Enable the correction of defect pixels. AVAILABLE: Always</summary>
  DefectPixelCorrection,
  /// <summary>Limits the maximum bandwidth of the data that will be streamed out by the device on the selected Link. If necessary, delays will be uniformly inserted between transport layer packets in order to control the peak bandwidth. AVAILABLE: Always</summary>
  DeviceLinkThroughputLimit,
  /// <summary>Device - Specific</summary>
  DeviceSpecific,
  /// <summary>Temperature threshold for selected status transition in degrees Celsius (C). AVAILABLE: Always</summary>
  DeviceTemperatureStatusTransition,
  /// <summary>Activate or deactivate the notification to the host application of the occurrence of the selected Event. AVAILABLE: Always</summary>
  EventNotification,
  /// <summary>Sets the automatic exposure mode when ExposureMode is Timed. The exact algorithm used to implement this control is device-specific. AVAILABLE: Always.</summary>
  ExposureAuto,
  /// <summary>Maximal value of ExposureTime calculable by exposure auto algorithm. AVAILABLE: Always.</summary>
  ExposureAutoMaxValue,
  /// <summary>Minimal value of ExposureTime calculable by exposure auto algorithm. AVAILABLE: Always.</summary>
  ExposureAutoMinValue,
  /// <summary>Sets the operation mode of the Exposure (or shutter). AVAILABLE: Always</summary>
  ExposureMode,
  /// <summary>Sets the Exposure time when ExposureMode is Timed and ExposureAuto is Off. This controls the duration where the photosensitive cells are exposed to light. AVAILABLE: Always</summary>
  ExposureTime,
  /// <summary>Fixed pattern noise correction. AVAILABLE: Always</summary>
  FixedPatternNoiseCorrection,
  /// <summary>Sets the frame counter, which is part of the chunk data too. AVAILABLE: Always</summary>
  FrameCounter,
  /// <summary>Controls the selected gain as an absolute physical value. This is an amplification factor applied to the video signal. AVAILABLE: Always</summary>
  Gain,
  /// <summary>Sets the automatic gain control (AGC) mode. The exact algorithm used to implement AGC is device-specific. AVAILABLE: Always.</summary>
  GainAuto,
  /// <summary>Maximal value of Gain calculable by gain auto algorithm. AVAILABLE: (GainSelector = All).</summary>
  GainAutoMaxValue,
  /// <summary>Minimal value of Gain calculable by gain auto algorithm. AVAILABLE: (GainSelector = All).</summary>
  GainAutoMinValue,
  /// <summary>Controls the gamma correction of pixel intensity. This is typically used to compensate for non-linearity of the display system (such as CRT). AVAILABLE: Always.</summary>
  Gamma,
  /// <summary>This feature indicates the delay (in timestamp counter unit) to insert between each block (image) for this stream channel. AVAILABLE: Always</summary>
  GevSCFTD,
  /// <summary>Controls the delay (in timestamp counter unit) to insert between each packet for this stream channel. This can be used as a crude flow-control mechanism if the application or the network infrastructure cannot keep up with the packets coming from the device. AVAILABLE: Always</summary>
  GevSCPD,
  /// <summary>Height of the selected Auto Feature Region (in pixels). AVAILABLE: Always.</summary>
  Height,
  /// <summary>Describes the content of the selected LUT. AVAILABLE: Always.</summary>
  LUTContent,
  /// <summary>Activates the selected LUT. AVAILABLE: Always.</summary>
  LUTEnable,
  /// <summary>Returns the Value at entry LUTIndex of the LUT selected by LUTSelector. AVAILABLE: Always.</summary>
  LUTValue,
  /// <summary>Sets the absolute value of the selected line debouncer time in microseconds for switch from low to high. AVAILABLE: Always</summary>
  LineDebouncerHighTimeAbs,
  /// <summary>Sets the absolute value of the selected line debouncer time in microseconds for switch from high to low AVAILABLE: Always</summary>
  LineDebouncerLowTimeAbs,
  /// <summary>Controls the inversion of the signal of the selected input or output Line. AVAILABLE: Always</summary>
  LineInverter,
  /// <summary>Controls if the physical Line is used to Input or Output a signal. AVAILABLE: Always.</summary>
  LineMode,
  /// <summary>Sets the duration in microseconds. AVAILABLE: Always.</summary>
  LinePWMDuration,
  /// <summary>Offers the duty cycle in percent. AVAILABLE: Always.</summary>
  LinePWMDutyCycle,
  /// <summary>Sets the maximum duration in microseconds. AVAILABLE: Always.</summary>
  LinePWMMaxDuration,
  /// <summary>Offers the maximal duty cycle in percent. AVAILABLE: Always.</summary>
  LinePWMMaxDutyCycle,
  /// <summary>Selects the PWM mode of the selected output line. AVAILABLE: Always.</summary>
  LinePWMMode,
  /// <summary>Selects which internal acquisition or I/O source signal to output on the selected Line. LineMode must be Output. AVAILABLE: Always</summary>
  LineSource,
  /// <summary>Horizontal offset from the origin to the Auto Feature Region (in pixels). AVAILABLE: Always.</summary>
  OffsetX,
  /// <summary>Vertical offset from the origin to the Auto Feature Region (in pixels). AVAILABLE: Always.</summary>
  OffsetY,
  /// <summary>Format of the pixels provided by the device. It represents all the information provided by PixelCoding, PixelSize, PixelColorFilter combined in a single feature. AVAILABLE: Always</summary>
  PixelFormat,
  /// <summary>Enable the Precision Time Protocol (PTP). AVAILABLE: Always.</summary>
  PtpEnable,
  /// <summary>Selects the PTP clock type the device will act as. AVAILABLE: Always.</summary>
  PtpMode,
  /// <summary>Specifies the operation mode of the readout for the acquisition. AVAILABLE: Always</summary>
  ReadoutMode,
  /// <summary>Flip horizontally the image sent by the device. The Region of interest is applied after the flipping. AVAILABLE: Always</summary>
  ReverseX,
  /// <summary>Flip vertically the image sent by the device. The Region of interest is applied after the flipping. AVAILABLE: Always</summary>
  ReverseY,
  /// <summary>The feature controls the sensors AD digitization in bits per pixels. AVAILABLE: Always.</summary>
  SensorADDigitization,
  /// <summary>Sets the shutter mode of the device. AVAILABLE: Always.</summary>
  SensorShutterMode,
  /// <summary>Controls if the sequencer mechanism is active. AVAILABLE: Always</summary>
  SequencerMode,
  /// <summary>Specifies the next sequencer set. AVAILABLE: Always</summary>
  SequencerSetNext,
  /// <summary>Sets the initial/start sequencer set, which is the first set used within a sequencer. AVAILABLE: Always</summary>
  SequencerSetStart,
  /// <summary>Specifies the activation mode of the sequencer trigger. AVAILABLE: Always</summary>
  SequencerTriggerActivation,
  /// <summary>Specifies the internal signal or physical input line to use as the sequencer trigger source. AVAILABLE: Always</summary>
  SequencerTriggerSource,
  /// <summary>Controls if short exposure time should be supported. AVAILABLE: Always</summary>
  ShortExposureTimeEnable,
  /// <summary>Selects the type of test pattern that is generated by the device as image source. AVAILABLE: Always</summary>
  TestPattern,
  /// <summary>Sets the duration (in microseconds) of the delay to apply at the reception of a trigger before starting the Timer. AVAILABLE: Always</summary>
  TimerDelay,
  /// <summary>Sets the duration (in microseconds) of the Timer pulse. AVAILABLE: Always</summary>
  TimerDuration,
  /// <summary>Selects the activation mode of the trigger to start the Timer. AVAILABLE: Always</summary>
  TimerTriggerActivation,
  /// <summary>Selects the source of the trigger to start the Timer. AVAILABLE: Always</summary>
  TimerTriggerSource,
  /// <summary>Starts the streaming of data blocks out of the device. This feature must be available when the TransferControlMode is set to "UserControled". If the TransferStart feature is not writable (locked), the application should not start the transfer and should avoid using the feature until it becomes writable again. AVAILABLE: Always</summary>
  TransferStart,
  /// <summary>Stops the streaming of data Block(s). The current block transmission will be completed. This feature must be available when the TransferControlMode is set to "UserControlled". AVAILABLE: Always</summary>
  TransferStop,
  /// <summary>Specifies the activation mode of the sequencer trigger. AVAILABLE: Always</summary>
  TriggerActivation,
  /// <summary>Specifies the delay in microseconds (us) to apply after the trigger reception before activating it. AVAILABLE: Always</summary>
  TriggerDelay,
  /// <summary>Controls if the selected trigger is active. AVAILABLE: Always</summary>
  TriggerMode,
  /// <summary>Specifies the internal signal or physical input line to use as the sequencer trigger source. AVAILABLE: Always</summary>
  TriggerSource,
  /// <summary>Sets the value of the bit selected by UserOutputSelector. AVAILABLE: Always</summary>
  UserOutputValue,
  /// <summary>Sets the value of all the bits of the User Output register. It is subject to the UserOutputValueAllMask. AVAILABLE: Always</summary>
  UserOutputValueAll,
  /// <summary>Width of the selected Auto Feature Region (in pixels). AVAILABLE: Always.</summary>
  Width
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature UserSetFeatureSelector
/// </summary>
public class CUserSetFeatureSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CUserSetFeatureSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CUserSetFeatureSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CUserSetFeatureSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CUserSetFeatureSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CUserSetFeatureSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of UserSetFeatureSelector
    /// </summary>
    public UserSetFeatureSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CUserSetFeatureSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CUserSetFeatureSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CUserSetFeatureSelector(CUserSetFeatureSelector feature) : this(neoapi_csharpPINVOKE.new_CUserSetFeatureSelector__SWIG_1(CUserSetFeatureSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of UserSetFeatureSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CUserSetFeatureSelector object</returns>
  public CUserSetFeatureSelector Set(UserSetFeatureSelector value) {
    CUserSetFeatureSelector ret = new CUserSetFeatureSelector(neoapi_csharpPINVOKE.CUserSetFeatureSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of UserSetFeatureSelector
  /// </summary>
  /// <returns>The value as UserSetFeatureSelector</returns>
  public UserSetFeatureSelector Get() {
    UserSetFeatureSelector ret = (UserSetFeatureSelector)neoapi_csharpPINVOKE.CUserSetFeatureSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for UserSetSelector
/// </summary>
public enum UserSetSelector {
  /// <summary>Selects the factory setting user set.</summary>
  Default = 0,
  /// <summary>Selects the user set 0.</summary>
  UserSet0,
  /// <summary>Selects the user set 1.</summary>
  UserSet1,
  /// <summary>Selects the user set 2. AVAILABLE: Always</summary>
  UserSet2,
  /// <summary>Selects the user set 3. AVAILABLE: Always</summary>
  UserSet3
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature UserSetSelector
/// </summary>
public class CUserSetSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CUserSetSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CUserSetSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CUserSetSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CUserSetSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CUserSetSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of UserSetSelector
    /// </summary>
    public UserSetSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CUserSetSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CUserSetSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CUserSetSelector(CUserSetSelector feature) : this(neoapi_csharpPINVOKE.new_CUserSetSelector__SWIG_1(CUserSetSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of UserSetSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CUserSetSelector object</returns>
  public CUserSetSelector Set(UserSetSelector value) {
    CUserSetSelector ret = new CUserSetSelector(neoapi_csharpPINVOKE.CUserSetSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of UserSetSelector
  /// </summary>
  /// <returns>The value as UserSetSelector</returns>
  public UserSetSelector Get() {
    UserSetSelector ret = (UserSetSelector)neoapi_csharpPINVOKE.CUserSetSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boCalibrationDataConfigurationMode
/// </summary>
public enum boCalibrationDataConfigurationMode {
  /// <summary>Disables the bo calibration data configuration mode.</summary>
  Off = 0,
  /// <summary>Enables the bo calibration data configuration mode.</summary>
  On
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boCalibrationDataConfigurationMode
/// </summary>
public class CboCalibrationDataConfigurationMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboCalibrationDataConfigurationMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboCalibrationDataConfigurationMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboCalibrationDataConfigurationMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboCalibrationDataConfigurationMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboCalibrationDataConfigurationMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boCalibrationDataConfigurationMode
    /// </summary>
    public boCalibrationDataConfigurationMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboCalibrationDataConfigurationMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboCalibrationDataConfigurationMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboCalibrationDataConfigurationMode(CboCalibrationDataConfigurationMode feature) : this(neoapi_csharpPINVOKE.new_CboCalibrationDataConfigurationMode__SWIG_1(CboCalibrationDataConfigurationMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boCalibrationDataConfigurationMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboCalibrationDataConfigurationMode object</returns>
  public CboCalibrationDataConfigurationMode Set(boCalibrationDataConfigurationMode value) {
    CboCalibrationDataConfigurationMode ret = new CboCalibrationDataConfigurationMode(neoapi_csharpPINVOKE.CboCalibrationDataConfigurationMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boCalibrationDataConfigurationMode
  /// </summary>
  /// <returns>The value as boCalibrationDataConfigurationMode</returns>
  public boCalibrationDataConfigurationMode Get() {
    boCalibrationDataConfigurationMode ret = (boCalibrationDataConfigurationMode)neoapi_csharpPINVOKE.CboCalibrationDataConfigurationMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boCalibrationMatrixSelector
/// </summary>
public enum boCalibrationMatrixSelector {
  /// <summary>Selects the camera matrix.</summary>
  CameraMatrix = 0,
  /// <summary>Selects the camera matrix with consideration of the geometry distortion.</summary>
  NewCameraMatrix
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boCalibrationMatrixSelector
/// </summary>
public class CboCalibrationMatrixSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboCalibrationMatrixSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboCalibrationMatrixSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboCalibrationMatrixSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboCalibrationMatrixSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboCalibrationMatrixSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boCalibrationMatrixSelector
    /// </summary>
    public boCalibrationMatrixSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboCalibrationMatrixSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboCalibrationMatrixSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboCalibrationMatrixSelector(CboCalibrationMatrixSelector feature) : this(neoapi_csharpPINVOKE.new_CboCalibrationMatrixSelector__SWIG_1(CboCalibrationMatrixSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boCalibrationMatrixSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboCalibrationMatrixSelector object</returns>
  public CboCalibrationMatrixSelector Set(boCalibrationMatrixSelector value) {
    CboCalibrationMatrixSelector ret = new CboCalibrationMatrixSelector(neoapi_csharpPINVOKE.CboCalibrationMatrixSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boCalibrationMatrixSelector
  /// </summary>
  /// <returns>The value as boCalibrationMatrixSelector</returns>
  public boCalibrationMatrixSelector Get() {
    boCalibrationMatrixSelector ret = (boCalibrationMatrixSelector)neoapi_csharpPINVOKE.CboCalibrationMatrixSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boCalibrationMatrixValueSelector
/// </summary>
public enum boCalibrationMatrixValueSelector {
  /// <summary>Selects matrix value at line 1 column 1.</summary>
  Value11 = 0,
  /// <summary>Selects matrix value at line 1 column 2.</summary>
  Value12,
  /// <summary>Selects matrix value at line 1 column 3.</summary>
  Value13,
  /// <summary>Selects matrix value at line 2 column 1.</summary>
  Value21,
  /// <summary>Selects matrix value at line 2 column 2.</summary>
  Value22,
  /// <summary>Selects matrix value at line 2 column 3.</summary>
  Value23,
  /// <summary>Selects matrix value at line 3 column 1.</summary>
  Value31,
  /// <summary>Selects matrix value at line 3 column 2.</summary>
  Value32,
  /// <summary>Selects matrix value at line 3 column 3.</summary>
  Value33
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boCalibrationMatrixValueSelector
/// </summary>
public class CboCalibrationMatrixValueSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboCalibrationMatrixValueSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboCalibrationMatrixValueSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboCalibrationMatrixValueSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboCalibrationMatrixValueSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboCalibrationMatrixValueSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boCalibrationMatrixValueSelector
    /// </summary>
    public boCalibrationMatrixValueSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboCalibrationMatrixValueSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboCalibrationMatrixValueSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboCalibrationMatrixValueSelector(CboCalibrationMatrixValueSelector feature) : this(neoapi_csharpPINVOKE.new_CboCalibrationMatrixValueSelector__SWIG_1(CboCalibrationMatrixValueSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boCalibrationMatrixValueSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboCalibrationMatrixValueSelector object</returns>
  public CboCalibrationMatrixValueSelector Set(boCalibrationMatrixValueSelector value) {
    CboCalibrationMatrixValueSelector ret = new CboCalibrationMatrixValueSelector(neoapi_csharpPINVOKE.CboCalibrationMatrixValueSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boCalibrationMatrixValueSelector
  /// </summary>
  /// <returns>The value as boCalibrationMatrixValueSelector</returns>
  public boCalibrationMatrixValueSelector Get() {
    boCalibrationMatrixValueSelector ret = (boCalibrationMatrixValueSelector)neoapi_csharpPINVOKE.CboCalibrationMatrixValueSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boCalibrationVectorSelector
/// </summary>
public enum boCalibrationVectorSelector {
  /// <summary>Selects the output rotation vector.</summary>
  rvec = 0,
  /// <summary>Selects the output translation vector.</summary>
  tvec
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boCalibrationVectorSelector
/// </summary>
public class CboCalibrationVectorSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboCalibrationVectorSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboCalibrationVectorSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboCalibrationVectorSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboCalibrationVectorSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboCalibrationVectorSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boCalibrationVectorSelector
    /// </summary>
    public boCalibrationVectorSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboCalibrationVectorSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboCalibrationVectorSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboCalibrationVectorSelector(CboCalibrationVectorSelector feature) : this(neoapi_csharpPINVOKE.new_CboCalibrationVectorSelector__SWIG_1(CboCalibrationVectorSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boCalibrationVectorSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboCalibrationVectorSelector object</returns>
  public CboCalibrationVectorSelector Set(boCalibrationVectorSelector value) {
    CboCalibrationVectorSelector ret = new CboCalibrationVectorSelector(neoapi_csharpPINVOKE.CboCalibrationVectorSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boCalibrationVectorSelector
  /// </summary>
  /// <returns>The value as boCalibrationVectorSelector</returns>
  public boCalibrationVectorSelector Get() {
    boCalibrationVectorSelector ret = (boCalibrationVectorSelector)neoapi_csharpPINVOKE.CboCalibrationVectorSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boCalibrationVectorValueSelector
/// </summary>
public enum boCalibrationVectorValueSelector {
  /// <summary>Selects vector value 1.</summary>
  Value1 = 0,
  /// <summary>Selects vector value 2.</summary>
  Value2,
  /// <summary>Selects vector value 3.</summary>
  Value3
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boCalibrationVectorValueSelector
/// </summary>
public class CboCalibrationVectorValueSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboCalibrationVectorValueSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboCalibrationVectorValueSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboCalibrationVectorValueSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboCalibrationVectorValueSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboCalibrationVectorValueSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boCalibrationVectorValueSelector
    /// </summary>
    public boCalibrationVectorValueSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboCalibrationVectorValueSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboCalibrationVectorValueSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboCalibrationVectorValueSelector(CboCalibrationVectorValueSelector feature) : this(neoapi_csharpPINVOKE.new_CboCalibrationVectorValueSelector__SWIG_1(CboCalibrationVectorValueSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boCalibrationVectorValueSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboCalibrationVectorValueSelector object</returns>
  public CboCalibrationVectorValueSelector Set(boCalibrationVectorValueSelector value) {
    CboCalibrationVectorValueSelector ret = new CboCalibrationVectorValueSelector(neoapi_csharpPINVOKE.CboCalibrationVectorValueSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boCalibrationVectorValueSelector
  /// </summary>
  /// <returns>The value as boCalibrationVectorValueSelector</returns>
  public boCalibrationVectorValueSelector Get() {
    boCalibrationVectorValueSelector ret = (boCalibrationVectorValueSelector)neoapi_csharpPINVOKE.CboCalibrationVectorValueSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boGeometryDistortionValueSelector
/// </summary>
public enum boGeometryDistortionValueSelector {
  /// <summary>Selects geometry distortion value k1.</summary>
  k1 = 0,
  /// <summary>Selects geometry distortion value k2.</summary>
  k2,
  /// <summary>Selects geometry distortion value k3.</summary>
  k3,
  /// <summary>Selects geometry distortion value p1.</summary>
  p1,
  /// <summary>Selects geometry distortion value p2.</summary>
  p2
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boGeometryDistortionValueSelector
/// </summary>
public class CboGeometryDistortionValueSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboGeometryDistortionValueSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboGeometryDistortionValueSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboGeometryDistortionValueSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboGeometryDistortionValueSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboGeometryDistortionValueSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boGeometryDistortionValueSelector
    /// </summary>
    public boGeometryDistortionValueSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboGeometryDistortionValueSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboGeometryDistortionValueSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboGeometryDistortionValueSelector(CboGeometryDistortionValueSelector feature) : this(neoapi_csharpPINVOKE.new_CboGeometryDistortionValueSelector__SWIG_1(CboGeometryDistortionValueSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boGeometryDistortionValueSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboGeometryDistortionValueSelector object</returns>
  public CboGeometryDistortionValueSelector Set(boGeometryDistortionValueSelector value) {
    CboGeometryDistortionValueSelector ret = new CboGeometryDistortionValueSelector(neoapi_csharpPINVOKE.CboGeometryDistortionValueSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boGeometryDistortionValueSelector
  /// </summary>
  /// <returns>The value as boGeometryDistortionValueSelector</returns>
  public boGeometryDistortionValueSelector Get() {
    boGeometryDistortionValueSelector ret = (boGeometryDistortionValueSelector)neoapi_csharpPINVOKE.CboGeometryDistortionValueSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boSerialConfigBaudRate
/// </summary>
public enum boSerialConfigBaudRate {
  /// <summary>Serial interface clock frequency is 115200 Hz.</summary>
  Baudrate115200Hz = 0,
  /// <summary>Serial interface clock frequency is 1843200 Hz.</summary>
  Baudrate1843200Hz,
  /// <summary>Serial interface clock frequency is 19200 Hz.</summary>
  Baudrate19200Hz,
  /// <summary>Serial interface clock frequency is 230400 Hz.</summary>
  Baudrate230400Hz,
  /// <summary>Serial interface clock frequency is 38400 Hz.</summary>
  Baudrate38400Hz,
  /// <summary>Serial interface clock frequency is 460800 Hz.</summary>
  Baudrate460800Hz,
  /// <summary>Serial interface clock frequency is 57600 Hz.</summary>
  Baudrate57600Hz,
  /// <summary>Serial interface clock frequency is 921600 Hz.</summary>
  Baudrate921600Hz,
  /// <summary>Serial interface clock frequency is 9600 Hz.</summary>
  Baudrate9600Hz
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boSerialConfigBaudRate
/// </summary>
public class CboSerialConfigBaudRate : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboSerialConfigBaudRate(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboSerialConfigBaudRate_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboSerialConfigBaudRate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboSerialConfigBaudRate() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboSerialConfigBaudRate(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boSerialConfigBaudRate
    /// </summary>
    public boSerialConfigBaudRate Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboSerialConfigBaudRate(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboSerialConfigBaudRate__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboSerialConfigBaudRate(CboSerialConfigBaudRate feature) : this(neoapi_csharpPINVOKE.new_CboSerialConfigBaudRate__SWIG_1(CboSerialConfigBaudRate.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boSerialConfigBaudRate
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboSerialConfigBaudRate object</returns>
  public CboSerialConfigBaudRate Set(boSerialConfigBaudRate value) {
    CboSerialConfigBaudRate ret = new CboSerialConfigBaudRate(neoapi_csharpPINVOKE.CboSerialConfigBaudRate_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boSerialConfigBaudRate
  /// </summary>
  /// <returns>The value as boSerialConfigBaudRate</returns>
  public boSerialConfigBaudRate Get() {
    boSerialConfigBaudRate ret = (boSerialConfigBaudRate)neoapi_csharpPINVOKE.CboSerialConfigBaudRate_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boSerialConfigDataBits
/// </summary>
public enum boSerialConfigDataBits {
  /// <summary>Serial data bits are 8.</summary>
  Eight = 0,
  /// <summary>Serial data bits are 5.</summary>
  Five,
  /// <summary>Serial data bits are 7.</summary>
  Seven,
  /// <summary>Serial data bits are 6.</summary>
  Six
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boSerialConfigDataBits
/// </summary>
public class CboSerialConfigDataBits : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboSerialConfigDataBits(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboSerialConfigDataBits_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboSerialConfigDataBits obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboSerialConfigDataBits() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboSerialConfigDataBits(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boSerialConfigDataBits
    /// </summary>
    public boSerialConfigDataBits Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboSerialConfigDataBits(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboSerialConfigDataBits__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboSerialConfigDataBits(CboSerialConfigDataBits feature) : this(neoapi_csharpPINVOKE.new_CboSerialConfigDataBits__SWIG_1(CboSerialConfigDataBits.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boSerialConfigDataBits
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboSerialConfigDataBits object</returns>
  public CboSerialConfigDataBits Set(boSerialConfigDataBits value) {
    CboSerialConfigDataBits ret = new CboSerialConfigDataBits(neoapi_csharpPINVOKE.CboSerialConfigDataBits_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boSerialConfigDataBits
  /// </summary>
  /// <returns>The value as boSerialConfigDataBits</returns>
  public boSerialConfigDataBits Get() {
    boSerialConfigDataBits ret = (boSerialConfigDataBits)neoapi_csharpPINVOKE.CboSerialConfigDataBits_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boSerialConfigParity
/// </summary>
public enum boSerialConfigParity {
  /// <summary>Serial parity is even.</summary>
  Even = 0,
  /// <summary>Serial parity is mark.</summary>
  Mark,
  /// <summary>Serial parity is none.</summary>
  None,
  /// <summary>Serial parity is odd.</summary>
  Odd,
  /// <summary>Serial parity is space.</summary>
  Space
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boSerialConfigParity
/// </summary>
public class CboSerialConfigParity : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboSerialConfigParity(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboSerialConfigParity_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboSerialConfigParity obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboSerialConfigParity() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboSerialConfigParity(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boSerialConfigParity
    /// </summary>
    public boSerialConfigParity Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboSerialConfigParity(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboSerialConfigParity__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboSerialConfigParity(CboSerialConfigParity feature) : this(neoapi_csharpPINVOKE.new_CboSerialConfigParity__SWIG_1(CboSerialConfigParity.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boSerialConfigParity
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboSerialConfigParity object</returns>
  public CboSerialConfigParity Set(boSerialConfigParity value) {
    CboSerialConfigParity ret = new CboSerialConfigParity(neoapi_csharpPINVOKE.CboSerialConfigParity_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boSerialConfigParity
  /// </summary>
  /// <returns>The value as boSerialConfigParity</returns>
  public boSerialConfigParity Get() {
    boSerialConfigParity ret = (boSerialConfigParity)neoapi_csharpPINVOKE.CboSerialConfigParity_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boSerialConfigStopBits
/// </summary>
public enum boSerialConfigStopBits {
  /// <summary>Serial stop bit is one.</summary>
  One = 0,
  /// <summary>Serial stop bit is one pt five.</summary>
  OnePtFive,
  /// <summary>Serial stop bits are two.</summary>
  Two
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boSerialConfigStopBits
/// </summary>
public class CboSerialConfigStopBits : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboSerialConfigStopBits(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboSerialConfigStopBits_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboSerialConfigStopBits obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboSerialConfigStopBits() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboSerialConfigStopBits(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boSerialConfigStopBits
    /// </summary>
    public boSerialConfigStopBits Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboSerialConfigStopBits(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboSerialConfigStopBits__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboSerialConfigStopBits(CboSerialConfigStopBits feature) : this(neoapi_csharpPINVOKE.new_CboSerialConfigStopBits__SWIG_1(CboSerialConfigStopBits.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boSerialConfigStopBits
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboSerialConfigStopBits object</returns>
  public CboSerialConfigStopBits Set(boSerialConfigStopBits value) {
    CboSerialConfigStopBits ret = new CboSerialConfigStopBits(neoapi_csharpPINVOKE.CboSerialConfigStopBits_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boSerialConfigStopBits
  /// </summary>
  /// <returns>The value as boSerialConfigStopBits</returns>
  public boSerialConfigStopBits Get() {
    boSerialConfigStopBits ret = (boSerialConfigStopBits)neoapi_csharpPINVOKE.CboSerialConfigStopBits_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boSerialMode
/// </summary>
public enum boSerialMode {
  /// <summary>Bypass mode. UART1 of Power and Process Interface and UART0 Interface are connected.</summary>
  Bypass = 0,
  /// <summary>The serial interface is off and shall not be used.</summary>
  Off,
  /// <summary>The serial interface shall be used for optic control.</summary>
  OpticControl,
  /// <summary>The serial interface shall be used for bo serial control.</summary>
  boSerialControl
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boSerialMode
/// </summary>
public class CboSerialMode : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboSerialMode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboSerialMode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboSerialMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboSerialMode() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboSerialMode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boSerialMode
    /// </summary>
    public boSerialMode Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboSerialMode(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboSerialMode__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboSerialMode(CboSerialMode feature) : this(neoapi_csharpPINVOKE.new_CboSerialMode__SWIG_1(CboSerialMode.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boSerialMode
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboSerialMode object</returns>
  public CboSerialMode Set(boSerialMode value) {
    CboSerialMode ret = new CboSerialMode(neoapi_csharpPINVOKE.CboSerialMode_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boSerialMode
  /// </summary>
  /// <returns>The value as boSerialMode</returns>
  public boSerialMode Get() {
    boSerialMode ret = (boSerialMode)neoapi_csharpPINVOKE.CboSerialMode_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for boSerialSelector
/// </summary>
public enum boSerialSelector {
  /// <summary>Selects the UART0 Interface which can be used, for example, to control optical components.</summary>
  UART0 = 0,
  /// <summary>Selects the UART1 Interface which is part of the Power and Process Interface and can be used for RS232 communication.</summary>
  UART1
}

}
namespace NeoAPI {

/// <summary>
/// Class to control Feature boSerialSelector
/// </summary>
public class CboSerialSelector : EnumerationFeature {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CboSerialSelector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.CboSerialSelector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CboSerialSelector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CboSerialSelector() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CboSerialSelector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

    #region Property Value
    /// <summary>
    /// Access to the value of boSerialSelector
    /// </summary>
    public boSerialSelector Value
    {
        get
        {
            return Get();
        }
        set
        {
            Set(value);
        }
    }
    #endregion

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">Pointer to the camera</param>
  /// <param name="name">Name of the Feature</param>
  public CboSerialSelector(CamBase cam, string name) : this(neoapi_csharpPINVOKE.new_CboSerialSelector__SWIG_0(CamBase.getCPtr(cam), name), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="feature">The feature to copy</param>
  public CboSerialSelector(CboSerialSelector feature) : this(neoapi_csharpPINVOKE.new_CboSerialSelector__SWIG_1(CboSerialSelector.getCPtr(feature)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Set the value of boSerialSelector
  /// </summary>
  /// <param name="value">The value to set</param>
  /// <returns>The CboSerialSelector object</returns>
  public CboSerialSelector Set(boSerialSelector value) {
    CboSerialSelector ret = new CboSerialSelector(neoapi_csharpPINVOKE.CboSerialSelector_Set(swigCPtr, (int)value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get the value of boSerialSelector
  /// </summary>
  /// <returns>The value as boSerialSelector</returns>
  public boSerialSelector Get() {
    boSerialSelector ret = (boSerialSelector)neoapi_csharpPINVOKE.CboSerialSelector_Get(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Class to control  GenICam features
/// </summary>
public class FeatureAccess : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FeatureAccess(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FeatureAccess obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~FeatureAccess() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_FeatureAccess(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  private object parentReference;
  internal void addReference(object parent) {
    parentReference = parent;
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="cam">camera object</param>
  public FeatureAccess(CamBase cam) : this(neoapi_csharpPINVOKE.new_FeatureAccess__SWIG_0(CamBase.getCPtr(cam)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Constructor
  /// </summary>
  /// <param name="access">The feature access to copy</param>
  public FeatureAccess(FeatureAccess access) : this(neoapi_csharpPINVOKE.new_FeatureAccess__SWIG_1(FeatureAccess.getCPtr(access)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Aborts the Acquisition immediately. This will end the capture without completing the current Frame or waiting on a trigger. If no Acquisition is in progress, the command is ignored.
  /// </summary>
  public CommandFeature AcquisitionAbort {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionAbort_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Number of frames to acquire in MultiFrame Acquisition mode.
  /// </summary>
  public IntegerFeature AcquisitionFrameCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AcquisitionFrameCount_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionFrameCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the acquisition rate (in Hertz) at which the frames are captured.
  /// </summary>
  public DoubleFeature AcquisitionFrameRate {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AcquisitionFrameRate_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionFrameRate_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls if the AcquisitionFrameRate feature is writable and used to control the acquisition rate. Otherwise, the acquisition rate is implicitly controlled by the combination of other features like ExposureTime, etc...
  /// </summary>
  public BoolFeature AcquisitionFrameRateEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AcquisitionFrameRateEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionFrameRateEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the maximal acquisition rate (in Hertz) at which the frames are captured.
  /// </summary>
  public DoubleFeature AcquisitionFrameRateLimit {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AcquisitionFrameRateLimit_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionFrameRateLimit_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the acquisition mode of the device. It defines mainly the number of frames to capture during an acquisition and the way the acquisition stops.
  /// </summary>
  public CAcquisitionMode AcquisitionMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AcquisitionMode_set(swigCPtr, CAcquisitionMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionMode_get(swigCPtr);
      CAcquisitionMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAcquisitionMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Starts the Acquisition of the device. The number of frames captured is specified by AcquisitionMode.
  /// </summary>
  public CommandFeature AcquisitionStart {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls if the Acquisition of the device starts automatically at device start or not.
  /// </summary>
  public BoolFeature AcquisitionStartAuto {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AcquisitionStartAuto_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionStartAuto_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Reads the state of the internal acquisition signal selected using AcquisitionStatusSelector.
  /// </summary>
  public BoolFeature AcquisitionStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AcquisitionStatus_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionStatus_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the internal acquisition signal to read using AcquisitionStatus.
  /// </summary>
  public CAcquisitionStatusSelector AcquisitionStatusSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AcquisitionStatusSelector_set(swigCPtr, CAcquisitionStatusSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionStatusSelector_get(swigCPtr);
      CAcquisitionStatusSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAcquisitionStatusSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Stops the Acquisition of the device at the end of the current Frame. It is mainly used when AcquisitionMode is Continuous but can be used in any acquisition mode.
  /// </summary>
  public CommandFeature AcquisitionStop {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AcquisitionStop_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Provides the device key that allows the device to check the validity of action commands. The device internal assertion of an action signal is only authorized if the ActionDeviceKey and the action device key value in the protocol message are equal.
  /// </summary>
  public IntegerFeature ActionDeviceKey {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ActionDeviceKey_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ActionDeviceKey_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the key that the device will use to validate the action on reception of the action protocol message.
  /// </summary>
  public IntegerFeature ActionGroupKey {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ActionGroupKey_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ActionGroupKey_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the mask that the device will use to validate the action on reception of the action protocol message.
  /// </summary>
  public IntegerFeature ActionGroupMask {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ActionGroupMask_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ActionGroupMask_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects to which Action Signal further Action settings apply.
  /// </summary>
  public IntegerFeature ActionSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ActionSelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ActionSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the aperture (also called iris, f-number, f-stop or f/#) of the lens. The lower the f/# the more light goes through the lens (the "faster" the lens) and the smaller the depth of field.
  /// </summary>
  public DoubleFeature Aperture {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Aperture_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Aperture_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Initializes the aperture and makes it ready for use. The aperture position after initialization is implementation dependent. This feature is only implemented if an additional initialization is required after OpticControllerInitialize.
  /// </summary>
  public CommandFeature ApertureInitialize {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ApertureInitialize_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Reads the status of the aperture.
  /// </summary>
  public CApertureStatus ApertureStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ApertureStatus_set(swigCPtr, CApertureStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ApertureStatus_get(swigCPtr);
      CApertureStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new CApertureStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// ApertureStepper controls the stepper value of the Aperture. 0 is the maximum opening.
  /// </summary>
  public IntegerFeature ApertureStepper {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ApertureStepper_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ApertureStepper_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Cycle Time of auto feature control loop in milliseconds for once and continuous mode.
  /// </summary>
  public DoubleFeature AutoFeatureCycleTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureCycleTime_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureCycleTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the height of the selected Auto Feature Region (in pixels).
  /// </summary>
  public IntegerFeature AutoFeatureHeight {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureHeight_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureHeight_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the horizontal offset from the origin to the Auto Feature Region (in pixels).
  /// </summary>
  public IntegerFeature AutoFeatureOffsetX {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureOffsetX_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureOffsetX_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the vertical offset from the origin to the Auto Feature Region (in pixels).
  /// </summary>
  public IntegerFeature AutoFeatureOffsetY {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureOffsetY_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureOffsetY_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the mode of the selected Auto Feature Region.
  /// </summary>
  public CAutoFeatureRegionMode AutoFeatureRegionMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureRegionMode_set(swigCPtr, CAutoFeatureRegionMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureRegionMode_get(swigCPtr);
      CAutoFeatureRegionMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAutoFeatureRegionMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the Reference Region of interest. The Auto Feature Region is part of this region and all Auto Feature Region features refers to this Reference Region.
  /// </summary>
  public CAutoFeatureRegionReference AutoFeatureRegionReference {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureRegionReference_set(swigCPtr, CAutoFeatureRegionReference.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureRegionReference_get(swigCPtr);
      CAutoFeatureRegionReference ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAutoFeatureRegionReference(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the region of interest to control. The RegionSelector feature allows devices that are able to extract multiple regions out of an image, to configure the features of those individual regions independently.
  /// </summary>
  public CAutoFeatureRegionSelector AutoFeatureRegionSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureRegionSelector_set(swigCPtr, CAutoFeatureRegionSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureRegionSelector_get(swigCPtr);
      CAutoFeatureRegionSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CAutoFeatureRegionSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Width of the selected Auto Feature Region (in pixels).
  /// </summary>
  public IntegerFeature AutoFeatureWidth {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureWidth_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AutoFeatureWidth_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the Averaging of the camera over at minimum 2 images.
  /// </summary>
  public BoolFeature AveragingEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AveragingEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AveragingEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the number of images using for Averaging of the camera.
  /// </summary>
  public IntegerFeature AveragingImageCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AveragingImageCount_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AveragingImageCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the reciprocal value of AveragingImageCount.
  /// </summary>
  public DoubleFeature AveragingNormalization {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_AveragingNormalization_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_AveragingNormalization_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the shift factor for 8bit pixel format calculated from 12 bit mode.
  /// </summary>
  public CBOPFShift BOPFShift {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BOPFShift_set(swigCPtr, CBOPFShift.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BOPFShift_get(swigCPtr);
      CBOPFShift ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBOPFShift(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted.
  /// </summary>
  public CBalanceWhiteAuto BalanceWhiteAuto {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BalanceWhiteAuto_set(swigCPtr, CBalanceWhiteAuto.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BalanceWhiteAuto_get(swigCPtr);
      CBalanceWhiteAuto ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBalanceWhiteAuto(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the status of BalanceWhiteAuto.
  /// </summary>
  public CBalanceWhiteAutoStatus BalanceWhiteAutoStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BalanceWhiteAutoStatus_set(swigCPtr, CBalanceWhiteAutoStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BalanceWhiteAutoStatus_get(swigCPtr);
      CBalanceWhiteAutoStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBalanceWhiteAutoStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the baud rate of the RS232 interface.
  /// </summary>
  public CBaudrate Baudrate {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Baudrate_set(swigCPtr, CBaudrate.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Baudrate_get(swigCPtr);
      CBaudrate ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBaudrate(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Number of horizontal photo-sensitive cells to combine together. This reduces the horizontal resolution (width) of the image.
  /// </summary>
  public IntegerFeature BinningHorizontal {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BinningHorizontal_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BinningHorizontal_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the mode to use to combine horizontal photo-sensitive cells together when BinningHorizontal is used.
  /// </summary>
  public CBinningHorizontalMode BinningHorizontalMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BinningHorizontalMode_set(swigCPtr, CBinningHorizontalMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BinningHorizontalMode_get(swigCPtr);
      CBinningHorizontalMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBinningHorizontalMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the number of horizontal and vertical photo-sensitive cells to combine together calculated in camera.
  /// </summary>
  public IntegerFeature BinningRegion0 {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BinningRegion0_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BinningRegion0_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects which binning engine is controlled by the BinningHorizontal and BinningVertical features.
  /// </summary>
  public CBinningSelector BinningSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BinningSelector_set(swigCPtr, CBinningSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BinningSelector_get(swigCPtr);
      CBinningSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBinningSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the number of horizontal and vertical photo-sensitive cells to combine together calculated in sensor.
  /// </summary>
  public IntegerFeature BinningSensor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BinningSensor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BinningSensor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Number of vertical photo-sensitive cells to combine together. This reduces the vertical resolution (height) of the image.
  /// </summary>
  public IntegerFeature BinningVertical {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BinningVertical_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BinningVertical_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the mode to use to combine vertical photo-sensitive cells together when BinningVertical is used.
  /// </summary>
  public CBinningVerticalMode BinningVerticalMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BinningVerticalMode_set(swigCPtr, CBinningVerticalMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BinningVerticalMode_get(swigCPtr);
      CBinningVerticalMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBinningVerticalMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the feature BitShift of 2 for using LSBs with pixelformat Mono8.
  /// </summary>
  public BoolFeature BitShift {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BitShift_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BitShift_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls the analog black level as an absolute physical value. This represents a DC offset applied to the video signal.
  /// </summary>
  public IntegerFeature BlackLevel {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BlackLevel_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BlackLevel_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the Black Level Correction.
  /// </summary>
  public BoolFeature BlackLevelCorrectionEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BlackLevelCorrectionEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BlackLevelCorrectionEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the Black Level Correction Threshold.
  /// </summary>
  public IntegerFeature BlackLevelCorrectionThreshold {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BlackLevelCorrectionThreshold_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BlackLevelCorrectionThreshold_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the analog black level as a raw integer value. This represents a DC offset applied to the video signal.
  /// </summary>
  public IntegerFeature BlackLevelRaw {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BlackLevelRaw_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BlackLevelRaw_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects which Black Level is controlled by the various Black Level features.
  /// </summary>
  public CBlackLevelSelector BlackLevelSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BlackLevelSelector_set(swigCPtr, CBlackLevelSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BlackLevelSelector_get(swigCPtr);
      CBlackLevelSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBlackLevelSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Activates the black reference correction of the sensor.
  /// </summary>
  public BoolFeature BlackReferenceCorrectionEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BlackReferenceCorrectionEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BlackReferenceCorrectionEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls the sensor internal feature for avoiding the black sun effect.
  /// </summary>
  public CBlackSunSuppression BlackSunSuppression {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BlackSunSuppression_set(swigCPtr, CBlackSunSuppression.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BlackSunSuppression_get(swigCPtr);
      CBlackSunSuppression ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBlackSunSuppression(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Aborts a running sequencer set.
  /// </summary>
  public BoolFeature BoSequencerAbort {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerAbort_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerAbort_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the sequencer sets number of horizontal photo-sensitive cells to combine together. This increases the intensity (or signal to noise ratio) of the pixels and reduces the horizontal resolution (width) of the image.
  /// </summary>
  public IntegerFeature BoSequencerBinningHorizontal {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerBinningHorizontal_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerBinningHorizontal_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the sequencer sets number of vertical photo-sensitive cells to combine together. This increases the intensity (or signal to noise ratio) of the pixels and reduces the vertical resolution (height) of the image.
  /// </summary>
  public IntegerFeature BoSequencerBinningVertical {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerBinningVertical_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerBinningVertical_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the sequencer for special multi-frame mode. Normal acquisition will be stopped.
  /// </summary>
  public CBoSequencerEnable BoSequencerEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerEnable_set(swigCPtr, CBoSequencerEnable.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerEnable_get(swigCPtr);
      CBoSequencerEnable ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBoSequencerEnable(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the sequencer sets exposure time in us.
  /// </summary>
  public DoubleFeature BoSequencerExposure {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerExposure_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerExposure_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the Sequencer number of frames per trigger.
  /// </summary>
  public IntegerFeature BoSequencerFramesPerTrigger {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerFramesPerTrigger_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerFramesPerTrigger_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the sequencer sets global Gain.
  /// </summary>
  public DoubleFeature BoSequencerGain {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerGain_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerGain_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the Sequencers height of the image provided by the device (in pixels).
  /// </summary>
  public IntegerFeature BoSequencerHeight {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerHeight_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerHeight_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the Sequencers output lines.
  /// </summary>
  public CBoSequencerIOSelector BoSequencerIOSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerIOSelector_set(swigCPtr, CBoSequencerIOSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerIOSelector_get(swigCPtr);
      CBoSequencerIOSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBoSequencerIOSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the current status of the selected Sequencer output.
  /// </summary>
  public BoolFeature BoSequencerIOStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerIOStatus_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerIOStatus_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns if the sequencer is running.
  /// </summary>
  public BoolFeature BoSequencerIsRunning {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerIsRunning_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerIsRunning_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the number of Loops for the sequencer sets.
  /// </summary>
  public IntegerFeature BoSequencerLoops {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerLoops_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerLoops_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Specifies the running mode of the sequencer.
  /// </summary>
  public CBoSequencerMode BoSequencerMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerMode_set(swigCPtr, CBoSequencerMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerMode_get(swigCPtr);
      CBoSequencerMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBoSequencerMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the number of sets to configure.
  /// </summary>
  public IntegerFeature BoSequencerNumberOfSets {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerNumberOfSets_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerNumberOfSets_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the Offset X for the selected sequencer set.
  /// </summary>
  public IntegerFeature BoSequencerOffsetX {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerOffsetX_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerOffsetX_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the Offset Y for the selected sequencer set.
  /// </summary>
  public IntegerFeature BoSequencerOffsetY {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerOffsetY_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerOffsetY_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the number of digitized samples outputted simultaneously by the camera A/D conversion stage for the sequencer.
  /// </summary>
  public CBoSequencerSensorDigitizationTaps BoSequencerSensorDigitizationTaps {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSensorDigitizationTaps_set(swigCPtr, CBoSequencerSensorDigitizationTaps.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSensorDigitizationTaps_get(swigCPtr);
      CBoSequencerSensorDigitizationTaps ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBoSequencerSensorDigitizationTaps(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the index of the active set of the running sequencer.
  /// </summary>
  public IntegerFeature BoSequencerSetActive {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetActive_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetActive_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the number of sets to configure.
  /// </summary>
  public IntegerFeature BoSequencerSetNumberOfSets {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetNumberOfSets_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetNumberOfSets_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the sequencer sets Read Out Time in us for the current format settings.
  /// </summary>
  public IntegerFeature BoSequencerSetReadOutTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetReadOutTime_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetReadOutTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the number of repeats of a single parameter set.
  /// </summary>
  public IntegerFeature BoSequencerSetRepeats {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetRepeats_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetRepeats_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the sequencer set to configure.
  /// </summary>
  public IntegerFeature BoSequencerSetSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetSelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerSetSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Starts or stopps the configured sequence.
  /// </summary>
  public CBoSequencerStart BoSequencerStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerStart_set(swigCPtr, CBoSequencerStart.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerStart_get(swigCPtr);
      CBoSequencerStart ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBoSequencerStart(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the Sequencers width of the image provided by the device (in pixels).
  /// </summary>
  public IntegerFeature BoSequencerWidth {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BoSequencerWidth_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BoSequencerWidth_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the automatic gain control (AGC) mode. The exact algorithm used to implement AGC is device-specific.
  /// </summary>
  public DoubleFeature BrightnessAutoNominalValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BrightnessAutoNominalValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BrightnessAutoNominalValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the highest priority auto feature to adjust the brightness.
  /// </summary>
  public CBrightnessAutoPriority BrightnessAutoPriority {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BrightnessAutoPriority_set(swigCPtr, CBrightnessAutoPriority.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BrightnessAutoPriority_get(swigCPtr);
      CBrightnessAutoPriority ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBrightnessAutoPriority(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the Brightness Correction. Brightness Correction is available for binning only.
  /// </summary>
  public CBrightnessCorrection BrightnessCorrection {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BrightnessCorrection_set(swigCPtr, CBrightnessCorrection.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BrightnessCorrection_get(swigCPtr);
      CBrightnessCorrection ret = (cPtr == global::System.IntPtr.Zero) ? null : new CBrightnessCorrection(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates the factor of brightness correction in binning.
  /// </summary>
  public DoubleFeature BrightnessCorrectionFactor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_BrightnessCorrectionFactor_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_BrightnessCorrectionFactor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the low time in Clock Cycles for the Frame Valid signal between two frames.
  /// </summary>
  public IntegerFeature CLFVALLowTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CLFVALLowTime_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CLFVALLowTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the low time in Clock Cycles for the Line Valid signal between two lines.
  /// </summary>
  public IntegerFeature CLLVALLowTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CLLVALLowTime_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CLLVALLowTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the number of retransmissions allowed when a message channel message times out.
  /// </summary>
  public IntegerFeature CLMCRC {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CLMCRC_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CLMCRC_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the transmission timeout value in milliseconds.
  /// </summary>
  public IntegerFeature CLMCTT {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CLMCTT_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CLMCTT_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Adds a calibration offset to compensate for an individual "roll" angle of the camera, introduced by mounting tolerances. The offset is added to all type of output data that incorporates an angle, like false color representation and angle of polarization data. The offset is without effect to raw data and to degree of linear polarization data.
  /// </summary>
  public DoubleFeature CalibrationAngleOfPolarizationOffset {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CalibrationAngleOfPolarizationOffset_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CalibrationAngleOfPolarizationOffset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Activates the calibration of the four polarized light channels by applying matrix calculations and an angle offset.
  /// </summary>
  public BoolFeature CalibrationEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CalibrationEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CalibrationEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Represents the value of the selected gain factor inside the calibration matrix.
  /// </summary>
  public DoubleFeature CalibrationMatrixValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CalibrationMatrixValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CalibrationMatrixValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the gain factor of the selected calibration matrix.
  /// </summary>
  public CCalibrationMatrixValueSelector CalibrationMatrixValueSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CalibrationMatrixValueSelector_set(swigCPtr, CCalibrationMatrixValueSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CalibrationMatrixValueSelector_get(swigCPtr);
      CCalibrationMatrixValueSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCalibrationMatrixValueSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the request ID of the action command that triggered the image.
  /// </summary>
  public IntegerFeature ChunkActionRequestID {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ChunkActionRequestID_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ChunkActionRequestID_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the IP Adress of the action command source that triggered the image.
  /// </summary>
  public IntegerFeature ChunkActionSourceIP {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ChunkActionSourceIP_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ChunkActionSourceIP_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of horizontal and vertical photo-sensitive cells to combine together calculated in camera.
  /// </summary>
  public IntegerFeature ChunkBinningRegion0 {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ChunkBinningRegion0_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ChunkBinningRegion0_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of horizontal and vertical photo-sensitive cells to combine together calculated in sensor.
  /// </summary>
  public IntegerFeature ChunkBinningSensor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ChunkBinningSensor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ChunkBinningSensor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the inclusion of the selected Chunk data in the payload of the image.
  /// </summary>
  public BoolFeature ChunkEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ChunkEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ChunkEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Activates the inclusion of Chunk data in the transmitted payload.
  /// </summary>
  public BoolFeature ChunkModeActive {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ChunkModeActive_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ChunkModeActive_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects which Chunk to enable or control.
  /// </summary>
  public CChunkSelector ChunkSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ChunkSelector_set(swigCPtr, CChunkSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ChunkSelector_get(swigCPtr);
      CChunkSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CChunkSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the number of received trigger at the time of the FrameStart event.
  /// </summary>
  public IntegerFeature ChunkTriggerCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ChunkTriggerCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ChunkTriggerCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// This Camera Link specific feature describes the configuration used by the camera. It helps especially when a camera is capable of operation in a non-standard configuration, and when the features PixelSize, SensorDigitizationTaps, and DeviceTapGeometry do not provide enough information for interpretation of the image data provided by the camera.
  /// </summary>
  public CClConfiguration ClConfiguration {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ClConfiguration_set(swigCPtr, CClConfiguration.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ClConfiguration_get(swigCPtr);
      CClConfiguration ret = (cPtr == global::System.IntPtr.Zero) ? null : new CClConfiguration(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// This Camera Link specific feature describes the time multiplexing of the camera link connection to transfer more than the configuration allows, in one single clock.
  /// </summary>
  public CClTimeSlotsCount ClTimeSlotsCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ClTimeSlotsCount_set(swigCPtr, CClTimeSlotsCount.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ClTimeSlotsCount_get(swigCPtr);
      CClTimeSlotsCount ret = (cPtr == global::System.IntPtr.Zero) ? null : new CClTimeSlotsCount(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Controls the mode for automatic adjusting the gains of the active transformation matrix.
  /// </summary>
  public CColorTransformationAuto ColorTransformationAuto {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationAuto_set(swigCPtr, CColorTransformationAuto.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationAuto_get(swigCPtr);
      CColorTransformationAuto ret = (cPtr == global::System.IntPtr.Zero) ? null : new CColorTransformationAuto(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Activates the selected Color Transformation module.
  /// </summary>
  public BoolFeature ColorTransformationEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the color transformation factory list tuned to the given color temeperature.
  /// </summary>
  public CColorTransformationFactoryListSelector ColorTransformationFactoryListSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationFactoryListSelector_set(swigCPtr, CColorTransformationFactoryListSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationFactoryListSelector_get(swigCPtr);
      CColorTransformationFactoryListSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CColorTransformationFactoryListSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// sRGB Gamma 1: Camera was calibrated for the color space sRGB Gamma 1.
  /// </summary>
  public StringFeature ColorTransformationOutputColorSpace {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationOutputColorSpace_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationOutputColorSpace_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Resets the ColorTransformation to the selected ColorTransformationFactoryList.
  /// </summary>
  public CommandFeature ColorTransformationResetToFactoryList {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationResetToFactoryList_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects which Color Transformation module is controlled by the various Color Transformation features.
  /// </summary>
  public CColorTransformationSelector ColorTransformationSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationSelector_set(swigCPtr, CColorTransformationSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationSelector_get(swigCPtr);
      CColorTransformationSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CColorTransformationSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Represents the value of the selected Gain factor or Offset inside the Transformation matrix.
  /// </summary>
  public DoubleFeature ColorTransformationValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the Gain factor or Offset of the Transformation matrix to access in the selected Color Transformation module.
  /// </summary>
  public CColorTransformationValueSelector ColorTransformationValueSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationValueSelector_set(swigCPtr, CColorTransformationValueSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ColorTransformationValueSelector_get(swigCPtr);
      CColorTransformationValueSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CColorTransformationValueSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Controls if the selected component streaming is active.
  /// </summary>
  public BoolFeature ComponentEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ComponentEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ComponentEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects a component to activate/deactivate its data streaming.
  /// </summary>
  public CComponentSelector ComponentSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ComponentSelector_set(swigCPtr, CComponentSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ComponentSelector_get(swigCPtr);
      CComponentSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CComponentSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the Concatenation mode.
  /// </summary>
  public IntegerFeature ConcatenationEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ConcatenationEnable_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ConcatenationEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the duration (or number of events) before the CounterEnd event is generated.
  /// </summary>
  public IntegerFeature CounterDuration {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CounterDuration_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CounterDuration_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the Activation mode Event Source signal.
  /// </summary>
  public CCounterEventActivation CounterEventActivation {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CounterEventActivation_set(swigCPtr, CCounterEventActivation.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CounterEventActivation_get(swigCPtr);
      CCounterEventActivation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCounterEventActivation(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Select the events that will be the source to increment the Counter.
  /// </summary>
  public CCounterEventSource CounterEventSource {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CounterEventSource_set(swigCPtr, CCounterEventSource.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CounterEventSource_get(swigCPtr);
      CCounterEventSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCounterEventSource(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Does a software reset of the selected Counter and starts it. The counter starts counting events immediately after the reset unless a Counter trigger is active. CounterReset can be used to reset the Counter independently from the CounterResetSource. To disable the counter temporarily, set CounterEventSource to Off.
  /// </summary>
  public CommandFeature CounterReset {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CounterReset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the Activation mode of the Counter Reset Source signal.
  /// </summary>
  public CCounterResetActivation CounterResetActivation {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CounterResetActivation_set(swigCPtr, CCounterResetActivation.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CounterResetActivation_get(swigCPtr);
      CCounterResetActivation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCounterResetActivation(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the signals that will be the source to reset the Counter.
  /// </summary>
  public CCounterResetSource CounterResetSource {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CounterResetSource_set(swigCPtr, CCounterResetSource.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CounterResetSource_get(swigCPtr);
      CCounterResetSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCounterResetSource(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects which Counter to configure.
  /// </summary>
  public CCounterSelector CounterSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CounterSelector_set(swigCPtr, CCounterSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CounterSelector_get(swigCPtr);
      CCounterSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCounterSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Reads or writes the current value of the selected Counter.
  /// </summary>
  public IntegerFeature CounterValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CounterValue_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CounterValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reads the value of the selected Counter when it was reset by a trigger or by an explicit CounterReset command.
  /// </summary>
  public IntegerFeature CounterValueAtReset {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CounterValueAtReset_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CounterValueAtReset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets one byte of custom special data.
  /// </summary>
  public IntegerFeature CustomData {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CustomData_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CustomData_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls if the custom data configuration mode is active.
  /// </summary>
  public CCustomDataConfigurationMode CustomDataConfigurationMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CustomDataConfigurationMode_set(swigCPtr, CCustomDataConfigurationMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CustomDataConfigurationMode_get(swigCPtr);
      CCustomDataConfigurationMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCustomDataConfigurationMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the index of the custom data byte array.
  /// </summary>
  public IntegerFeature CustomDataSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_CustomDataSelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_CustomDataSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Horizontal sub-sampling of the image. This reduces the horizontal resolution (width) of the image by the specified horizontal decimation factor.
  /// </summary>
  public IntegerFeature DecimationHorizontal {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DecimationHorizontal_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DecimationHorizontal_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the mode used to reduce the horizontal resolution when DecimationHorizontal is used.
  /// </summary>
  public CDecimationHorizontalMode DecimationHorizontalMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DecimationHorizontalMode_set(swigCPtr, CDecimationHorizontalMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DecimationHorizontalMode_get(swigCPtr);
      CDecimationHorizontalMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDecimationHorizontalMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Vertical sub-sampling of the image. This reduces the vertical resolution (height) of the image by the specified vertical decimation factor.
  /// </summary>
  public IntegerFeature DecimationVertical {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DecimationVertical_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DecimationVertical_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the mode used to reduce the Vertical resolution when DecimationVertical is used.
  /// </summary>
  public CDecimationVerticalMode DecimationVerticalMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DecimationVerticalMode_set(swigCPtr, CDecimationVerticalMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DecimationVerticalMode_get(swigCPtr);
      CDecimationVerticalMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDecimationVerticalMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the correction of defect pixels.
  /// </summary>
  public BoolFeature DefectPixelCorrection {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DefectPixelCorrection_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DefectPixelCorrection_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Determines if the pixel correction is active for the selected entry.
  /// </summary>
  public BoolFeature DefectPixelListEntryActive {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListEntryActive_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListEntryActive_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the X position of the pixel.
  /// </summary>
  public IntegerFeature DefectPixelListEntryPosX {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListEntryPosX_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListEntryPosX_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the Y position of the pixel.
  /// </summary>
  public IntegerFeature DefectPixelListEntryPosY {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListEntryPosY_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListEntryPosY_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the index to the defect pixel correction list.
  /// </summary>
  public IntegerFeature DefectPixelListIndex {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListIndex_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListIndex_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects which Defect Pixel List to control.
  /// </summary>
  public CDefectPixelListSelector DefectPixelListSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListSelector_set(swigCPtr, CDefectPixelListSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DefectPixelListSelector_get(swigCPtr);
      CDefectPixelListSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDefectPixelListSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Character set used by the strings of the device.
  /// </summary>
  public CDeviceCharacterSet DeviceCharacterSet {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceCharacterSet_set(swigCPtr, CDeviceCharacterSet.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceCharacterSet_get(swigCPtr);
      CDeviceCharacterSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceCharacterSet(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the frequency of the selected Clock.
  /// </summary>
  public DoubleFeature DeviceClockFrequency {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceClockFrequency_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceClockFrequency_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the clock frequency to access from the device.
  /// </summary>
  public CDeviceClockSelector DeviceClockSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceClockSelector_set(swigCPtr, CDeviceClockSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceClockSelector_get(swigCPtr);
      CDeviceClockSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceClockSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates the number of event channels supported by the device.
  /// </summary>
  public IntegerFeature DeviceEventChannelCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceEventChannelCount_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceEventChannelCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Identifier of the product family of the device.
  /// </summary>
  public StringFeature DeviceFamilyName {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceFamilyName_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceFamilyName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Version of the firmware in the device.
  /// </summary>
  public StringFeature DeviceFirmwareVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceFirmwareVersion_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceFirmwareVersion_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Source control for frontside UART interface.
  /// </summary>
  public CDeviceFrontUARTSource DeviceFrontUARTSource {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceFrontUARTSource_set(swigCPtr, CDeviceFrontUARTSource.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceFrontUARTSource_get(swigCPtr);
      CDeviceFrontUARTSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceFrontUARTSource(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Major version of the GenCP protocol supported by the device.
  /// </summary>
  public IntegerFeature DeviceGenCPVersionMajor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceGenCPVersionMajor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceGenCPVersionMajor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Minor version of the GenCP protocol supported by the device.
  /// </summary>
  public IntegerFeature DeviceGenCPVersionMinor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceGenCPVersionMinor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceGenCPVersionMinor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns if the license at the device is valid or not for the license type, selected by the DeviceLicenseTypeSelector feature.
  /// </summary>
  public CDeviceLicense DeviceLicense {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceLicense_set(swigCPtr, CDeviceLicense.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceLicense_get(swigCPtr);
      CDeviceLicense ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceLicense(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the available License types.
  /// </summary>
  public CDeviceLicenseTypeSelector DeviceLicenseTypeSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceLicenseTypeSelector_set(swigCPtr, CDeviceLicenseTypeSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceLicenseTypeSelector_get(swigCPtr);
      CDeviceLicenseTypeSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceLicenseTypeSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates the command timeout of the specified Link. This corresponds to the maximum response time of the device for a command sent on that link.
  /// </summary>
  public DoubleFeature DeviceLinkCommandTimeout {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkCommandTimeout_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkCommandTimeout_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Activate or deactivate the Link's heartbeat.
  /// </summary>
  public CDeviceLinkHeartbeatMode DeviceLinkHeartbeatMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkHeartbeatMode_set(swigCPtr, CDeviceLinkHeartbeatMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkHeartbeatMode_get(swigCPtr);
      CDeviceLinkHeartbeatMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceLinkHeartbeatMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Controls the current heartbeat timeout of the specific Link.
  /// </summary>
  public DoubleFeature DeviceLinkHeartbeatTimeout {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkHeartbeatTimeout_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkHeartbeatTimeout_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects which Link of the device to control.
  /// </summary>
  public CDeviceLinkSelector DeviceLinkSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkSelector_set(swigCPtr, CDeviceLinkSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkSelector_get(swigCPtr);
      CDeviceLinkSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceLinkSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates the speed of transmission negotiated on the specified Link.
  /// </summary>
  public IntegerFeature DeviceLinkSpeed {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkSpeed_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkSpeed_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Limits the maximum bandwidth of the data that will be streamed out by the device on the selected Link. If necessary, delays will be uniformly inserted between transport layer packets in order to control the peak bandwidth.
  /// </summary>
  public IntegerFeature DeviceLinkThroughputLimit {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkThroughputLimit_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceLinkThroughputLimit_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Manufacturer information about the device.
  /// </summary>
  public StringFeature DeviceManufacturerInfo {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceManufacturerInfo_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceManufacturerInfo_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the Device Manufacturer Version.
  /// </summary>
  public IntegerFeature DeviceManufacturerVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceManufacturerVersion_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceManufacturerVersion_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Model of the device.
  /// </summary>
  public StringFeature DeviceModelName {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceModelName_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceModelName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Endianness of the registers of the device.
  /// </summary>
  public CDeviceRegistersEndianness DeviceRegistersEndianness {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceRegistersEndianness_set(swigCPtr, CDeviceRegistersEndianness.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceRegistersEndianness_get(swigCPtr);
      CDeviceRegistersEndianness ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceRegistersEndianness(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Resets the device to its power up state. After reset, the device must be rediscovered.
  /// </summary>
  public CommandFeature DeviceReset {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceReset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Resets the device to its delivery state.
  /// </summary>
  public CommandFeature DeviceResetToDeliveryState {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceResetToDeliveryState_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Major version of the Standard Features Naming Convention that was used to create the device's GenICam XML.
  /// </summary>
  public IntegerFeature DeviceSFNCVersionMajor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSFNCVersionMajor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSFNCVersionMajor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Minor version of the Standard Features Naming Convention that was used to create the device's GenICam XML.
  /// </summary>
  public IntegerFeature DeviceSFNCVersionMinor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSFNCVersionMinor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSFNCVersionMinor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sub minor version of Standard Features Naming Convention that was used to create the device's GenICam XML.
  /// </summary>
  public IntegerFeature DeviceSFNCVersionSubMinor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSFNCVersionSubMinor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSFNCVersionSubMinor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Scan type of the sensor of the device.
  /// </summary>
  public CDeviceScanType DeviceScanType {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceScanType_set(swigCPtr, CDeviceScanType.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceScanType_get(swigCPtr);
      CDeviceScanType ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceScanType(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns if selected sensor is connected.
  /// </summary>
  public BoolFeature DeviceSensorConnected {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorConnected_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorConnected_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns if selected image sensor is initialized.
  /// </summary>
  public BoolFeature DeviceSensorInitialized {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorInitialized_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorInitialized_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects which sensor is controlled by the various sensor specific features.
  /// </summary>
  public CDeviceSensorSelector DeviceSensorSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorSelector_set(swigCPtr, CDeviceSensorSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorSelector_get(swigCPtr);
      CDeviceSensorSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceSensorSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Specifies the type of the sensor.
  /// </summary>
  public CDeviceSensorType DeviceSensorType {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorType_set(swigCPtr, CDeviceSensorType.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorType_get(swigCPtr);
      CDeviceSensorType ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceSensorType(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Specifies the version of the CMOSIS sensor.
  /// </summary>
  public CDeviceSensorVersion DeviceSensorVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorVersion_set(swigCPtr, CDeviceSensorVersion.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSensorVersion_get(swigCPtr);
      CDeviceSensorVersion ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceSensorVersion(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Device's serial number. This string is a unique identifier of the device.
  /// </summary>
  public StringFeature DeviceSerialNumber {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSerialNumber_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSerialNumber_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// This feature controls the baud rate used by the selected serial port.
  /// </summary>
  public CDeviceSerialPortBaudRate DeviceSerialPortBaudRate {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSerialPortBaudRate_set(swigCPtr, CDeviceSerialPortBaudRate.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSerialPortBaudRate_get(swigCPtr);
      CDeviceSerialPortBaudRate ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceSerialPortBaudRate(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects which serial port of the device to control.
  /// </summary>
  public CDeviceSerialPortSelector DeviceSerialPortSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceSerialPortSelector_set(swigCPtr, CDeviceSerialPortSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceSerialPortSelector_get(swigCPtr);
      CDeviceSerialPortSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceSerialPortSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates the number of streaming channels supported by the device.
  /// </summary>
  public IntegerFeature DeviceStreamChannelCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelCount_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Endianness of multi-byte pixel data for this stream.
  /// </summary>
  public CDeviceStreamChannelEndianness DeviceStreamChannelEndianness {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelEndianness_set(swigCPtr, CDeviceStreamChannelEndianness.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelEndianness_get(swigCPtr);
      CDeviceStreamChannelEndianness ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceStreamChannelEndianness(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Specifies the stream packet size, in bytes, to send on the selected channel for a Transmitter or specifies the maximum packet size supported by a receiver.
  /// </summary>
  public IntegerFeature DeviceStreamChannelPacketSize {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelPacketSize_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelPacketSize_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the stream channel to control.
  /// </summary>
  public IntegerFeature DeviceStreamChannelSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelSelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the type of the stream channel.
  /// </summary>
  public CDeviceStreamChannelType DeviceStreamChannelType {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelType_set(swigCPtr, CDeviceStreamChannelType.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceStreamChannelType_get(swigCPtr);
      CDeviceStreamChannelType ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceStreamChannelType(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Transport Layer type of the device.
  /// </summary>
  public CDeviceTLType DeviceTLType {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTLType_set(swigCPtr, CDeviceTLType.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTLType_get(swigCPtr);
      CDeviceTLType ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceTLType(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Major version of the Transport Layer of the device.
  /// </summary>
  public IntegerFeature DeviceTLVersionMajor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTLVersionMajor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTLVersionMajor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Minor version of the Transport Layer of the device.
  /// </summary>
  public IntegerFeature DeviceTLVersionMinor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTLVersionMinor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTLVersionMinor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sub minor version of the Transport Layer of the device.
  /// </summary>
  public IntegerFeature DeviceTLVersionSubMinor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTLVersionSubMinor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTLVersionSubMinor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// This device tap geometry feature describes the geometrical properties characterizing the taps of a camera as presented at the output of the device.
  /// </summary>
  public CDeviceTapGeometry DeviceTapGeometry {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTapGeometry_set(swigCPtr, CDeviceTapGeometry.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTapGeometry_get(swigCPtr);
      CDeviceTapGeometry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceTapGeometry(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Device temperature in degrees Celsius (C). It is measured at the location selected by DeviceTemperatureSelector.
  /// </summary>
  public DoubleFeature DeviceTemperature {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperature_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperature_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns if the device operates in a critical temperature range.
  /// </summary>
  public BoolFeature DeviceTemperatureExceeded {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureExceeded_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureExceeded_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables the Peltier element.
  /// </summary>
  public BoolFeature DeviceTemperaturePeltierEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperaturePeltierEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperaturePeltierEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the location within the device, where the temperature will be measured.
  /// </summary>
  public CDeviceTemperatureSelector DeviceTemperatureSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureSelector_set(swigCPtr, CDeviceTemperatureSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureSelector_get(swigCPtr);
      CDeviceTemperatureSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceTemperatureSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the current temperature status of the device.
  /// </summary>
  public CDeviceTemperatureStatus DeviceTemperatureStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureStatus_set(swigCPtr, CDeviceTemperatureStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureStatus_get(swigCPtr);
      CDeviceTemperatureStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceTemperatureStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the temperature threshold for the selected status transition in degrees Celsius.
  /// </summary>
  public IntegerFeature DeviceTemperatureStatusTransition {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureStatusTransition_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureStatusTransition_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects which temperature transition is controlled by the feature DeviceTemperatureStatusTransition.
  /// </summary>
  public CDeviceTemperatureStatusTransitionSelector DeviceTemperatureStatusTransitionSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureStatusTransitionSelector_set(swigCPtr, CDeviceTemperatureStatusTransitionSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureStatusTransitionSelector_get(swigCPtr);
      CDeviceTemperatureStatusTransitionSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceTemperatureStatusTransitionSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns if the device operates in critical temperature range.
  /// </summary>
  public BoolFeature DeviceTemperatureUnderrun {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureUnderrun_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceTemperatureUnderrun_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the device type.
  /// </summary>
  public CDeviceType DeviceType {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceType_set(swigCPtr, CDeviceType.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceType_get(swigCPtr);
      CDeviceType ret = (cPtr == global::System.IntPtr.Zero) ? null : new CDeviceType(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the USB3 Vision unique ID which allows consistent identification of devices.
  /// </summary>
  public StringFeature DeviceUSB3VisionGUID {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceUSB3VisionGUID_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceUSB3VisionGUID_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// User-programmable device identifier.
  /// </summary>
  public StringFeature DeviceUserID {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceUserID_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceUserID_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Name of the manufacturer of the device.
  /// </summary>
  public StringFeature DeviceVendorName {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceVendorName_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceVendorName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Version of the device.
  /// </summary>
  public StringFeature DeviceVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceVersion_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceVersion_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls the device version.
  /// </summary>
  public IntegerFeature DeviceVersionControl {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DeviceVersionControl_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DeviceVersionControl_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of discarded events.
  /// </summary>
  public IntegerFeature DiscardedEventCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_DiscardedEventCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_DiscardedEventCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls whether the Energy Efficient / Green Ethernet mode (802.3az) in the PHY is activated or not. A device reboot is needed for changes to take effect.
  /// </summary>
  public BoolFeature EnergyEfficientEthernetEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EnergyEfficientEthernetEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EnergyEfficientEthernetEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Activate or deactivate the notification to the host application of the occurrence of the selected Event.
  /// </summary>
  public CEventNotification EventNotification {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventNotification_set(swigCPtr, CEventNotification.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventNotification_get(swigCPtr);
      CEventNotification ret = (cPtr == global::System.IntPtr.Zero) ? null : new CEventNotification(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects which Event to signal to the host application.
  /// </summary>
  public CEventSelector EventSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSelector_set(swigCPtr, CEventSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSelector_get(swigCPtr);
      CEventSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CEventSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// EventSensor1ConcatenationAvailableTimestamp
  /// </summary>
  public IntegerFeature EventSensor1ConcatenationAvailable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ConcatenationAvailable_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ConcatenationAvailable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 1 Concatenation Available Event.
  /// </summary>
  public IntegerFeature EventSensor1ConcatenationAvailableTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ConcatenationAvailableTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ConcatenationAvailableTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor1ConcatenationEmptyTimestamp
  /// </summary>
  public IntegerFeature EventSensor1ConcatenationEmpty {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ConcatenationEmpty_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ConcatenationEmpty_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 1 Concatenation Empty Event.
  /// </summary>
  public IntegerFeature EventSensor1ConcatenationEmptyTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ConcatenationEmptyTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ConcatenationEmptyTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor1ExposureEndTimestamp
  /// </summary>
  public IntegerFeature EventSensor1ExposureEnd {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ExposureEnd_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ExposureEnd_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 1 Exposure End Event. It can be used to determine precisely when the event occured.
  /// </summary>
  public IntegerFeature EventSensor1ExposureEndTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ExposureEndTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ExposureEndTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor1ExposureStartTimestamp
  /// </summary>
  public IntegerFeature EventSensor1ExposureStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ExposureStart_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ExposureStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 1 Exposure Start Event.
  /// </summary>
  public IntegerFeature EventSensor1ExposureStartTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ExposureStartTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ExposureStartTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor1ReadoutReadoutTimestamp
  /// </summary>
  public IntegerFeature EventSensor1ReadoutEnd {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ReadoutEnd_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ReadoutEnd_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 1 Readout End Event.
  /// </summary>
  public IntegerFeature EventSensor1ReadoutEndTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ReadoutEndTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ReadoutEndTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor1ReadoutStartTimestamp
  /// </summary>
  public IntegerFeature EventSensor1ReadoutStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ReadoutStart_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ReadoutStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 1 Readout Start Event.
  /// </summary>
  public IntegerFeature EventSensor1ReadoutStartTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ReadoutStartTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1ReadoutStartTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor1TriggerReadyTimestamp
  /// </summary>
  public IntegerFeature EventSensor1TriggerReady {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1TriggerReady_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1TriggerReady_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 1 Trigger Ready Event.
  /// </summary>
  public IntegerFeature EventSensor1TriggerReadyTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1TriggerReadyTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1TriggerReadyTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor1TriggerSkippedTimestamp
  /// </summary>
  public IntegerFeature EventSensor1TriggerSkipped {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1TriggerSkipped_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1TriggerSkipped_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 1 Trigger Skipped Event.
  /// </summary>
  public IntegerFeature EventSensor1TriggerSkippedTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor1TriggerSkippedTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor1TriggerSkippedTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor2ConcatenationAvailableTimestamp
  /// </summary>
  public IntegerFeature EventSensor2ConcatenationAvailable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ConcatenationAvailable_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ConcatenationAvailable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 2 Concatenation Available Event.
  /// </summary>
  public IntegerFeature EventSensor2ConcatenationAvailableTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ConcatenationAvailableTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ConcatenationAvailableTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor2ConcatenationEmptyTimestamp
  /// </summary>
  public IntegerFeature EventSensor2ConcatenationEmpty {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ConcatenationEmpty_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ConcatenationEmpty_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 2 Concatenation Empty Event.
  /// </summary>
  public IntegerFeature EventSensor2ConcatenationEmptyTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ConcatenationEmptyTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ConcatenationEmptyTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor2ExposureEndTimestamp
  /// </summary>
  public IntegerFeature EventSensor2ExposureEnd {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ExposureEnd_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ExposureEnd_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 2 Exposure End Event. It can be used to determine precisely when the event occured.
  /// </summary>
  public IntegerFeature EventSensor2ExposureEndTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ExposureEndTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ExposureEndTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor2ExposureStartTimestamp
  /// </summary>
  public IntegerFeature EventSensor2ExposureStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ExposureStart_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ExposureStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 2 Exposure Start Event.
  /// </summary>
  public IntegerFeature EventSensor2ExposureStartTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ExposureStartTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ExposureStartTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor2ReadoutEndTimestamp
  /// </summary>
  public IntegerFeature EventSensor2ReadoutEnd {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ReadoutEnd_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ReadoutEnd_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 2 Readout End Event.
  /// </summary>
  public IntegerFeature EventSensor2ReadoutEndTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ReadoutEndTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ReadoutEndTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor2ReadoutStartTimestamp
  /// </summary>
  public IntegerFeature EventSensor2ReadoutStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ReadoutStart_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ReadoutStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 2 Readout Start Event.
  /// </summary>
  public IntegerFeature EventSensor2ReadoutStartTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ReadoutStartTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2ReadoutStartTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor2TriggerReadyTimestamp
  /// </summary>
  public IntegerFeature EventSensor2TriggerReady {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2TriggerReady_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2TriggerReady_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 2 Trigger Ready Event.
  /// </summary>
  public IntegerFeature EventSensor2TriggerReadyTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2TriggerReadyTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2TriggerReadyTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensor2TriggerSkippedTimestamp
  /// </summary>
  public IntegerFeature EventSensor2TriggerSkipped {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2TriggerSkipped_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2TriggerSkipped_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor 2 Trigger Skipped Event.
  /// </summary>
  public IntegerFeature EventSensor2TriggerSkippedTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensor2TriggerSkippedTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensor2TriggerSkippedTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// EventSensorInitializationFailedTimestamp
  /// </summary>
  public IntegerFeature EventSensorInitializationFailed {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensorInitializationFailed_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensorInitializationFailed_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the Sensor Initialization Failed Event. It can be used to determine precisely when the event occurred.
  /// </summary>
  public IntegerFeature EventSensorInitializationFailedTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventSensorInitializationFailedTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventSensorInitializationFailedTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the unique Identifier of the bo Serial UART0 Read Ready type of Event.
  /// </summary>
  public IntegerFeature EventboSerialUART0ReadReady {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventboSerialUART0ReadReady_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventboSerialUART0ReadReady_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the bo Serial UART0 Read Ready Event.
  /// </summary>
  public IntegerFeature EventboSerialUART0ReadReadyTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventboSerialUART0ReadReadyTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventboSerialUART0ReadReadyTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the unique Identifier of the bo Serial UART1 Read Ready type of Event.
  /// </summary>
  public IntegerFeature EventboSerialUART1ReadReady {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventboSerialUART1ReadReady_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventboSerialUART1ReadReady_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Timestamp of the bo Serial UART1 Read Ready Event.
  /// </summary>
  public IntegerFeature EventboSerialUART1ReadReadyTimestamp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_EventboSerialUART1ReadReadyTimestamp_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_EventboSerialUART1ReadReadyTimestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the automatic exposure mode when ExposureMode is Timed. The exact algorithm used to implement this control is device-specific.
  /// </summary>
  public CExposureAuto ExposureAuto {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ExposureAuto_set(swigCPtr, CExposureAuto.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ExposureAuto_get(swigCPtr);
      CExposureAuto ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExposureAuto(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the maximal value of ExposureTime calculable by exposure auto algorithm.
  /// </summary>
  public DoubleFeature ExposureAutoMaxValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ExposureAutoMaxValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ExposureAutoMaxValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the minimal value of ExposureTime calculable by exposure auto algorithm.
  /// </summary>
  public DoubleFeature ExposureAutoMinValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ExposureAutoMinValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ExposureAutoMinValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the offset correction value that the camera applies to each even line in the "Exposure Lines" region when it is located on an even line.
  /// </summary>
  public IntegerFeature ExposureLinesOffsetEven {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ExposureLinesOffsetEven_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ExposureLinesOffsetEven_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the offset correction value that the camera applies to each odd line in the "Exposure Lines" region when it is located on an even line.
  /// </summary>
  public IntegerFeature ExposureLinesOffsetOdd {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ExposureLinesOffsetOdd_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ExposureLinesOffsetOdd_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the operation mode of the Exposure.
  /// </summary>
  public CExposureMode ExposureMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ExposureMode_set(swigCPtr, CExposureMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ExposureMode_get(swigCPtr);
      CExposureMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExposureMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the Exposure time when ExposureMode is Timed and ExposureAuto is Off. This controls the duration where the photosensitive cells are exposed to light.
  /// </summary>
  public DoubleFeature ExposureTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ExposureTime_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ExposureTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the maximum value of the exposure time gap.
  /// </summary>
  public DoubleFeature ExposureTimeGapMax {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ExposureTimeGapMax_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ExposureTimeGapMax_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the minimum value of the exposure time gap.
  /// </summary>
  public DoubleFeature ExposureTimeGapMin {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ExposureTimeGapMin_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ExposureTimeGapMin_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the Fixed Pattern Noise Correction.
  /// </summary>
  public BoolFeature FixedPatternNoiseCorrection {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_FixedPatternNoiseCorrection_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_FixedPatternNoiseCorrection_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Focal length in millimeters (mm).
  /// </summary>
  public DoubleFeature FocalLength {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_FocalLength_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_FocalLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Initializes the focal length and makes it ready for use. The focal length position after initialization is implementation dependent. This feature is only implemented if an additional initialization is required after OpticControllerInitialize.
  /// </summary>
  public CommandFeature FocalLengthInitialize {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_FocalLengthInitialize_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Reads the status of the focal length.
  /// </summary>
  public CFocalLengthStatus FocalLengthStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_FocalLengthStatus_set(swigCPtr, CFocalLengthStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_FocalLengthStatus_get(swigCPtr);
      CFocalLengthStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new CFocalLengthStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Focal power (in diopters/dpt) is mostly used for liquid lenses and indicates how much a liquid lens focuses.
  /// </summary>
  public DoubleFeature FocalPower {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_FocalPower_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_FocalPower_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Initializes the focus and makes it ready for use. The focus position after initialization is implementation dependent. This feature is only implemented if an additional initialization is required after OpticControllerInitialize.
  /// </summary>
  public CommandFeature FocusInitialize {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_FocusInitialize_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Reads the status of the focus.
  /// </summary>
  public CFocusStatus FocusStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_FocusStatus_set(swigCPtr, CFocusStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_FocusStatus_get(swigCPtr);
      CFocusStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new CFocusStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// FocusStepper controls the stepper value of the Focus, e.g. ObjectSensorDistance or FocalPower. 0 is the closest focus.
  /// </summary>
  public IntegerFeature FocusStepper {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_FocusStepper_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_FocusStepper_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the frame counter. The frame counter will be incremented with every image taken by the camera. It can be manipulated by writing the features value.
  /// </summary>
  public IntegerFeature FrameCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_FrameCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_FrameCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the 64 bit block ID length.
  /// </summary>
  public BoolFeature GVSPConfigurationBlockID64Bit {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GVSPConfigurationBlockID64Bit_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GVSPConfigurationBlockID64Bit_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls the selected gain as an absolute physical value. This is an amplification factor applied to the video signal.
  /// </summary>
  public DoubleFeature Gain {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Gain_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Gain_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the automatic gain control (AGC) mode. The exact algorithm used to implement AGC is device-specific.
  /// </summary>
  public CGainAuto GainAuto {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GainAuto_set(swigCPtr, CGainAuto.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GainAuto_get(swigCPtr);
      CGainAuto ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGainAuto(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the maximal value of Gain calculable by gain auto algorithm.
  /// </summary>
  public DoubleFeature GainAutoMaxValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GainAutoMaxValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GainAutoMaxValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the minimal value of Gain calculable by gain auto algorithm.
  /// </summary>
  public DoubleFeature GainAutoMinValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GainAutoMinValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GainAutoMinValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects which Gain is controlled by the various Gain features.
  /// </summary>
  public CGainSelector GainSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GainSelector_set(swigCPtr, CGainSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GainSelector_get(swigCPtr);
      CGainSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGainSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Controls the gamma correction of pixel intensity. This is typically used to compensate for non-linearity of the display system (such as CRT).
  /// </summary>
  public DoubleFeature Gamma {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Gamma_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Gamma_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the device access privilege of an application.
  /// </summary>
  public CGevCCP GevCCP {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevCCP_set(swigCPtr, CGevCCP.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevCCP_get(swigCPtr);
      CGevCCP ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGevCCP(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Reports the default gateway IP address of the given logical link.
  /// </summary>
  public IntegerFeature GevCurrentDefaultGateway {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevCurrentDefaultGateway_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevCurrentDefaultGateway_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the IP address for the given logical link.
  /// </summary>
  public IntegerFeature GevCurrentIPAddress {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevCurrentIPAddress_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevCurrentIPAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls whether the DHCP IP configuration scheme is activated on the given logical link.
  /// </summary>
  public BoolFeature GevCurrentIPConfigurationDHCP {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevCurrentIPConfigurationDHCP_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevCurrentIPConfigurationDHCP_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls whether the Link Local Address IP configuration scheme is activated on the given logical link.
  /// </summary>
  public BoolFeature GevCurrentIPConfigurationLLA {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevCurrentIPConfigurationLLA_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevCurrentIPConfigurationLLA_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls whether the PersistentIP configuration scheme is activated on the given logical link.
  /// </summary>
  public BoolFeature GevCurrentIPConfigurationPersistentIP {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevCurrentIPConfigurationPersistentIP_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevCurrentIPConfigurationPersistentIP_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Reports the subnet mask of the given logical link.
  /// </summary>
  public IntegerFeature GevCurrentSubnetMask {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevCurrentSubnetMask_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevCurrentSubnetMask_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Indicates the maximum randomized delay the device will wait to acknowledge a discovery command.
  /// </summary>
  public IntegerFeature GevDiscoveryAckDelay {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevDiscoveryAckDelay_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevDiscoveryAckDelay_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Indicates the first URL to the GenICam XML device description file. The First URL is used as the first choice by the application to retrieve the GenICam XML device description file.
  /// </summary>
  public StringFeature GevFirstURL {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevFirstURL_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevFirstURL_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables the generation of extended status codes.
  /// </summary>
  public BoolFeature GevGVCPExtendedStatusCodes {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevGVCPExtendedStatusCodes_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevGVCPExtendedStatusCodes_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the GigE Vision version to control extended status codes for.
  /// </summary>
  public CGevGVCPExtendedStatusCodesSelector GevGVCPExtendedStatusCodesSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevGVCPExtendedStatusCodesSelector_set(swigCPtr, CGevGVCPExtendedStatusCodesSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevGVCPExtendedStatusCodesSelector_get(swigCPtr);
      CGevGVCPExtendedStatusCodesSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGevGVCPExtendedStatusCodesSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the generation of PENDING_ACK.
  /// </summary>
  public BoolFeature GevGVCPPendingAck {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevGVCPPendingAck_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevGVCPPendingAck_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Reports the current IP configuration status.
  /// </summary>
  public CGevIPConfigurationStatus GevIPConfigurationStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevIPConfigurationStatus_set(swigCPtr, CGevIPConfigurationStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevIPConfigurationStatus_get(swigCPtr);
      CGevIPConfigurationStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGevIPConfigurationStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects which logical link to control.
  /// </summary>
  public IntegerFeature GevInterfaceSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevInterfaceSelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevInterfaceSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// MAC address of the logical link.
  /// </summary>
  public IntegerFeature GevMACAddress {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevMACAddress_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevMACAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the destination IP address for the message channel.
  /// </summary>
  public IntegerFeature GevMCDA {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevMCDA_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevMCDA_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the port to which the device must send messages. Setting this value to 0 closes the message channel.
  /// </summary>
  public IntegerFeature GevMCPHostPort {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevMCPHostPort_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevMCPHostPort_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the number of retransmissions allowed when a message channel message times out.
  /// </summary>
  public IntegerFeature GevMCRC {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevMCRC_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevMCRC_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// This feature indicates the source port for the message channel.
  /// </summary>
  public IntegerFeature GevMCSP {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevMCSP_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevMCSP_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the transmission timeout value in milliseconds.
  /// </summary>
  public IntegerFeature GevMCTT {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevMCTT_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevMCTT_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls whether incoming PAUSE Frames are handled on the given logical link.
  /// </summary>
  public BoolFeature GevPAUSEFrameReception {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevPAUSEFrameReception_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevPAUSEFrameReception_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls whether PAUSE Frames can be generated on the given logical link.
  /// </summary>
  public BoolFeature GevPAUSEFrameTransmission {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevPAUSEFrameTransmission_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevPAUSEFrameTransmission_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls the persistent default gateway for this logical link. It is only used when the device boots with the Persistent IP configuration scheme.
  /// </summary>
  public IntegerFeature GevPersistentDefaultGateway {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevPersistentDefaultGateway_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevPersistentDefaultGateway_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the Persistent IP address for this logical link. It is only used when the device boots with the Persistent IP configuration scheme.
  /// </summary>
  public IntegerFeature GevPersistentIPAddress {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevPersistentIPAddress_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevPersistentIPAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the Persistent subnet mask associated with the Persistent IP address on this logical link. It is only used when the device boots with the Persistent IP configuration scheme.
  /// </summary>
  public IntegerFeature GevPersistentSubnetMask {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevPersistentSubnetMask_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevPersistentSubnetMask_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the address of the primary application.
  /// </summary>
  public IntegerFeature GevPrimaryApplicationIPAddress {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevPrimaryApplicationIPAddress_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevPrimaryApplicationIPAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the UDP source port of the primary application.
  /// </summary>
  public IntegerFeature GevPrimaryApplicationSocket {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevPrimaryApplicationSocket_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevPrimaryApplicationSocket_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the key to use to authenticate primary application switchover requests.
  /// </summary>
  public IntegerFeature GevPrimaryApplicationSwitchoverKey {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevPrimaryApplicationSwitchoverKey_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevPrimaryApplicationSwitchoverKey_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the camera to continue to stream, for this stream channel, if its control channel is closed or regardless of the reception of any ICMP messages (such as destination unreachable messages).
  /// </summary>
  public BoolFeature GevSCCFGUnconditionalStreaming {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCCFGUnconditionalStreaming_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCCFGUnconditionalStreaming_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls the destination IP address of the selected stream channel to which a GVSP transmitter must send data stream or the destination IP address from which a GVSP receiver may receive data stream.
  /// </summary>
  public IntegerFeature GevSCDA {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCDA_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCDA_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Indicates the delay in timestamp counter unit to insert between each block (image) for the selected Stream Channel.
  /// </summary>
  public IntegerFeature GevSCFTD {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCFTD_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCFTD_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the delay (in GEV timestamp counter unit) to insert between each packet for this stream channel. This can be used as a crude flow-control mechanism if the application or the network infrastructure cannot keep up with the packets coming from the device.
  /// </summary>
  public IntegerFeature GevSCPD {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCPD_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCPD_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the port of the selected channel to which a GVSP transmitter must send data stream or the port from which a GVSP receiver may receive data stream. Setting this value to 0 closes the stream channel.
  /// </summary>
  public IntegerFeature GevSCPHostPort {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCPHostPort_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCPHostPort_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Index of the logical link to use.
  /// </summary>
  public IntegerFeature GevSCPInterfaceIndex {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCPInterfaceIndex_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCPInterfaceIndex_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// The state of this feature is copied into the "do not fragment" bit of IP header of each stream packet. It can be used by the application to prevent IP fragmentation of packets on the stream channel.
  /// </summary>
  public BoolFeature GevSCPSDoNotFragment {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCPSDoNotFragment_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCPSDoNotFragment_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sends a test packet. When this feature is set, the device will fire one test packet.
  /// </summary>
  public BoolFeature GevSCPSFireTestPacket {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCPSFireTestPacket_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCPSFireTestPacket_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// This GigE Vision specific feature corresponds to DeviceStreamChannelPacketSize and should be kept in sync with it. It specifies the stream packet size, in bytes, to send on the selected channel for a GVSP transmitter or specifies the maximum packet size supported by a GVSP receiver.
  /// </summary>
  public IntegerFeature GevSCPSPacketSize {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCPSPacketSize_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCPSPacketSize_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Indicates the source port of the stream channel.
  /// </summary>
  public IntegerFeature GevSCSP {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSCSP_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSCSP_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Indicates the second URL to the GenICam XML device description file. This URL is an alternative if the application was unsuccessful to retrieve the device description file using the first URL.
  /// </summary>
  public StringFeature GevSecondURL {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSecondURL_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSecondURL_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the stream channel to control.
  /// </summary>
  public IntegerFeature GevStreamChannelSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevStreamChannelSelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevStreamChannelSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns if the selected GEV option is supported.
  /// </summary>
  public BoolFeature GevSupportedOption {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSupportedOption_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSupportedOption_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the GEV option to interrogate for existing support.
  /// </summary>
  public CGevSupportedOptionSelector GevSupportedOptionSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_GevSupportedOptionSelector_set(swigCPtr, CGevSupportedOptionSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_GevSupportedOptionSelector_get(swigCPtr);
      CGevSupportedOptionSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CGevSupportedOptionSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the High Dynamic Range mode of the camera.
  /// </summary>
  public BoolFeature HDREnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDREnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDREnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables the TriggerAutoMode mode for HDR Mode of the camera.
  /// </summary>
  public BoolFeature HDREnableTriggerAutoMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDREnableTriggerAutoMode_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDREnableTriggerAutoMode_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the ratio of the total exposure time for the selected slope.
  /// </summary>
  public IntegerFeature HDRExposureRatio {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRExposureRatio_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRExposureRatio_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the ratio of the total exposure time for the selected slope expressed in percent.
  /// </summary>
  public DoubleFeature HDRExposureRatioPercent {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRExposureRatioPercent_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRExposureRatioPercent_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the exposure time for bright areas of image. This value represents the short exposure time, which is derived from (long) ExposureTime divided by HDRExposureTimeRatio.
  /// </summary>
  public DoubleFeature HDRExposureTimeBrightArea {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRExposureTimeBrightArea_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRExposureTimeBrightArea_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the exposure time for dark areas of image. This value represents the long exposure timea and is equal to the specified value of the standard feature ExposureTime.
  /// </summary>
  public DoubleFeature HDRExposureTimeDarkArea {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRExposureTimeDarkArea_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRExposureTimeDarkArea_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the exposure time ratio for HDR mode. Valid values are only power-of-two numbers. The feature will snap to next/previous valid value when current value is incremented/decremented, else it will round to nearest valid value.
  /// </summary>
  public IntegerFeature HDRExposureTimeRatio {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRExposureTimeRatio_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRExposureTimeRatio_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the sensor gain for bright areas of image. This value represents the lower gain used as offset for the HDR image.
  /// </summary>
  public IntegerFeature HDRGainBrightArea {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRGainBrightArea_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRGainBrightArea_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the sensor gain for dark areas of image. This value represents the higher gain, which is derived from lower gain and HDRGainRatio.
  /// </summary>
  public IntegerFeature HDRGainDarkArea {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRGainDarkArea_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRGainDarkArea_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the gain ratio for HDR mode.
  /// </summary>
  public DoubleFeature HDRGainRatio {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRGainRatio_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRGainRatio_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the gain ratio for HDR mode.
  /// </summary>
  public CHDRGainRatioSelector HDRGainRatioSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRGainRatioSelector_set(swigCPtr, CHDRGainRatioSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRGainRatioSelector_get(swigCPtr);
      CHDRGainRatioSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CHDRGainRatioSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the index of the HDR element to access.
  /// </summary>
  public IntegerFeature HDRIndex {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRIndex_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRIndex_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the saturation threshold of the selected slope.
  /// </summary>
  public IntegerFeature HDRPotentialAbs {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRPotentialAbs_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRPotentialAbs_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the calculation of an interleaved HDR image of the sensor to an HDR image. If this feature is disabled while HDR is enabled the interleaved HDR image of the sensor will be output.
  /// </summary>
  public BoolFeature HDRProcessingEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRProcessingEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRProcessingEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables smoothing of normalized neighbor pixels in HDR mode.
  /// </summary>
  public BoolFeature HDRProcessingSmoothingEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRProcessingSmoothingEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRProcessingSmoothingEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Specifies the upper threshold to determine valid pixels for HDR processing.
  /// </summary>
  public IntegerFeature HDRProcessingThresholdMax {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRProcessingThresholdMax_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRProcessingThresholdMax_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Specifies the lower threshold to determine valid pixels for HDR processing.
  /// </summary>
  public IntegerFeature HDRProcessingThresholdMin {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRProcessingThresholdMin_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRProcessingThresholdMin_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the split view of interleaved HDR image.
  /// </summary>
  public BoolFeature HDRSplitviewEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRSplitviewEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRSplitviewEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the gradient at selected grid point for HDR tone-mapping transfer curve.
  /// </summary>
  public DoubleFeature HDRTonemappingCurveGradient {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurveGradient_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurveGradient_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the grid point for HDR tone-mapping transfer curve.
  /// </summary>
  public IntegerFeature HDRTonemappingCurveGridpoint {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurveGridpoint_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurveGridpoint_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the index of grid point for the user-defined tone-mapping curve.
  /// </summary>
  public IntegerFeature HDRTonemappingCurveGridpointIndex {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurveGridpointIndex_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurveGridpointIndex_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the offset at selected grid point for HDR tone-mapping transfer curve.
  /// </summary>
  public IntegerFeature HDRTonemappingCurveOffset {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurveOffset_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurveOffset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the predefined transfer curve for global tone-mapping of the calculated HDR image.
  /// </summary>
  public CHDRTonemappingCurvePresetSelector HDRTonemappingCurvePresetSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurvePresetSelector_set(swigCPtr, CHDRTonemappingCurvePresetSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurvePresetSelector_get(swigCPtr);
      CHDRTonemappingCurvePresetSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CHDRTonemappingCurvePresetSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Resets the tone-mapping curve to the selected HDRTonemappingCurvePreset.
  /// </summary>
  public CommandFeature HDRTonemappingCurveResetToPreset {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingCurveResetToPreset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables the tone-mapping of calculated HDR image. If this feature is deactivated HDR pixels are only cropped to width of specified output pixelformat and HDR information will be lost..
  /// </summary>
  public BoolFeature HDRTonemappingEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Specifies the statistical maximal pixel value for local tone-mapping of the calculated HDR image.
  /// </summary>
  public IntegerFeature HDRTonemappingMax {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingMax_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingMax_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Specifies the statistical mean value for local tone-mapping of the calculated HDR image.
  /// </summary>
  public IntegerFeature HDRTonemappingMean {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingMean_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HDRTonemappingMean_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the HQ Mode of the camera with lower sensor frequency.
  /// </summary>
  public BoolFeature HQModeEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HQModeEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HQModeEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Height of the image provided by the device (in pixels).
  /// </summary>
  public IntegerFeature Height {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Height_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Height_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Maximum height of the image (in pixels). This dimension is calculated after vertical binning, decimation or any other function changing the vertical dimension of the image.
  /// </summary>
  public IntegerFeature HeightMax {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HeightMax_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HeightMax_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the high conversion gain of the sensor.
  /// </summary>
  public DoubleFeature HighConversionGain {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HighConversionGain_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HighConversionGain_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the high conversion gain mode inside the sensor.
  /// </summary>
  public BoolFeature HighConversionGainEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_HighConversionGainEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_HighConversionGainEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Control the rate of the produced compressed stream.
  /// </summary>
  public DoubleFeature ImageCompressionBitrate {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionBitrate_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionBitrate_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// When JPEG is selected as the compression format, a device might optionally offer better control over JPEG-specific options through this feature.
  /// </summary>
  public CImageCompressionJPEGFormatOption ImageCompressionJPEGFormatOption {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionJPEGFormatOption_set(swigCPtr, CImageCompressionJPEGFormatOption.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionJPEGFormatOption_get(swigCPtr);
      CImageCompressionJPEGFormatOption ret = (cPtr == global::System.IntPtr.Zero) ? null : new CImageCompressionJPEGFormatOption(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enable a specific image compression mode as the base mode for image transfer. Optionally, chunk data can be appended to the compressed image.
  /// </summary>
  public CImageCompressionMode ImageCompressionMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionMode_set(swigCPtr, CImageCompressionMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionMode_get(swigCPtr);
      CImageCompressionMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CImageCompressionMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Control the quality of the produced compressed stream.
  /// </summary>
  public IntegerFeature ImageCompressionQuality {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionQuality_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionQuality_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Two rate controlling options are offered: fixed bit rate or fixed quality. The exact implementation to achieve one or the other is vendor-specific.
  /// </summary>
  public CImageCompressionRateOption ImageCompressionRateOption {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionRateOption_set(swigCPtr, CImageCompressionRateOption.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionRateOption_get(swigCPtr);
      CImageCompressionRateOption ret = (cPtr == global::System.IntPtr.Zero) ? null : new CImageCompressionRateOption(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Describe the Version of Image Compression implementation.
  /// </summary>
  public StringFeature ImageCompressionVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionVersion_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ImageCompressionVersion_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the data of the image. The size of the image itself is given in the Length element of the feature. The start address is stored in the element Address of the feature.
  /// </summary>
  public RegisterFeature ImageData {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ImageData_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        RegisterFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new RegisterFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables the feature ImageData. If it is switch off the feature ImageData is not available.
  /// </summary>
  public BoolFeature ImageDataEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ImageDataEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ImageDataEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the interface speed mode as string.
  /// </summary>
  public CInterfaceSpeedMode InterfaceSpeedMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_InterfaceSpeedMode_set(swigCPtr, CInterfaceSpeedMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_InterfaceSpeedMode_get(swigCPtr);
      CInterfaceSpeedMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CInterfaceSpeedMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Specifies the content of the selected LUT.
  /// </summary>
  public CLUTContent LUTContent {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LUTContent_set(swigCPtr, CLUTContent.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LUTContent_get(swigCPtr);
      CLUTContent ret = (cPtr == global::System.IntPtr.Zero) ? null : new CLUTContent(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Activates the selected LUT.
  /// </summary>
  public BoolFeature LUTEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LUTEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LUTEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Control the index (offset) of the coefficient to access in the selected LUT.
  /// </summary>
  public IntegerFeature LUTIndex {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LUTIndex_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LUTIndex_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects which LUT to control.
  /// </summary>
  public CLUTSelector LUTSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LUTSelector_set(swigCPtr, CLUTSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LUTSelector_get(swigCPtr);
      CLUTSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CLUTSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the Value at entry LUTIndex of the LUT selected by LUTSelector.
  /// </summary>
  public IntegerFeature LUTValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LUTValue_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LUTValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the absolute value of the selected line debouncer time in microseconds for switch from low to high.
  /// </summary>
  public DoubleFeature LineDebouncerHighTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineDebouncerHighTime_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineDebouncerHighTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the absolute value of the selected line debouncer time in microseconds for switch from low to high.
  /// </summary>
  public DoubleFeature LineDebouncerHighTimeAbs {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineDebouncerHighTimeAbs_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineDebouncerHighTimeAbs_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the absolute value of the selected line debouncer time in microseconds for switch from high to low.
  /// </summary>
  public DoubleFeature LineDebouncerLowTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineDebouncerLowTime_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineDebouncerLowTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the absolute value of the selected line debouncer time in microseconds for switch from high to low.
  /// </summary>
  public DoubleFeature LineDebouncerLowTimeAbs {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineDebouncerLowTimeAbs_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineDebouncerLowTimeAbs_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the current electrical format of the selected physical input or output Line.
  /// </summary>
  public CLineFormat LineFormat {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineFormat_set(swigCPtr, CLineFormat.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineFormat_get(swigCPtr);
      CLineFormat ret = (cPtr == global::System.IntPtr.Zero) ? null : new CLineFormat(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Controls the inversion of the signal of the selected input or output Line.
  /// </summary>
  public BoolFeature LineInverter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineInverter_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineInverter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the minimal length of a line internal reading by the camera in pixels.
  /// </summary>
  public IntegerFeature LineLengthMin {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineLengthMin_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineLengthMin_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls if the physical Line is used to Input or Output a signal.
  /// </summary>
  public CLineMode LineMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineMode_set(swigCPtr, CLineMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineMode_get(swigCPtr);
      CLineMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CLineMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the line PWM configuration mode.
  /// </summary>
  public CLinePWMConfigurationMode LinePWMConfigurationMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LinePWMConfigurationMode_set(swigCPtr, CLinePWMConfigurationMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LinePWMConfigurationMode_get(swigCPtr);
      CLinePWMConfigurationMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CLinePWMConfigurationMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the duration in microseconds.
  /// </summary>
  public IntegerFeature LinePWMDuration {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LinePWMDuration_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LinePWMDuration_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the duty cycle in percent.
  /// </summary>
  public IntegerFeature LinePWMDutyCycle {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LinePWMDutyCycle_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LinePWMDutyCycle_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the maximum duration in microseconds.
  /// </summary>
  public IntegerFeature LinePWMMaxDuration {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LinePWMMaxDuration_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LinePWMMaxDuration_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the maximal duty cycle in percent.
  /// </summary>
  public IntegerFeature LinePWMMaxDutyCycle {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LinePWMMaxDutyCycle_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LinePWMMaxDutyCycle_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the line PWM configuration mode.
  /// </summary>
  public CLinePWMMode LinePWMMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LinePWMMode_set(swigCPtr, CLinePWMMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LinePWMMode_get(swigCPtr);
      CLinePWMMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CLinePWMMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the off time included in the PWM Period in microseconds.
  /// </summary>
  public IntegerFeature LinePWMOffTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LinePWMOffTime_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LinePWMOffTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the period time calculated of the given Duration and Duty Cycle in microseconds.
  /// </summary>
  public IntegerFeature LinePWMPeriodTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LinePWMPeriodTime_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LinePWMPeriodTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the physical line (or pin) of the external device connector or the virtual line of the Transport Layer to configure.
  /// </summary>
  public CLineSelector LineSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineSelector_set(swigCPtr, CLineSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineSelector_get(swigCPtr);
      CLineSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CLineSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects which internal acquisition or I/O source signal to output on the selected Line. LineMode must be Output.
  /// </summary>
  public CLineSource LineSource {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineSource_set(swigCPtr, CLineSource.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineSource_get(swigCPtr);
      CLineSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new CLineSource(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the current status of the selected input or output Line.
  /// </summary>
  public BoolFeature LineStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineStatus_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineStatus_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the current status of all available Line signals at time of polling in a single bitfield.
  /// </summary>
  public IntegerFeature LineStatusAll {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LineStatusAll_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LineStatusAll_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of lost events.
  /// </summary>
  public IntegerFeature LostEventCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_LostEventCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_LostEventCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the Median filter.
  /// </summary>
  public BoolFeature MedianFilterEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MedianFilterEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MedianFilterEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the active memory part to write the images in.
  /// </summary>
  public CMemoryActivePart MemoryActivePart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryActivePart_set(swigCPtr, CMemoryActivePart.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryActivePart_get(swigCPtr);
      CMemoryActivePart ret = (cPtr == global::System.IntPtr.Zero) ? null : new CMemoryActivePart(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the number of filled memory blocks.
  /// </summary>
  public IntegerFeature MemoryFilledBlocks {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryFilledBlocks_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryFilledBlocks_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of free memory blocks.
  /// </summary>
  public IntegerFeature MemoryFreeBlocks {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryFreeBlocks_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryFreeBlocks_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the maximum number of available memory blocks.It depends on partial scan features, pixelformat and selected acquisition format.
  /// </summary>
  public IntegerFeature MemoryMaxBlocks {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryMaxBlocks_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryMaxBlocks_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the mode to use the memory.
  /// </summary>
  public CMemoryMode MemoryMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryMode_set(swigCPtr, CMemoryMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryMode_get(swigCPtr);
      CMemoryMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CMemoryMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the index of the actual used memory block.
  /// </summary>
  public IntegerFeature MemoryPartActiveBlock {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryPartActiveBlock_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryPartActiveBlock_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sest the number of available memory blocks in the selected memory part.
  /// </summary>
  public IntegerFeature MemoryPartBlocks {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryPartBlocks_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryPartBlocks_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of filled memory blocks in the selected memory part.
  /// </summary>
  public IntegerFeature MemoryPartFilledBlocks {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryPartFilledBlocks_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryPartFilledBlocks_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of free memory blocks in the selected memory part.
  /// </summary>
  public IntegerFeature MemoryPartFreeBlocks {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryPartFreeBlocks_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryPartFreeBlocks_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Writes to the command switch the active memory part incremental.
  /// </summary>
  public CommandFeature MemoryPartIncrementSoftware {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryPartIncrementSoftware_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the source to switch the active memory part.
  /// </summary>
  public CMemoryPartIncrementSource MemoryPartIncrementSource {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryPartIncrementSource_set(swigCPtr, CMemoryPartIncrementSource.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryPartIncrementSource_get(swigCPtr);
      CMemoryPartIncrementSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new CMemoryPartIncrementSource(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the mode to use for the selected memory part.
  /// </summary>
  public CMemoryPartMode MemoryPartMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryPartMode_set(swigCPtr, CMemoryPartMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryPartMode_get(swigCPtr);
      CMemoryPartMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CMemoryPartMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the ratio of preview images transmitted to host. A Value of 0 means no images are transmitted. A Value of 1 means every image will be transmitted and so on.
  /// </summary>
  public IntegerFeature MemoryPartPreviewRatio {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryPartPreviewRatio_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryPartPreviewRatio_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects on of the available memory parts.
  /// </summary>
  public CMemoryPartSelector MemoryPartSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_MemoryPartSelector_set(swigCPtr, CMemoryPartSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_MemoryPartSelector_get(swigCPtr);
      CMemoryPartSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CMemoryPartSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Horizontal offset from the origin to the region of interest (in pixels).
  /// </summary>
  public IntegerFeature OffsetX {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OffsetX_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OffsetX_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Vertical offset from the origin to the region of interest (in pixels).
  /// </summary>
  public IntegerFeature OffsetY {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OffsetY_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OffsetY_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Prepares the optic controller for removal.
  /// </summary>
  public CommandFeature OpticControllerDisconnect {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerDisconnect_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Name of the device family of the optic controller.
  /// </summary>
  public StringFeature OpticControllerFamilyName {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerFamilyName_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerFamilyName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Version of the firmware in the optic controller.
  /// </summary>
  public StringFeature OpticControllerFirmwareVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerFirmwareVersion_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerFirmwareVersion_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Initializes the selected optic controller and makes it ready for use.
  /// </summary>
  public CommandFeature OpticControllerInitialize {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerInitialize_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Model name of the optic controller.
  /// </summary>
  public StringFeature OpticControllerModelName {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerModelName_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerModelName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects which optic controller to configure.
  /// </summary>
  public COpticControllerSelector OpticControllerSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerSelector_set(swigCPtr, COpticControllerSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerSelector_get(swigCPtr);
      COpticControllerSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new COpticControllerSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Serial number of the optic controller.
  /// </summary>
  public StringFeature OpticControllerSerialNumber {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerSerialNumber_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerSerialNumber_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Reads the status of the optic controller.
  /// </summary>
  public COpticControllerStatus OpticControllerStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerStatus_set(swigCPtr, COpticControllerStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerStatus_get(swigCPtr);
      COpticControllerStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new COpticControllerStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Temperature of the optic controller in degrees Celsius (C).
  /// </summary>
  public DoubleFeature OpticControllerTemperature {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerTemperature_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerTemperature_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the thermal compensation of the optic controller.
  /// </summary>
  public BoolFeature OpticControllerThermalCompensation {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerThermalCompensation_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerThermalCompensation_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Name of the manufacturer of the optic controller.
  /// </summary>
  public StringFeature OpticControllerVendorName {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerVendorName_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerVendorName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Version of the optic controller.
  /// </summary>
  public StringFeature OpticControllerVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_OpticControllerVersion_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_OpticControllerVersion_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// PIN to unlock the camera stream.
  /// </summary>
  public IntegerFeature PIN {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PIN_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PIN_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the partial scan readout.
  /// </summary>
  public CPartialScanEnabled PartialScanEnabled {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PartialScanEnabled_set(swigCPtr, CPartialScanEnabled.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PartialScanEnabled_get(swigCPtr);
      CPartialScanEnabled ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPartialScanEnabled(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Provides the number of bytes transferred for each data buffer or chunk on the stream channel. This includes any end-of-line, end-of-frame statistics or other stamp data. This is the total size of data payload for a data block.
  /// </summary>
  public IntegerFeature PayloadSize {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PayloadSize_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PayloadSize_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the physical pixel size X in um.
  /// </summary>
  public DoubleFeature PhysicalPixelSizeX {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PhysicalPixelSizeX_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PhysicalPixelSizeX_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the physical pixel size Y in um.
  /// </summary>
  public DoubleFeature PhysicalPixelSizeY {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PhysicalPixelSizeY_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PhysicalPixelSizeY_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the dark pixel and warm pixel correction.
  /// </summary>
  public BoolFeature PixelCorrectionEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PixelCorrectionEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PixelCorrectionEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the threshold for Pixel correction.
  /// </summary>
  public IntegerFeature PixelCorrectionThreshold {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PixelCorrectionThreshold_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PixelCorrectionThreshold_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Format of the pixels provided by the device. It represents all the information provided by PixelSize, PixelColorFilter combined in a single feature.
  /// </summary>
  public CPixelFormat PixelFormat {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PixelFormat_set(swigCPtr, CPixelFormat.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PixelFormat_get(swigCPtr);
      CPixelFormat ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPixelFormat(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Indicates the expected accuracy of the device PTP clock when it is the grandmaster, or in the event it becomes the grandmaster.
  /// </summary>
  public CPtpClockAccuracy PtpClockAccuracy {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpClockAccuracy_set(swigCPtr, CPtpClockAccuracy.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpClockAccuracy_get(swigCPtr);
      CPtpClockAccuracy ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPtpClockAccuracy(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the latched clock ID of the PTP device.
  /// </summary>
  public IntegerFeature PtpClockID {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpClockID_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpClockID_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the offset which will be added or subtracted to the cameras internal timestamp.
  /// </summary>
  public IntegerFeature PtpClockOffset {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpClockOffset_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpClockOffset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the mode to handle PtpClockOffset for command PtpClockOffsetSet.
  /// </summary>
  public CPtpClockOffsetMode PtpClockOffsetMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpClockOffsetMode_set(swigCPtr, CPtpClockOffsetMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpClockOffsetMode_get(swigCPtr);
      CPtpClockOffsetMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPtpClockOffsetMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets PtpClockOffset active like described in PtpClockOffsetMode.
  /// </summary>
  public CommandFeature PtpClockOffsetSet {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpClockOffsetSet_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Latches the current values from the device's PTP clock data set.
  /// </summary>
  public CommandFeature PtpDataSetLatch {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpDataSetLatch_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the offset which will be added or subtracted to the cameras internal timestamp increment.
  /// </summary>
  public IntegerFeature PtpDriftOffset {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpDriftOffset_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpDriftOffset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the mode to handle PtpDriftOffset for command PtpDriftOffsetSet.
  /// </summary>
  public CPtpDriftOffsetMode PtpDriftOffsetMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpDriftOffsetMode_set(swigCPtr, CPtpDriftOffsetMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpDriftOffsetMode_get(swigCPtr);
      CPtpDriftOffsetMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPtpDriftOffsetMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets PtpDriftOffset active like described in PtpDriftOffsetMode.
  /// </summary>
  public CommandFeature PtpDriftOffsetSet {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpDriftOffsetSet_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables the Precision Time Protocol (PTP).
  /// </summary>
  public BoolFeature PtpEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the latched grandmaster clock ID of the PTP device. The grandmaster clock ID is the clock ID of the current grandmaster clock.
  /// </summary>
  public IntegerFeature PtpGrandmasterClockID {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpGrandmasterClockID_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpGrandmasterClockID_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets ki value of servos pi controller if PtpUseControllerTestSettings = True.
  /// </summary>
  public DoubleFeature PtpKi {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpKi_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpKi_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets kp value of servos pi controller if PtpUseControllerTestSettings = True.
  /// </summary>
  public DoubleFeature PtpKp {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpKp_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpKp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the PTP clock type the device will act as.
  /// </summary>
  public CPtpMode PtpMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpMode_set(swigCPtr, CPtpMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpMode_get(swigCPtr);
      CPtpMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPtpMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the latched offset from the PTP master clock in nanoseconds.
  /// </summary>
  public IntegerFeature PtpOffsetFromMaster {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpOffsetFromMaster_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpOffsetFromMaster_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the latched parent clock ID of the PTP device. The parent clock ID is the clock ID of the current master clock.
  /// </summary>
  public IntegerFeature PtpParentClockID {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpParentClockID_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpParentClockID_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the latched state of the clock servo. When the servo is in a locked state, the value returned is 'Locked'. When the servo is in a non-locked state, a device-specific value can be returned to give specific information. If no device-specific value is available to describe the current state of the clock servo, the value should be 'Unknown'.
  /// </summary>
  public CPtpServoStatus PtpServoStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpServoStatus_set(swigCPtr, CPtpServoStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpServoStatus_get(swigCPtr);
      CPtpServoStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPtpServoStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the threshold of time difference to Ptp Master Clock for transition PtpServoStatus Unknown to Locked.
  /// </summary>
  public IntegerFeature PtpServoStatusThreshold {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpServoStatusThreshold_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpServoStatusThreshold_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the latched state of the PTP clock.
  /// </summary>
  public CPtpStatus PtpStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpStatus_set(swigCPtr, CPtpStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpStatus_get(swigCPtr);
      CPtpStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPtpStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the latched sync message interval from the PTP master clock in milliseconds.
  /// </summary>
  public DoubleFeature PtpSyncMessageInterval {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpSyncMessageInterval_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpSyncMessageInterval_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns if the latched sync message interval from the PTP master clock is supported by the device. An unsupported sync message interval may result in PtpServoStatus instability.
  /// </summary>
  public CPtpSyncMessageIntervalStatus PtpSyncMessageIntervalStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpSyncMessageIntervalStatus_set(swigCPtr, CPtpSyncMessageIntervalStatus.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpSyncMessageIntervalStatus_get(swigCPtr);
      CPtpSyncMessageIntervalStatus ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPtpSyncMessageIntervalStatus(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the offset which will be added or subtracted to the ptp ethernet Rx and/or Tx timestamps.
  /// </summary>
  public IntegerFeature PtpTimestampOffset {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpTimestampOffset_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpTimestampOffset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the mode to handle PtpTimestampOffset for command PtpTimestampOffsetSet.
  /// </summary>
  public CPtpTimestampOffsetMode PtpTimestampOffsetMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpTimestampOffsetMode_set(swigCPtr, CPtpTimestampOffsetMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpTimestampOffsetMode_get(swigCPtr);
      CPtpTimestampOffsetMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPtpTimestampOffsetMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets PtpTimestampOffset active like described in PtpTimestampOffsetMode.
  /// </summary>
  public CommandFeature PtpTimestampOffsetSet {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpTimestampOffsetSet_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Uses PtpKp and PtpKi as pi controller values.
  /// </summary>
  public BoolFeature PtpUseControllerTestSettings {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_PtpUseControllerTestSettings_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_PtpUseControllerTestSettings_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the number of image buffers filled with data of sensor output. If all buffers full the oldest buffer will be overwritten.
  /// </summary>
  public CReadOutBuffering ReadOutBuffering {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ReadOutBuffering_set(swigCPtr, CReadOutBuffering.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ReadOutBuffering_get(swigCPtr);
      CReadOutBuffering ret = (cPtr == global::System.IntPtr.Zero) ? null : new CReadOutBuffering(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the Readout Time in us for current format settings.
  /// </summary>
  public IntegerFeature ReadOutTime {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ReadOutTime_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ReadOutTime_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Specifies the operation mode of the readout for the acquisition.
  /// </summary>
  public CReadoutMode ReadoutMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ReadoutMode_set(swigCPtr, CReadoutMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ReadoutMode_get(swigCPtr);
      CReadoutMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CReadoutMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the acquisition mode of the regions.
  /// </summary>
  public CRegionAcquisitionMode RegionAcquisitionMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RegionAcquisitionMode_set(swigCPtr, CRegionAcquisitionMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RegionAcquisitionMode_get(swigCPtr);
      CRegionAcquisitionMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CRegionAcquisitionMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the configuration mode of the regions.
  /// </summary>
  public CRegionConfigurationMode RegionConfigurationMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RegionConfigurationMode_set(swigCPtr, CRegionConfigurationMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RegionConfigurationMode_get(swigCPtr);
      CRegionConfigurationMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CRegionConfigurationMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Controls if the selected Region of interest is active and streaming.
  /// </summary>
  public CRegionMode RegionMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RegionMode_set(swigCPtr, CRegionMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RegionMode_get(swigCPtr);
      CRegionMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CRegionMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the Region of interest to control. The RegionSelector feature allows devices that are able to extract multiple regions out of an image, to configure the features of those individual regions independently.
  /// </summary>
  public CRegionSelector RegionSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RegionSelector_set(swigCPtr, CRegionSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RegionSelector_get(swigCPtr);
      CRegionSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CRegionSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the transfer mode of the regions.
  /// </summary>
  public CRegionTransferMode RegionTransferMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RegionTransferMode_set(swigCPtr, CRegionTransferMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RegionTransferMode_get(swigCPtr);
      CRegionTransferMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CRegionTransferMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the Version of Multi ROI implementation.
  /// </summary>
  public StringFeature RegionVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RegionVersion_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RegionVersion_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Flip horizontally the image sent by the device. The Region of interest is applied after the flipping.
  /// </summary>
  public BoolFeature ReverseX {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ReverseX_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ReverseX_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Flip vertically the image sent by the device. The Region of interest is applied after the flipping.
  /// </summary>
  public BoolFeature ReverseY {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ReverseY_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ReverseY_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls the length of a serial acknowledge message from RS232 to the device.
  /// </summary>
  public IntegerFeature RxAcknowledgeLength {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RxAcknowledgeLength_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RxAcknowledgeLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of discarded messages in receiving direction.
  /// </summary>
  public IntegerFeature RxDiscardedMessages {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RxDiscardedMessages_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RxDiscardedMessages_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the received data if available.
  /// </summary>
  public RegisterFeature RxFiFo {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RxFiFo_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        RegisterFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new RegisterFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the length of the current received message in the RS232-Rx FIFO and 0 if no message was received.
  /// </summary>
  public IntegerFeature RxFiFoMessageLength {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RxFiFoMessageLength_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RxFiFoMessageLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the number of attempts to receive a message if direct receiving was not successful.
  /// </summary>
  public IntegerFeature RxRetryCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RxRetryCount_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RxRetryCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the maximum delay between to received bytes for recognition of message ends in bit times.
  /// </summary>
  public IntegerFeature RxSynchronizationDelay {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RxSynchronizationDelay_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RxSynchronizationDelay_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the maximum delay between to received bytes for recognition of message ends in us.
  /// </summary>
  public DoubleFeature RxSynchronizationDelayNormalized {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_RxSynchronizationDelayNormalized_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_RxSynchronizationDelayNormalized_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the streaming operation.
  /// </summary>
  public CSIControl SIControl {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SIControl_set(swigCPtr, CSIControl.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SIControl_get(swigCPtr);
      CSIControl ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSIControl(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the size of the first final Payload Transfer.
  /// </summary>
  public IntegerFeature SIPayloadFinalTransfer1Size {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SIPayloadFinalTransfer1Size_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SIPayloadFinalTransfer1Size_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the size of the second final Payload Transfer.
  /// </summary>
  public IntegerFeature SIPayloadFinalTransfer2Size {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SIPayloadFinalTransfer2Size_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SIPayloadFinalTransfer2Size_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the expected number of Payload Transfers.
  /// </summary>
  public IntegerFeature SIPayloadTransferCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SIPayloadTransferCount_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SIPayloadTransferCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the expected size of a single Payload Transfer.
  /// </summary>
  public IntegerFeature SIPayloadTransferSize {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SIPayloadTransferSize_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SIPayloadTransferSize_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// The maximum number of pixels per line for sensor 1.
  /// </summary>
  public IntegerFeature Sensor1XCutLength {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Sensor1XCutLength_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Sensor1XCutLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// The start point of pixel 0 on a line for sensor 1. It is programmed during sensor adjustment.
  /// </summary>
  public IntegerFeature Sensor1XCutStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Sensor1XCutStart_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Sensor1XCutStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// The maximum number of lines per image for sensor 1.
  /// </summary>
  public IntegerFeature Sensor1YCutLength {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Sensor1YCutLength_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Sensor1YCutLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// The start point of line 0 for in the image for sensor 1. It is programmed during sensor adjustment.
  /// </summary>
  public IntegerFeature Sensor1YCutStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Sensor1YCutStart_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Sensor1YCutStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// The maximum number of pixels per line for sensor 2.
  /// </summary>
  public IntegerFeature Sensor2XCutLength {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Sensor2XCutLength_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Sensor2XCutLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// The start point of pixel 0 on a line for sensor 2. It is programmed during sensor adjustment.
  /// </summary>
  public IntegerFeature Sensor2XCutStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Sensor2XCutStart_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Sensor2XCutStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// The maximum number of lines per image for sensor 2.
  /// </summary>
  public IntegerFeature Sensor2YCutLength {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Sensor2YCutLength_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Sensor2YCutLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// The start point of line 0 for in the image for sensor 2. It is programmed during sensor adjustment.
  /// </summary>
  public IntegerFeature Sensor2YCutStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Sensor2YCutStart_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Sensor2YCutStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the sensors AD digitization in bits per pixels.
  /// </summary>
  public CSensorADDigitization SensorADDigitization {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorADDigitization_set(swigCPtr, CSensorADDigitization.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorADDigitization_get(swigCPtr);
      CSensorADDigitization ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSensorADDigitization(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Number of digitized samples outputted simultaneously by the camera A/D conversion stage.
  /// </summary>
  public CSensorDigitizationTaps SensorDigitizationTaps {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorDigitizationTaps_set(swigCPtr, CSensorDigitizationTaps.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorDigitizationTaps_get(swigCPtr);
      CSensorDigitizationTaps ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSensorDigitizationTaps(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the Sensor Effect Correction.
  /// </summary>
  public BoolFeature SensorEffectCorrection {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorEffectCorrection_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorEffectCorrection_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the number of lost frames because of sensor FIFO overflow.
  /// </summary>
  public IntegerFeature SensorFiFoOverflowCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorFiFoOverflowCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorFiFoOverflowCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Resets the Sensor FIFO overflow counter to 0.
  /// </summary>
  public CommandFeature SensorFiFoOverflowCounterReset {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorFiFoOverflowCounterReset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Effective height of the sensor in pixels.
  /// </summary>
  public IntegerFeature SensorHeight {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorHeight_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorHeight_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Product name of the imaging Sensor.
  /// </summary>
  public StringFeature SensorName {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorName_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Physical size (pitch) in the y direction of a photo sensitive pixel unit.
  /// </summary>
  public DoubleFeature SensorPixelHeight {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorPixelHeight_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorPixelHeight_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Physical size (pitch) in the x direction of a photo sensitive pixel unit.
  /// </summary>
  public DoubleFeature SensorPixelWidth {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorPixelWidth_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorPixelWidth_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Specifies the shutter mode of the device.
  /// </summary>
  public CSensorShutterMode SensorShutterMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorShutterMode_set(swigCPtr, CSensorShutterMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorShutterMode_get(swigCPtr);
      CSensorShutterMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSensorShutterMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Number of taps of the camera sensor.
  /// </summary>
  public CSensorTaps SensorTaps {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorTaps_set(swigCPtr, CSensorTaps.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorTaps_get(swigCPtr);
      CSensorTaps ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSensorTaps(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Effective width of the sensor in pixels.
  /// </summary>
  public IntegerFeature SensorWidth {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SensorWidth_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SensorWidth_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls if the sequencer configuration mode is active.
  /// </summary>
  public CSequencerConfigurationMode SequencerConfigurationMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerConfigurationMode_set(swigCPtr, CSequencerConfigurationMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerConfigurationMode_get(swigCPtr);
      CSequencerConfigurationMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSequencerConfigurationMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the selected feature and make it active in all the sequencer sets.
  /// </summary>
  public BoolFeature SequencerFeatureEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerFeatureEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerFeatureEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects which sequencer features to control.
  /// </summary>
  public CSequencerFeatureSelector SequencerFeatureSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerFeatureSelector_set(swigCPtr, CSequencerFeatureSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerFeatureSelector_get(swigCPtr);
      CSequencerFeatureSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSequencerFeatureSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Controls if the sequencer mechanism is active.
  /// </summary>
  public CSequencerMode SequencerMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerMode_set(swigCPtr, CSequencerMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerMode_get(swigCPtr);
      CSequencerMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSequencerMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects to which branching path further path settings applies.
  /// </summary>
  public IntegerFeature SequencerPathSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerPathSelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerPathSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Contains the currently active sequencer set.
  /// </summary>
  public IntegerFeature SequencerSetActive {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerSetActive_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerSetActive_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Loads the sequencer set selected by SequencerSetSelector in the device. Even if SequencerMode is off, this will change the device state to the configuration of the selected set.
  /// </summary>
  public CommandFeature SequencerSetLoad {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerSetLoad_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Specifies the next sequencer set.
  /// </summary>
  public IntegerFeature SequencerSetNext {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerSetNext_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerSetNext_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Saves the current device state to the sequencer set selected by the SequencerSetSelector.
  /// </summary>
  public CommandFeature SequencerSetSave {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerSetSave_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the sequencer set to which further feature settings applies.
  /// </summary>
  public IntegerFeature SequencerSetSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerSetSelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerSetSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the initial/start sequencer set, which is the first set used within a sequencer.
  /// </summary>
  public IntegerFeature SequencerSetStart {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerSetStart_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerSetStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Specifies the activation mode of the sequencer trigger.
  /// </summary>
  public CSequencerTriggerActivation SequencerTriggerActivation {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerTriggerActivation_set(swigCPtr, CSequencerTriggerActivation.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerTriggerActivation_get(swigCPtr);
      CSequencerTriggerActivation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSequencerTriggerActivation(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Specifies the internal signal or physical input line to use as the sequencer trigger source.
  /// </summary>
  public CSequencerTriggerSource SequencerTriggerSource {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SequencerTriggerSource_set(swigCPtr, CSequencerTriggerSource.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SequencerTriggerSource_get(swigCPtr);
      CSequencerTriggerSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSequencerTriggerSource(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Starts Shading Calibration.
  /// </summary>
  public CommandFeature ShadingCalibrationStart {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShadingCalibrationStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables Shading Correction.
  /// </summary>
  public BoolFeature ShadingEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShadingEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShadingEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the maximum gain for Shading.
  /// </summary>
  public IntegerFeature ShadingMaxGain {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShadingMaxGain_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShadingMaxGain_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the Port Address for Shading as a hexadecimal value.
  /// </summary>
  public IntegerFeature ShadingPortAddress {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShadingPortAddress_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShadingPortAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the Shading Port Address.
  /// </summary>
  public CShadingSelector ShadingSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShadingSelector_set(swigCPtr, CShadingSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShadingSelector_get(swigCPtr);
      CShadingSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CShadingSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the number of pixels as border at x direction.
  /// </summary>
  public IntegerFeature ShadingXBorder {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShadingXBorder_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShadingXBorder_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of pixels as border at y direction.
  /// </summary>
  public IntegerFeature ShadingYBorder {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShadingYBorder_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShadingYBorder_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the Sharpening.
  /// </summary>
  public BoolFeature SharpeningEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SharpeningEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SharpeningEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the factor for Sharpening.
  /// </summary>
  public IntegerFeature SharpeningFactor {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SharpeningFactor_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SharpeningFactor_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the Sharpening Mode.
  /// </summary>
  public CSharpeningMode SharpeningMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SharpeningMode_set(swigCPtr, CSharpeningMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SharpeningMode_get(swigCPtr);
      CSharpeningMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSharpeningMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the value of the Sharpening Sensitivity Threshold.
  /// </summary>
  public IntegerFeature SharpeningSensitivityThreshold {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SharpeningSensitivityThreshold_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SharpeningSensitivityThreshold_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the value of the Sharpening Sensitivity Threshold.
  /// </summary>
  public IntegerFeature SharpeningSensitvityThreshold {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SharpeningSensitvityThreshold_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SharpeningSensitvityThreshold_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls if short exposure time should be supported. Note if this feature is enabled one cannot use the sequencer.
  /// </summary>
  public BoolFeature ShortExposureTimeEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShortExposureTimeEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShortExposureTimeEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables the correction of Shutter Line and Exposure Lines when set to True, disables it when set to False.
  /// </summary>
  public BoolFeature ShutterLineCorrectionEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShutterLineCorrectionEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShutterLineCorrectionEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the offset correction value that the camera applies to the even line in the "Shutter Line" region.
  /// </summary>
  public IntegerFeature ShutterLineOffsetEven {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShutterLineOffsetEven_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShutterLineOffsetEven_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the offset correction value that the camera applies to the odd line in the "Shutter Line" region.
  /// </summary>
  public IntegerFeature ShutterLineOffsetOdd {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_ShutterLineOffsetOdd_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_ShutterLineOffsetOdd_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls or returns the number of sources supported by the device.
  /// </summary>
  public IntegerFeature SourceCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SourceCount_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SourceCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns a unique Identifier value that correspond to the selected Source.
  /// </summary>
  public CSourceID SourceID {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SourceID_set(swigCPtr, CSourceID.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SourceID_get(swigCPtr);
      CSourceID ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSourceID(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns a unique Identifier value that correspond to the selected Source.
  /// </summary>
  public IntegerFeature SourceIDValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SourceIDValue_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SourceIDValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the source to control.
  /// </summary>
  public CSourceSelector SourceSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SourceSelector_set(swigCPtr, CSourceSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SourceSelector_get(swigCPtr);
      CSourceSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSourceSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns if the selected MAC address table entry is valid or not.
  /// </summary>
  public BoolFeature SwitchMACAddressTableEntryIsValid {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchMACAddressTableEntryIsValid_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchMACAddressTableEntryIsValid_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Provides the MAC address of the selected MAC address table entry.
  /// </summary>
  public IntegerFeature SwitchMACAddressTableEntryMACAddress {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchMACAddressTableEntryMACAddress_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchMACAddressTableEntryMACAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the port number of the selected MAC address table entry.
  /// </summary>
  public IntegerFeature SwitchMACAddressTableEntryPortNumber {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchMACAddressTableEntryPortNumber_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchMACAddressTableEntryPortNumber_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the MAC addresses table entry for the MAC address table entry related features.
  /// </summary>
  public IntegerFeature SwitchMACAddressTableEntrySelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchMACAddressTableEntrySelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchMACAddressTableEntrySelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the number MAC addresses at switches MAC address table.
  /// </summary>
  public IntegerFeature SwitchNumberOfMACAddresses {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchNumberOfMACAddresses_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchNumberOfMACAddresses_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the number of ports of the switch.
  /// </summary>
  public IntegerFeature SwitchNumberOfPorts {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchNumberOfPorts_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchNumberOfPorts_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the value of the broadcast valid counter.
  /// </summary>
  public IntegerFeature SwitchPortBroadcastValidCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortBroadcastValidCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortBroadcastValidCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the value of the buffer full counter.
  /// </summary>
  public IntegerFeature SwitchPortBufferFullCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortBufferFullCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortBufferFullCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the buffer size at the selected port.
  /// </summary>
  public IntegerFeature SwitchPortBufferSize {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortBufferSize_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortBufferSize_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the value of the CRC error counter.
  /// </summary>
  public IntegerFeature SwitchPortCRCErrorCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortCRCErrorCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortCRCErrorCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the value of the multicast valid counter.
  /// </summary>
  public IntegerFeature SwitchPortMulticastValidCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortMulticastValidCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortMulticastValidCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the number of buffers at the selected port.
  /// </summary>
  public IntegerFeature SwitchPortNumberOfBuffers {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortNumberOfBuffers_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortNumberOfBuffers_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the value of the PAUSE frame reception counter.
  /// </summary>
  public IntegerFeature SwitchPortPAUSEFrameReceptionCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortPAUSEFrameReceptionCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortPAUSEFrameReceptionCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the value of the Packet size error counter.
  /// </summary>
  public IntegerFeature SwitchPortPacketSizeErrorCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortPacketSizeErrorCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortPacketSizeErrorCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the port for the port related features.
  /// </summary>
  public CSwitchPortSelector SwitchPortSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortSelector_set(swigCPtr, CSwitchPortSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortSelector_get(swigCPtr);
      CSwitchPortSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CSwitchPortSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Returns the value of the unicast valid counter.
  /// </summary>
  public IntegerFeature SwitchPortUnicastValidCounter {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchPortUnicastValidCounter_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchPortUnicastValidCounter_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Provides the switch version.
  /// </summary>
  public IntegerFeature SwitchVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_SwitchVersion_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_SwitchVersion_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Used by the Transport Layer to prevent critical features from changing during acquisition.
  /// </summary>
  public IntegerFeature TLParamsLocked {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TLParamsLocked_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TLParamsLocked_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the type of test pattern that is generated by the device as image source.
  /// </summary>
  public CTestPattern TestPattern {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TestPattern_set(swigCPtr, CTestPattern.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TestPattern_get(swigCPtr);
      CTestPattern ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTestPattern(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects which test pattern generator is controlled by the TestPattern feature.
  /// </summary>
  public CTestPatternGeneratorSelector TestPatternGeneratorSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TestPatternGeneratorSelector_set(swigCPtr, CTestPatternGeneratorSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TestPatternGeneratorSelector_get(swigCPtr);
      CTestPatternGeneratorSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTestPatternGeneratorSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Tests the device's pending acknowledge feature. When this feature is written, the device waits a time period corresponding to the value of TestPendingAck before acknowledging the write.
  /// </summary>
  public IntegerFeature TestPendingAck {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TestPendingAck_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TestPendingAck_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the duration (in microseconds) of the delay to apply at the reception of a trigger before starting the Timer.
  /// </summary>
  public DoubleFeature TimerDelay {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimerDelay_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimerDelay_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the duration (in microseconds) of the Timer pulse.
  /// </summary>
  public DoubleFeature TimerDuration {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimerDuration_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimerDuration_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects which Timer to configure.
  /// </summary>
  public CTimerSelector TimerSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimerSelector_set(swigCPtr, CTimerSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimerSelector_get(swigCPtr);
      CTimerSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTimerSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the activation mode of the trigger to start the Timer.
  /// </summary>
  public CTimerTriggerActivation TimerTriggerActivation {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimerTriggerActivation_set(swigCPtr, CTimerTriggerActivation.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimerTriggerActivation_get(swigCPtr);
      CTimerTriggerActivation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTimerTriggerActivation(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the source of the trigger to start the Timer.
  /// </summary>
  public CTimerTriggerSource TimerTriggerSource {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimerTriggerSource_set(swigCPtr, CTimerTriggerSource.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimerTriggerSource_get(swigCPtr);
      CTimerTriggerSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTimerTriggerSource(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Latches the current timestamp counter into TimestampLatchValue.
  /// </summary>
  public CommandFeature TimestampLatch {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimestampLatch_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the latched value of the timestamp counter.
  /// </summary>
  public IntegerFeature TimestampLatchValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValue_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the latched value of the Ptp timestamp in days since 01.01.1970 00:00:00.
  /// </summary>
  public IntegerFeature TimestampLatchValuePtpDays {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpDays_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpDays_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the latched value of the Ptp timestamp in hours since 00:00 AM.
  /// </summary>
  public IntegerFeature TimestampLatchValuePtpHours {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpHours_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpHours_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the latched value of the Ptp timestamp in minutes since the last hour.
  /// </summary>
  public IntegerFeature TimestampLatchValuePtpMinutes {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpMinutes_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpMinutes_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the latched value of the Ptp timestamp in nanoseconds since the last second.
  /// </summary>
  public IntegerFeature TimestampLatchValuePtpNanoseconds {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpNanoseconds_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpNanoseconds_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the latched value of the Ptp timestamp counters in seconds since the last minute.
  /// </summary>
  public IntegerFeature TimestampLatchValuePtpSeconds {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpSeconds_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimestampLatchValuePtpSeconds_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Resets the current value of the device timestamp counter.
  /// </summary>
  public CommandFeature TimestampReset {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TimestampReset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the control method for the transfers.
  /// </summary>
  public CTransferControlMode TransferControlMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TransferControlMode_set(swigCPtr, CTransferControlMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TransferControlMode_get(swigCPtr);
      CTransferControlMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTransferControlMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the operation mode of the transfer.
  /// </summary>
  public CTransferOperationMode TransferOperationMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TransferOperationMode_set(swigCPtr, CTransferOperationMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TransferOperationMode_get(swigCPtr);
      CTransferOperationMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTransferOperationMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects which stream transfers are currently controlled by the selected Transfer features.
  /// </summary>
  public CTransferSelector TransferSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TransferSelector_set(swigCPtr, CTransferSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TransferSelector_get(swigCPtr);
      CTransferSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTransferSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Starts the streaming of data blocks out of the device. This feature must be available when the TransferControlMode is set to "UserControlled". If the TransferStart feature is not writable (locked), the application should not start the transfer and should avoid using the feature until it becomes writable again.
  /// </summary>
  public CommandFeature TransferStart {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TransferStart_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Reads the status of the Transfer module signal selected by TransferStatusSelector.
  /// </summary>
  public BoolFeature TransferStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TransferStatus_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TransferStatus_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects which status of the transfer module to read.
  /// </summary>
  public CTransferStatusSelector TransferStatusSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TransferStatusSelector_set(swigCPtr, CTransferStatusSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TransferStatusSelector_get(swigCPtr);
      CTransferStatusSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTransferStatusSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Stops the streaming of data Block(s). The current block transmission will be completed. This feature must be available when the TransferControlMode is set to "UserControlled".
  /// </summary>
  public CommandFeature TransferStop {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TransferStop_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Specifies the activation mode of the trigger.
  /// </summary>
  public CTriggerActivation TriggerActivation {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TriggerActivation_set(swigCPtr, CTriggerActivation.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerActivation_get(swigCPtr);
      CTriggerActivation ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTriggerActivation(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Latches the current timestamp counter into TimestampLatchValue.
  /// </summary>
  public CommandFeature TriggerCounterLatch {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerCounterLatch_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the latched value of the trigger counter.
  /// </summary>
  public IntegerFeature TriggerCounterLatchValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TriggerCounterLatchValue_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerCounterLatchValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Resets the current value of the device trigger counter.
  /// </summary>
  public CommandFeature TriggerCounterReset {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerCounterReset_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Specifies the delay in microseconds (us) to apply after the trigger reception before activating it.
  /// </summary>
  public DoubleFeature TriggerDelay {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TriggerDelay_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerDelay_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Generates the test event if the event channel for this event is enabled.
  /// </summary>
  public CommandFeature TriggerEventTest {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerEventTest_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Controls if the selected trigger is active.
  /// </summary>
  public CTriggerMode TriggerMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TriggerMode_set(swigCPtr, CTriggerMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerMode_get(swigCPtr);
      CTriggerMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTriggerMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Specifies the type trigger overlap permitted with the previous frame or line. This defines when a valid trigger will be accepted (or latched) for a new frame or a new line.
  /// </summary>
  public CTriggerOverlap TriggerOverlap {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TriggerOverlap_set(swigCPtr, CTriggerOverlap.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerOverlap_get(swigCPtr);
      CTriggerOverlap ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTriggerOverlap(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the type of trigger to configure.
  /// </summary>
  public CTriggerSelector TriggerSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TriggerSelector_set(swigCPtr, CTriggerSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerSelector_get(swigCPtr);
      CTriggerSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTriggerSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Generates an internal trigger. TriggerSource must be set to Software.
  /// </summary>
  public CommandFeature TriggerSoftware {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerSoftware_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Specifies the internal signal or physical input Line to use as the trigger source. The selected trigger must have its TriggerMode set to On.
  /// </summary>
  public CTriggerSource TriggerSource {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TriggerSource_set(swigCPtr, CTriggerSource.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TriggerSource_get(swigCPtr);
      CTriggerSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new CTriggerSource(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the delay between two consecutive bytes inside a sent message in bit times.
  /// </summary>
  public IntegerFeature TxByteDelay {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TxByteDelay_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TxByteDelay_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the delay between two consecutive bytes inside a sent message in us.
  /// </summary>
  public DoubleFeature TxByteDelayNormalized {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TxByteDelayNormalized_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TxByteDelayNormalized_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the Length of a serial command message from device to RS232.
  /// </summary>
  public IntegerFeature TxCommandoLength {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TxCommandoLength_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TxCommandoLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the number of unsent or discarded messages in sending direction.
  /// </summary>
  public IntegerFeature TxDiscardedMessages {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TxDiscardedMessages_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TxDiscardedMessages_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Writes into the FIFO for sending messages over RS232.
  /// </summary>
  public RegisterFeature TxFiFo {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TxFiFo_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        RegisterFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new RegisterFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Returns the number of RS232-Tx FIFO buffers currently free and usable.
  /// </summary>
  public IntegerFeature TxFiFoFreeBufferCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TxFiFoFreeBufferCount_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TxFiFoFreeBufferCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the minimal delay between last and first byte of two consecutive sent messages in bit times.
  /// </summary>
  public IntegerFeature TxMessageDelay {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TxMessageDelay_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TxMessageDelay_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the minimal delay between last and first byte of two consecutive sent messages in us.
  /// </summary>
  public DoubleFeature TxMessageDelayNormalized {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TxMessageDelayNormalized_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TxMessageDelayNormalized_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Sets the number of attempts to resend a message if direct sending was not successful.
  /// </summary>
  public IntegerFeature TxRetryCount {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_TxRetryCount_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_TxRetryCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Enables the streaming support for USB 2.0. Note, changing features value causes in an automatically reset of the device!
  /// </summary>
  public BoolFeature USB2SupportEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_USB2SupportEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_USB2SupportEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects which bit of the User Output register will be set by UserOutputValue.
  /// </summary>
  public CUserOutputSelector UserOutputSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_UserOutputSelector_set(swigCPtr, CUserOutputSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserOutputSelector_get(swigCPtr);
      CUserOutputSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CUserOutputSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the value of the bit selected by UserOutputSelector.
  /// </summary>
  public BoolFeature UserOutputValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_UserOutputValue_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserOutputValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the value of all the bits of the User Output register. It is subject to the UserOutputValueAllMask.
  /// </summary>
  public IntegerFeature UserOutputValueAll {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_UserOutputValueAll_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserOutputValueAll_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Returns the data of the selected UserSet. The size of the UserSet itself is given in the Length element of the feature. The start address is stored in the element Address of the feature. The feature is only available if the feature UserSetDataEnable is switched on.
  /// </summary>
  public RegisterFeature UserSetData {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserSetData_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        RegisterFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new RegisterFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables the feature UserSetData. If it is switch to off the feature UserSetData is not available.
  /// </summary>
  public BoolFeature UserSetDataEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_UserSetDataEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserSetDataEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the feature User Set to load and make active by default when the device is reset.
  /// </summary>
  public CUserSetDefault UserSetDefault {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_UserSetDefault_set(swigCPtr, CUserSetDefault.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserSetDefault_get(swigCPtr);
      CUserSetDefault ret = (cPtr == global::System.IntPtr.Zero) ? null : new CUserSetDefault(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Enables the selected feature and make it active in all the UserSets.
  /// </summary>
  public BoolFeature UserSetFeatureEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_UserSetFeatureEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserSetFeatureEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects which individual UserSet feature to control.
  /// </summary>
  public CUserSetFeatureSelector UserSetFeatureSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_UserSetFeatureSelector_set(swigCPtr, CUserSetFeatureSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserSetFeatureSelector_get(swigCPtr);
      CUserSetFeatureSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CUserSetFeatureSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Loads the User Set specified by UserSetSelector to the device and makes it active.
  /// </summary>
  public CommandFeature UserSetLoad {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserSetLoad_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Save the User Set specified by UserSetSelector to the non-volatile memory of the device.
  /// </summary>
  public CommandFeature UserSetSave {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserSetSave_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects the feature User Set to load, save or configure.
  /// </summary>
  public CUserSetSelector UserSetSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_UserSetSelector_set(swigCPtr, CUserSetSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserSetSelector_get(swigCPtr);
      CUserSetSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CUserSetSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Sets the selector for the Start Address of a single UserSet where the UserSet Data can read from.
  /// </summary>
  public IntegerFeature UserSetStartAddressSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_UserSetStartAddressSelector_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_UserSetStartAddressSelector_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls the mode for automatic white balancing between the color channels. The white balancing ratios are automatically adjusted.
  /// </summary>
  public CommandFeature WhiteBalance {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_WhiteBalance_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Width of the image provided by the device (in pixels).
  /// </summary>
  public IntegerFeature Width {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_Width_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_Width_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Maximum width of the image (in pixels). The dimension is calculated after horizontal binning, decimation or any other function changing the horizontal dimension of the image.
  /// </summary>
  public IntegerFeature WidthMax {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_WidthMax_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_WidthMax_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the number of discarded action command due to wrong action command parameters (DeviceKey, GroupKey, GroupMask).
  /// </summary>
  public IntegerFeature aActionCommandMACCtrlFramesError {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_aActionCommandMACCtrlFramesError_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_aActionCommandMACCtrlFramesError_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the number of received action command packets.
  /// </summary>
  public IntegerFeature aActionCommandMACCtrlFramesReceived {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_aActionCommandMACCtrlFramesReceived_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_aActionCommandMACCtrlFramesReceived_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the number of received PAUSE frames.
  /// </summary>
  public IntegerFeature aPAUSEMACCtrlFramesReceived {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_aPAUSEMACCtrlFramesReceived_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_aPAUSEMACCtrlFramesReceived_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the number of discarded packets due to wrong MAC address or wrong IP protocol or wrong UDP port or CRC error.
  /// </summary>
  public IntegerFeature aPacketMACCtrlFramesError {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_aPacketMACCtrlFramesError_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_aPacketMACCtrlFramesError_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the number of packets which cannot be received due to full receive buffers.
  /// </summary>
  public IntegerFeature aPacketMACCtrlFramesLost {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_aPacketMACCtrlFramesLost_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_aPacketMACCtrlFramesLost_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the number of correct received packets.
  /// </summary>
  public IntegerFeature aPacketMACCtrlFramesReceived {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_aPacketMACCtrlFramesReceived_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_aPacketMACCtrlFramesReceived_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the number of discarded resend packets due to wrong stream channel index or full resend queue.
  /// </summary>
  public IntegerFeature aResendMACCtrlFramesError {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_aResendMACCtrlFramesError_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_aResendMACCtrlFramesError_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Reports the number of received resend packets.
  /// </summary>
  public IntegerFeature aResendMACCtrlFramesReceived {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_aResendMACCtrlFramesReceived_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_aResendMACCtrlFramesReceived_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Angular aperture of the lens as the angular size of the lens aperture as seen from the focal point in degree.
  /// </summary>
  public DoubleFeature boCalibrationAngularAperture {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationAngularAperture_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationAngularAperture_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Controls if the calibration data configuration mode is active.
  /// </summary>
  public CboCalibrationDataConfigurationMode boCalibrationDataConfigurationMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationDataConfigurationMode_set(swigCPtr, CboCalibrationDataConfigurationMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationDataConfigurationMode_get(swigCPtr);
      CboCalibrationDataConfigurationMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboCalibrationDataConfigurationMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Saves the current calibration data.
  /// </summary>
  public CommandFeature boCalibrationDataSave {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationDataSave_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Version of the calibration data.
  /// </summary>
  public StringFeature boCalibrationDataVersion {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationDataVersion_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationDataVersion_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Focal length in millimeters (mm).
  /// </summary>
  public DoubleFeature boCalibrationFocalLength {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationFocalLength_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationFocalLength_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Selects the calibration matrix.
  /// </summary>
  public CboCalibrationMatrixSelector boCalibrationMatrixSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationMatrixSelector_set(swigCPtr, CboCalibrationMatrixSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationMatrixSelector_get(swigCPtr);
      CboCalibrationMatrixSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboCalibrationMatrixSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selected value of calibration matrix.
  /// </summary>
  public DoubleFeature boCalibrationMatrixValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationMatrixValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationMatrixValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Value selector of calibration matrix.
  /// </summary>
  public CboCalibrationMatrixValueSelector boCalibrationMatrixValueSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationMatrixValueSelector_set(swigCPtr, CboCalibrationMatrixValueSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationMatrixValueSelector_get(swigCPtr);
      CboCalibrationMatrixValueSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboCalibrationMatrixValueSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selects the calibration vector.
  /// </summary>
  public CboCalibrationVectorSelector boCalibrationVectorSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationVectorSelector_set(swigCPtr, CboCalibrationVectorSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationVectorSelector_get(swigCPtr);
      CboCalibrationVectorSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboCalibrationVectorSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selected value of calibration vector.
  /// </summary>
  public DoubleFeature boCalibrationVectorValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationVectorValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationVectorValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Value selector of calibration vector.
  /// </summary>
  public CboCalibrationVectorValueSelector boCalibrationVectorValueSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boCalibrationVectorValueSelector_set(swigCPtr, CboCalibrationVectorValueSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boCalibrationVectorValueSelector_get(swigCPtr);
      CboCalibrationVectorValueSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboCalibrationVectorValueSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Selected Value of geometry distortion.
  /// </summary>
  public DoubleFeature boGeometryDistortionValue {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boGeometryDistortionValue_set(swigCPtr, DoubleFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boGeometryDistortionValue_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         DoubleFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new DoubleFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Value Selector of geometry distortion.
  /// </summary>
  public CboGeometryDistortionValueSelector boGeometryDistortionValueSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boGeometryDistortionValueSelector_set(swigCPtr, CboGeometryDistortionValueSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boGeometryDistortionValueSelector_get(swigCPtr);
      CboGeometryDistortionValueSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboGeometryDistortionValueSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Buffer for exchanging ASCII data over the serial interface. This buffer uses the same memory as boSerialBinaryReadBuffer.
  /// </summary>
  public StringFeature boSerialASCIIReadBuffer {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialASCIIReadBuffer_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialASCIIReadBuffer_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Buffer for exchanging ASCII data over the serial interface. This buffer uses the same memory as boSerialBinaryWriteBuffer.
  /// </summary>
  public StringFeature boSerialASCIIWriteBuffer {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialASCIIWriteBuffer_set(swigCPtr, StringFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialASCIIWriteBuffer_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        StringFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new StringFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Buffer for exchanging binary data over the serial interface. This buffer uses the same memory as boSerialASCIIReadBuffer.
  /// </summary>
  public RegisterFeature boSerialBinaryReadBuffer {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialBinaryReadBuffer_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        RegisterFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new RegisterFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Buffer for exchanging binary data over the serial interface. This buffer uses the same memory as boSerialASCIIWriteBuffer.
  /// </summary>
  public RegisterFeature boSerialBinaryWriteBuffer {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialBinaryWriteBuffer_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        RegisterFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new RegisterFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// When refreshed number of available data bytes for read are shown.
  /// </summary>
  public IntegerFeature boSerialBytesAvailableForRead {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesAvailableForRead_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesAvailableForRead_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Length of data read with last SerialRead command.
  /// </summary>
  public IntegerFeature boSerialBytesRead {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesRead_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesRead_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Length of data to read.
  /// </summary>
  public IntegerFeature boSerialBytesToRead {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesToRead_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesToRead_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Length of data to write.
  /// </summary>
  public IntegerFeature boSerialBytesToWrite {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesToWrite_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesToWrite_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Length of data written with last boSerialWrite command.
  /// </summary>
  public IntegerFeature boSerialBytesWritten {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesWritten_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialBytesWritten_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Serial interface clock frequency.
  /// </summary>
  public CboSerialConfigBaudRate boSerialConfigBaudRate {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialConfigBaudRate_set(swigCPtr, CboSerialConfigBaudRate.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialConfigBaudRate_get(swigCPtr);
      CboSerialConfigBaudRate ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboSerialConfigBaudRate(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Number of data bits.
  /// </summary>
  public CboSerialConfigDataBits boSerialConfigDataBits {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialConfigDataBits_set(swigCPtr, CboSerialConfigDataBits.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialConfigDataBits_get(swigCPtr);
      CboSerialConfigDataBits ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboSerialConfigDataBits(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Serial interface parity.
  /// </summary>
  public CboSerialConfigParity boSerialConfigParity {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialConfigParity_set(swigCPtr, CboSerialConfigParity.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialConfigParity_get(swigCPtr);
      CboSerialConfigParity ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboSerialConfigParity(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Number of stop bits.
  /// </summary>
  public CboSerialConfigStopBits boSerialConfigStopBits {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialConfigStopBits_set(swigCPtr, CboSerialConfigStopBits.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialConfigStopBits_get(swigCPtr);
      CboSerialConfigStopBits ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboSerialConfigStopBits(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// States the interface mode of the serial interface.
  /// </summary>
  public CboSerialMode boSerialMode {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialMode_set(swigCPtr, CboSerialMode.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialMode_get(swigCPtr);
      CboSerialMode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboSerialMode(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Command to read data from serial interface.
  /// </summary>
  public CommandFeature boSerialRead {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialRead_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Selects which serial interface to configure.
  /// </summary>
  public CboSerialSelector boSerialSelector {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialSelector_set(swigCPtr, CboSerialSelector.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialSelector_get(swigCPtr);
      CboSerialSelector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CboSerialSelector(cPtr, false);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Result of the serial error detection mechanism. The value is reset with each read access.
  /// </summary>
  public IntegerFeature boSerialStatus {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_boSerialStatus_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialStatus_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

  /// <summary>
  /// Command to write data to serial interface.
  /// </summary>
  public CommandFeature boSerialWrite {
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_boSerialWrite_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        CommandFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new CommandFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Enables the eVA Applet.
  /// </summary>
  public BoolFeature eVAAppletEnable {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_eVAAppletEnable_set(swigCPtr, BoolFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
get {
        global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_eVAAppletEnable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        BoolFeature ret = null;
        if (cPtr != global::System.IntPtr.Zero) {
        ret = new BoolFeature(cPtr, false);
        ret.addReference(this);
        }
        return ret;
} 
  }

  /// <summary>
  /// Sets the number of overlapped images if eVA applet is enabled.
  /// </summary>
  public IntegerFeature eVAAppletOverlappedImages {
    set {
      neoapi_csharpPINVOKE.FeatureAccess_eVAAppletOverlappedImages_set(swigCPtr, IntegerFeature.getCPtr(value));
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.FeatureAccess_eVAAppletOverlappedImages_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         IntegerFeature ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new IntegerFeature(cPtr, false);
           ret.addReference(this);
         }
         return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Image callback class to derive from an get image data
/// </summary>
public class NeoImageCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NeoImageCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NeoImageCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~NeoImageCallback() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_NeoImageCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public NeoImageCallback() : this(neoapi_csharpPINVOKE.new_NeoImageCallback(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  /// <summary>
  /// Overwrite this method to receive image data
  /// </summary>
  /// <param name="image">The image data</param>
  public virtual void ImageCallback(Image image) {
    if (SwigDerivedClassHasMethod("ImageCallback", swigMethodTypes0)) neoapi_csharpPINVOKE.NeoImageCallback_ImageCallbackSwigExplicitNeoImageCallback(swigCPtr, Image.getCPtr(image)); else neoapi_csharpPINVOKE.NeoImageCallback_ImageCallback(swigCPtr, Image.getCPtr(image));
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("ImageCallback", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateNeoImageCallback_0(SwigDirectorImageCallback);
    neoapi_csharpPINVOKE.NeoImageCallback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(NeoImageCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorImageCallback(global::System.IntPtr image) {
    try {
      ImageCallback(new Image(image, false));
    }
    catch(System.Exception ex)
    {
      NeoTrace trace = new NeoTrace();
      trace.Error("Catched unhandled exception! Message: " + ex.Message,
        System.Reflection.Assembly.GetExecutingAssembly().GetName().Name,
        System.Reflection.MethodInfo.GetCurrentMethod().Name, this);
    };
  }

  /// <summary>
  /// internal
  /// </summary>
  /// <param name="image">internal</param>
  public delegate void SwigDelegateNeoImageCallback_0(global::System.IntPtr image);

  private SwigDelegateNeoImageCallback_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(Image) };
}

}
namespace NeoAPI {


  /// <summary>
  /// Class providing image event arguments
  /// </summary>
  public class ImageEventArgs : System.EventArgs
  {
    /// <summary>
    /// Received image for image callback
    /// </summary>
    public Image Image { get; set; }
  }
  /// <summary>
  /// Class providing image event callbacks
  /// </summary>
  public class NeoImageCallbackHandler : NeoImageCallback {
    /// <summary>
    /// Overwrite this method to receive image data
    /// </summary>
    /// <param name="image">The image data</param>
    public override void ImageCallback(Image image) {
      System.EventHandler<ImageEventArgs> handler = Handler;
      if (handler != null) {
        ImageEventArgs args = new ImageEventArgs();
        args.Image = image;
        handler(this, args);
      }
    }
    /// <summary>
    /// internal
    /// </summary>
    public event System.EventHandler<ImageEventArgs> Handler;
  }
  /// <summary>
  /// Class providing device or pnp event arguments
  /// </summary>
  public class NeoEventEventArgs : System.EventArgs
  {
    /// <summary>
    /// Received event for event callback
    /// </summary>
    public NeoEvent Event { get; set; }
  }
  /// <summary>
  /// Class providing device or pnp event callbacks
  /// </summary>
  public class NeoEventCallbackHandler : NeoEventCallback {
    /// <summary>
    /// Overwrite this method to receive event data
    /// </summary>
    /// <param name="neoevent">The event data</param>
    public override void EventCallback(NeoEvent neoevent) {
      System.EventHandler<NeoEventEventArgs> handler = Handler;
      if (handler != null) {
        NeoEventEventArgs args = new NeoEventEventArgs();
        args.Event = neoevent;
        handler(this, args);
      }
    }
    /// <summary>
    /// internal
    /// </summary>
    public event System.EventHandler<NeoEventEventArgs> Handler;
  }
  /// <summary>
  /// Base camera class from which other camera classes inherit functionality
  /// </summary>
  public class CamBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CamBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CamBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CamBase() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CamBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  private object parentReference;
  protected System.Collections.Generic.Dictionary<string, Feature> feature_list_ = null;
  protected System.Collections.Generic.Dictionary<string, Feature> runtime_info_list_ = null;
  protected NeoImageCallbackHandler image_callback_ = new NeoImageCallbackHandler();
  /// <summary>
  /// c# handler for image callback
  /// </summary>
  public NeoImageCallbackHandler ImageCallback { get { return image_callback_; } }
  /// <summary>
  /// Enable image callback.
  /// </summary>
  public void EnableImageCallback() { EnableImageCallback(ImageCallback); }
  protected System.Collections.Generic.Dictionary<string, NeoEventCallbackHandler> device_event_callbacks_ = new System.Collections.Generic.Dictionary<string, NeoEventCallbackHandler>();
  /// <summary>
  /// c# handler for device event callback
  /// </summary>
  public NeoEventCallbackHandler DeviceEventCallback { get { if(!device_event_callbacks_.ContainsKey("")) {device_event_callbacks_[""] = new NeoEventCallbackHandler();} return device_event_callbacks_[""]; } }
  /// <summary>
  /// internal
  /// </summary>
  public System.Collections.Generic.Dictionary<string, NeoEventCallbackHandler> DeviceEventCallbacks { get { return device_event_callbacks_; } }
  /// <summary>
  /// Enable event callback.
  /// </summary>
  /// <param name="name">Name of event to wait for, default is empty to wait for any event</param>
  public void EnableEventCallback(string name = "") { if(!device_event_callbacks_.ContainsKey(name)) {device_event_callbacks_[name] = new NeoEventCallbackHandler();} EnableEventCallback(DeviceEventCallbacks[name], name); }
  protected NeoEventCallbackHandler pnp_event_callback_ = new NeoEventCallbackHandler();
  /// <summary>
  /// c# handler for pnp event callback
  /// </summary>
  public NeoEventCallbackHandler PnPEventCallback { get { return pnp_event_callback_; } }
  /// <summary>
  /// Enable event callback.
  /// </summary>
  public void EnablePnPEventCallback() { EnablePnPEventCallback(PnPEventCallback); }
  internal void addReference(object parent) {
    parentReference = parent;
  }

  /// <summary>
  /// Query the list of the names of the existing chunk data
  /// To activate individual chunk data in a targeted manner, you need their names; the list of all names can be read here.
  /// </summary>
  /// <returns>A list containing all possible chunks for this camera</returns>
  public System.Collections.Generic.List<string> AvailableChunks {
    get {
        System.Collections.Generic.List<string> string_list = new System.Collections.Generic.List<string>();
        var handle = neoapi_csharpPINVOKE.create_NeoStringList();
        neoapi_csharpPINVOKE.CamBase_GetAvailableChunks_List(swigCPtr.Handle, handle);
        uint size = neoapi_csharpPINVOKE.NeoStringList_len(handle);
        for (uint i = 0; i < size; i++) {
                string_list.Add(neoapi_csharpPINVOKE.NeoStringList_Get(handle, i));
        }
        neoapi_csharpPINVOKE.remove_NeoStringList(handle);
        if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        return string_list;
    }
  }

  /// <summary>
  /// Query the list of the names of supported events.
  /// </summary>
  /// <returns>list of available events</returns>
  public System.Collections.Generic.List<string> AvailableEvents {
    get{
        System.Collections.Generic.List<string> string_list = new System.Collections.Generic.List<string>();
        var handle = neoapi_csharpPINVOKE.create_NeoStringList();
        neoapi_csharpPINVOKE.CamBase_GetAvailableEvents_List(swigCPtr.Handle, handle);
        uint size = neoapi_csharpPINVOKE.NeoStringList_len(handle);
        for (uint i = 0; i < size; i++) {
                string_list.Add(neoapi_csharpPINVOKE.NeoStringList_Get(handle, i));
        }
        neoapi_csharpPINVOKE.remove_NeoStringList(handle);
        if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        return string_list;
    }
  }

  /// <summary>
  /// Query the list of the names of enabled events.
  /// </summary>
  /// <returns>list of enabled events</returns>
  public System.Collections.Generic.List<string> EnabledEvents {
    get{
        System.Collections.Generic.List<string> string_list = new System.Collections.Generic.List<string>();
        var handle = neoapi_csharpPINVOKE.create_NeoStringList();
        neoapi_csharpPINVOKE.CamBase_GetEnabledEvents_List(swigCPtr.Handle, handle);
        uint size = neoapi_csharpPINVOKE.NeoStringList_len(handle);
        for (uint i = 0; i < size; i++) {
                string_list.Add(neoapi_csharpPINVOKE.NeoStringList_Get(handle, i));
        }
        neoapi_csharpPINVOKE.remove_NeoStringList(handle);
        if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
        return string_list;
    }
  }

  /// <summary>
  /// This function returns the current library version in the format "Mayor.Minor.Patch"
  /// </summary>
  public static string LibraryVersion {
        get
        {
            return  neoapi_csharpPINVOKE.CSharp_NeoAPI_GetLibraryVersion();
        }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public CamBase() : this(neoapi_csharpPINVOKE.new_CamBase__SWIG_0(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="arg0">A CamBase object</param>
  public CamBase(CamBase arg0) : this(neoapi_csharpPINVOKE.new_CamBase__SWIG_1(CamBase.getCPtr(arg0)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Connect a GenICam camera device to work with it
  /// </summary>
  /// <param name="identifier">A string value with the camera identifier</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase Connect(string identifier) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_Connect__SWIG_0(swigCPtr, identifier);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <returns>The CamBase object</returns>
  public virtual CamBase Connect() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_Connect__SWIG_1(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Disconnect a GenICam camera device
  /// </summary>
  /// <returns>The CamBase object</returns>
  public virtual CamBase Disconnect() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_Disconnect(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Start streaming from this camera. (Streaming is started by Conncet)
  /// </summary>
  /// <returns>The CamBase object</returns>
  public virtual CamBase StartStreaming() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_StartStreaming(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Stop streaming from this camera.
  /// </summary>
  /// <returns>The CamBase object</returns>
  public virtual CamBase StopStreaming() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_StopStreaming(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Get a Feature to access to it's properties, see Cam.f for a more convenient way to access features
  /// </summary>
  /// <param name="name">The name of the feature to retrieve (SFNC Name)</param>
  /// <returns>The Feature object</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  /// <exception cref="FeatureAccessException">The feature is not accessible</exception>
  public virtual Feature GetFeature(string name) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_GetFeature(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    Feature ret = new Feature(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Check if a feature is supported by a camera, see Cam.f for a more convenient way to access features
  /// </summary>
  /// <param name="name">The name of the feature to read (SFNC Name)</param>
  /// <returns>True if the feature is supported by the camera otherwise false</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  public virtual bool HasFeature(string name) {
    bool ret = neoapi_csharpPINVOKE.CamBase_HasFeature(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Indicates that the Feature object is readable
  /// </summary>
  /// <param name="name">The name of the feature to check</param>
  /// <returns>True if the Feature object is readable, otherwise false</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual bool IsReadable(string name) {
    bool ret = neoapi_csharpPINVOKE.CamBase_IsReadable(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Indicates if a Feature object is writeable
  /// </summary>
  /// <param name="name">The name of the feature to check</param>
  /// <returns>True if the Feature object is writable, otherwise false</returns>
  /// <exception cref="FeatureAccessException">The calling object is not valid</exception>
  public virtual bool IsWritable(string name) {
    bool ret = neoapi_csharpPINVOKE.CamBase_IsWritable(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Set the value of a feature of the camera, see Cam.f for a more convenient way to access features
  /// </summary>
  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">An long value which should be written to the feature</param>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  /// <exception cref="FeatureAccessException">The feature is not accessible</exception>
  public virtual CamBase SetFeature(string name, long value) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_SetFeature__SWIG_0(swigCPtr, name, value);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Set the value of a feature of the camera, see Cam.f for a more convenient way to access features
  /// </summary>
  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">An int value which should be written to the feature</param>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  /// <exception cref="FeatureAccessException">The feature is not accessible</exception>
  public virtual CamBase SetFeature(string name, int value) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_SetFeature__SWIG_1(swigCPtr, name, value);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">A double value which should be written to the feature</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase SetFeature(string name, double value) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_SetFeature__SWIG_2(swigCPtr, name, value);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">A string value which should be written to the feature</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase SetFeature(string name, string value) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_SetFeature__SWIG_3(swigCPtr, name, value);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">A bool value which should be written to the feature</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase SetFeature(string name, bool value) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_SetFeature__SWIG_4(swigCPtr, name, value);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Executes an exectutable SFNC-ICommand-Feature of the camera
  /// </summary>
  /// <param name="name">The name of the feature to execute (SFNC Name)</param>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  /// <exception cref="FeatureAccessException">The feature is not accessible</exception>
  public virtual CamBase Execute(string name) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_Execute(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Get a list of all available features of the camera
  /// </summary>
  /// <returns>The System.Collections.Generic.Dictionary<string, Feature> list of available Features</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  public virtual System.Collections.Generic.Dictionary<string, Feature> GetFeatureList() {
    feature_list_ = new System.Collections.Generic.Dictionary<string, Feature>();
    var neo_feature_list = neoapi_csharpPINVOKE.CamBase_GetFeatureList(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    var neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureList_begin(neo_feature_list);
    var neo_feature_list_end = neoapi_csharpPINVOKE.FeatureList_end(neo_feature_list);
    for(; neoapi_csharpPINVOKE.FeatureListIterator_operator_not_equal(neo_feature_list_iter, neo_feature_list_end);
        neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_postfix(neo_feature_list_iter))
    {
        feature_list_.Add(
        neoapi_csharpPINVOKE.FeatureListIterator_GetName(neo_feature_list_iter),
        new Feature(neoapi_csharpPINVOKE.FeatureListIterator___ref__(neo_feature_list_iter), false));
    }
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_end);
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_iter);
    
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return feature_list_;
}

  /// <summary>
  /// Get a list of all available camera related properties
  /// </summary>
  /// <returns>The System.Collections.Generic.Dictionary<string, Feature> list of available properties</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  public virtual System.Collections.Generic.Dictionary<string, Feature> GetRuntimeInfoList() {
    runtime_info_list_ = new System.Collections.Generic.Dictionary<string, Feature>();
    var neo_feature_list = neoapi_csharpPINVOKE.CamBase_GetRuntimeInfoList(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    var neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureList_begin(neo_feature_list);
    var neo_feature_list_end = neoapi_csharpPINVOKE.FeatureList_end(neo_feature_list);
    for(; neoapi_csharpPINVOKE.FeatureListIterator_operator_not_equal(neo_feature_list_iter, neo_feature_list_end);
        neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_postfix(neo_feature_list_iter))
    {
        runtime_info_list_.Add(
        neoapi_csharpPINVOKE.FeatureListIterator_GetName(neo_feature_list_iter),
        new Feature(neoapi_csharpPINVOKE.FeatureListIterator___ref__(neo_feature_list_iter), false));
    }
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_end);
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_iter);
    
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return runtime_info_list_;
}

  /// <summary>
  /// Set the value of multiple feature of the camera in one operation
  /// </summary>
  /// <param name="featurestack"> A set of features to be written</param>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  /// <exception cref="FeatureAccessException">One or more features are not accessible</exception>
  public virtual CamBase WriteFeatureStack(FeatureStack featurestack) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_WriteFeatureStack(swigCPtr, FeatureStack.getCPtr(featurestack));
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Get an image from the camera
  /// </summary>
  /// <param name="timeout">Timeout in ms to wait for an image, default is 400 ms</param>
  /// <returns>The Image object with all relevant data, could be empty</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  /// <exception cref="NoImageBufferException">No image buffer available to store data</exception>
  public virtual Image GetImage(uint timeout) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_GetImage__SWIG_0(swigCPtr, timeout);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    Image ret = new Image(ptr, true);
    ret.addReference(this);
    return ret;
}

  /// <returns>The Image object with all relevant data</returns>
  public virtual Image GetImage() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_GetImage__SWIG_1(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    Image ret = new Image(ptr, true);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Delete all received images.
  /// </summary>
  /// <returns>The CamBase object</returns>
  public virtual CamBase ClearImages() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_ClearImages(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Change image reception to callback
  /// </summary>
  /// <param name="callback">- An object using NeoImageCallback as base class to get notified for new images.</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase EnableImageCallback(NeoImageCallback callback) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_EnableImageCallback(swigCPtr, NeoImageCallback.getCPtr(callback));
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Change image reception to polling (default)
  /// </summary>
  /// <returns>The CamBase object</returns>
  public virtual CamBase DisableImageCallback() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_DisableImageCallback(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Allow all or individual chunk data.
  /// </summary>
  /// <param name="name">- empty string for all chunk data or name from AvailableChunks for special chunk data.</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase EnableChunk(string name) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_EnableChunk__SWIG_0(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Allow all or individual chunk data.
  /// </summary>
  /// <returns>The CamBase object</returns>
  public virtual CamBase EnableChunk() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_EnableChunk__SWIG_1(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Disallow all or individual chunk data.
  /// </summary>
  /// <param name="name">- empty string for all chunk data or name from AvailableChunks for special chunk data.</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase DisableChunk(string name) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_DisableChunk__SWIG_0(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Disallow all or individual chunk data.
  /// </summary>
  /// <returns>The CamBase object</returns>
  public virtual CamBase DisableChunk() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_DisableChunk__SWIG_1(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Enable a camera event
  /// </summary>
  /// <param name="name">of event to enable</param>
  /// <param name="max_queuesize">The upper limit of events to keep.</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase EnableEvent(string name, uint max_queuesize) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_EnableEvent__SWIG_0(swigCPtr, name, max_queuesize);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Enable a camera event
  /// </summary>
  /// <param name="name">of event to enable</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase EnableEvent(string name) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_EnableEvent__SWIG_1(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Disable a camera event
  /// </summary>
  /// <param name="name">of event to disable</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase DisableEvent(string name) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_DisableEvent(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Get an event from the camera
  /// </summary>
  /// <param name="name">Name of event to wait for, default is ""</param>
  /// <param name="timeout">Timeout in ms to wait for an event, default is 400 ms</param>
  /// <returns>The NeoEvent object with all relevant data, could be empty</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual NeoEvent GetEvent(string name, uint timeout) {
    NeoEvent ret = new NeoEvent(neoapi_csharpPINVOKE.CamBase_GetEvent__SWIG_0(swigCPtr, name, timeout), true);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <param name="name">Name of event to wait for, default is ""</param>
  /// <returns>The NeoEvent object with all relevant data, could be empty</returns>
  public virtual NeoEvent GetEvent(string name) {
    NeoEvent ret = new NeoEvent(neoapi_csharpPINVOKE.CamBase_GetEvent__SWIG_1(swigCPtr, name), true);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <returns>The NeoEvent object with all relevant data, could be empty</returns>
  public virtual NeoEvent GetEvent() {
    NeoEvent ret = new NeoEvent(neoapi_csharpPINVOKE.CamBase_GetEvent__SWIG_2(swigCPtr), true);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Clear the event queue for a specific event
  /// </summary>
  /// <param name="name">Name of event to clear the queue for, default is ""</param>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual CamBase ClearEvents(string name) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_ClearEvents__SWIG_0(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Clear all event queues
  /// </summary>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual CamBase ClearEvents() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_ClearEvents__SWIG_1(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Clear all event queues
  /// </summary>
  /// <param name="callback">The EventCallback method of the given object will be called for every event data.</param>
  /// <param name="name">Name of event to clear the queue for, default is ""</param>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual CamBase EnableEventCallback(NeoEventCallback callback, string name) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_EnableEventCallback__SWIG_0(swigCPtr, NeoEventCallback.getCPtr(callback), name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Clear all event queues
  /// </summary>
  /// <param name="callback">The EventCallback method of the given object will be called for every event data.</param>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual CamBase EnableEventCallback(NeoEventCallback callback) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_EnableEventCallback__SWIG_1(swigCPtr, NeoEventCallback.getCPtr(callback));
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Clear all event queues
  /// </summary>
  /// <param name="name">Name of event to clear the queue for, default is ""</param>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual CamBase DisableEventCallback(string name) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_DisableEventCallback__SWIG_0(swigCPtr, name);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Clear all event queues
  /// </summary>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual CamBase DisableEventCallback() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_DisableEventCallback__SWIG_1(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Get a plug and play event from the camera
  /// </summary>
  /// <param name="timeout">Timeout in ms to wait for an event, default is 400 ms</param>
  /// <returns>The NeoEvent object with all relevant data, could be empty</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual NeoEvent GetPnPEvent(uint timeout) {
    NeoEvent ret = new NeoEvent(neoapi_csharpPINVOKE.CamBase_GetPnPEvent__SWIG_0(swigCPtr, timeout), true);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <returns>The NeoEvent object with all relevant data, could be empty</returns>
  public virtual NeoEvent GetPnPEvent() {
    NeoEvent ret = new NeoEvent(neoapi_csharpPINVOKE.CamBase_GetPnPEvent__SWIG_1(swigCPtr), true);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Delete the event queue
  /// </summary>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual CamBase ClearPnPEvents() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_ClearPnPEvents(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Enable event callback.
  /// </summary>
  /// <param name="callback">The EventCallback method of the given object will be called for every event data.</param>
  /// <returns>The CamBase object</returns>
  public virtual CamBase EnablePnPEventCallback(NeoEventCallback callback) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_EnablePnPEventCallback(swigCPtr, NeoEventCallback.getCPtr(callback));
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Disable event callback.
  /// </summary>
  /// <returns>The CamBase object</returns>
  public virtual CamBase DisablePnPEventCallback() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.CamBase_DisablePnPEventCallback(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    CamBase ret = new CamBase(ptr, false);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Checks if a camera is connected
  /// </summary>
  public bool IsConnected {
    get {
      bool ret = neoapi_csharpPINVOKE.CamBase_IsConnected_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Checks if a camera is streaming
  /// </summary>
  public bool IsStreaming {
    get {
      bool ret = neoapi_csharpPINVOKE.CamBase_IsStreaming_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Set the number of internal used image buffers
  /// </summary>
  public uint ImageBufferCount {
    set {
      neoapi_csharpPINVOKE.CamBase_ImageBufferCount_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = neoapi_csharpPINVOKE.CamBase_ImageBufferCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Set the number of internal image buffers to be cycled automatically
  /// </summary>
  public uint ImageBufferCycleCount {
    set {
      neoapi_csharpPINVOKE.CamBase_ImageBufferCycleCount_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = neoapi_csharpPINVOKE.CamBase_ImageBufferCycleCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// In synchronous mode the acquisition will restart for every feature change, to ensure new values will
  /// be reflected in the next image.
  /// </summary>
  public bool SynchronFeatureMode {
    set {
      neoapi_csharpPINVOKE.CamBase_SynchronFeatureMode_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = neoapi_csharpPINVOKE.CamBase_SynchronFeatureMode_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// With AdjustFeatureValueMode enabled feature values will be checked an adjusted where necessary
  /// </summary>
  public bool AdjustFeatureValueMode {
    set {
      neoapi_csharpPINVOKE.CamBase_AdjustFeatureValueMode_set(swigCPtr, value);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = neoapi_csharpPINVOKE.CamBase_AdjustFeatureValueMode_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Checks if a camera is online
  /// </summary>
  /// <returns>True if the camera is online and ready to use, otherwise false</returns>
  public bool IsOnline {
    get {
      bool ret = neoapi_csharpPINVOKE.CamBase_IsOnline_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the number of times the camera was offline
  /// </summary>
  /// <returns>The counter of offline events for this camera</returns>
  public ulong OfflineCount {
    get {
      ulong ret = neoapi_csharpPINVOKE.CamBase_OfflineCount_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get basic information about the camera.
  /// </summary>
  /// <returns>The camera information</returns>
  public CamInfo Info {
    get {
      global::System.IntPtr cPtr = neoapi_csharpPINVOKE.CamBase_Info_get(swigCPtr);
      CamInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new CamInfo(cPtr, true);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Main camera class &mdash; connect, set features, retrieve images
/// </summary>
public class Cam : CamBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Cam(global::System.IntPtr cPtr, bool cMemoryOwn) : base(neoapi_csharpPINVOKE.Cam_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Cam obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~Cam() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_Cam(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary>
  /// Connect a GenICam camera device to work with it
  /// </summary>
  /// <param name="identifier">A string value with the camera identifier</param>
  /// <returns>The Cam object</returns>
  public new Cam Connect(string identifier) {
    ((CamBase)this).Connect(identifier);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <returns>The Cam object</returns>
  public new Cam Connect() {
    ((CamBase)this).Connect();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Disconnect a GenICam camera device
  /// </summary>
  /// <returns>The Cam object</returns>
  public new Cam Disconnect() {
    ((CamBase)this).Disconnect();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Start streaming from this camera. (Streaming is started by Connect)
  /// </summary>
  /// <returns>The Cam object</returns>
  public new Cam StartStreaming() {
    ((CamBase)this).StartStreaming();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Stop streaming from this camera.
  /// </summary>
  /// <returns>The Cam object</returns>
  public new Cam StopStreaming() {
    ((CamBase)this).StopStreaming();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Set the value of a feature of the camera, see Cam.f for a more convenient way to access features.
  /// </summary>
  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">An Int64 value which should be written to the feature</param>
  /// <returns>The Cam object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  /// <exception cref="FeatureAccessException">The feature is not accessible.</exception>
  public new Cam SetFeature(string name, long value) {
    ((CamBase)this).SetFeature(name, value);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">An Int32 value which should be written to the feature</param>
  /// <returns>The Cam object</returns>
  public new Cam SetFeature(string name, int value) {
    ((CamBase)this).SetFeature(name, value);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">A double value which should be written to the feature</param>
  /// <returns>The Cam object</returns>
  public new Cam SetFeature(string name, double value) {
    ((CamBase)this).SetFeature(name, value);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">A string value which should be written to the feature</param>
  /// <returns>The Cam object</returns>
  public new Cam SetFeature(string name, string value) {
    ((CamBase)this).SetFeature(name, value);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">A bool value which should be written to the feature</param>
  /// <returns>The Cam object</returns>
  public new Cam SetFeature(string name, bool value) {
    ((CamBase)this).SetFeature(name, value);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Executes an exectutable SFNC-ICommand-Feature of the camera
  /// </summary>
  /// <param name="name">The name of the feature to execute (SFNC Name)</param>
  /// <returns>The Cam object</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  /// <exception cref="FeatureAccessException">The feature is not accessible</exception>
  public new Cam Execute(string name) {
    ((CamBase)this).Execute(name);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Set the value of multiple feature of the camera in one operation
  /// </summary>
  /// <param name="featurestack"> A set of features to be written</param>
  /// <returns>The Cam object</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  /// <exception cref="FeatureAccessException">One or more features are not accessible</exception>
  public new Cam WriteFeatureStack(FeatureStack featurestack) {
    ((CamBase)this).WriteFeatureStack(featurestack);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Delete the image queue
  /// </summary>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public new Cam ClearImages() {
    ((CamBase)this).ClearImages();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Enable image callback.
  /// </summary>
  /// <param name="callback">The ImageCallback method of the given object will be called for every image data.</param>
  /// <returns>The CamBase object</returns>
  public new Cam EnableImageCallback(NeoImageCallback callback) {
    ((CamBase)this).EnableImageCallback(callback);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Disable image callback.
  /// </summary>
  /// <returns>The CamBase object</returns>
  public new Cam DisableImageCallback() {
    ((CamBase)this).DisableImageCallback();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Allow all or individual chunk data.
  /// </summary>
  /// <returns>The Cam object</returns>
  public new Cam EnableChunk() {
    ((CamBase)this).EnableChunk();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Allow all or individual chunk data.
  /// </summary>
  /// <param name="name">- empty string for all chunk data or name from AvailableChunks for special chunk data.</param>
  /// <returns>The Cam object</returns>
  public new Cam EnableChunk(string name) {
    ((CamBase)this).EnableChunk(name);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Disallow all or individual chunk data.
  /// </summary>
  /// <returns>The Cam object</returns>
  public new Cam DisableChunk() {
    ((CamBase)this).DisableChunk();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Disallow all or individual chunk data.
  /// </summary>
  /// <param name="name">- empty string for all chunk data or name from AvailableChunks for special chunk data.</param>
  /// <returns>The Cam object</returns>
  public new Cam DisableChunk(string name) {
    ((CamBase)this).DisableChunk(name);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Enable a camera event
  /// </summary>
  /// <param name="name">of event to enable</param>
  /// <returns>The Cam object</returns>
  public new Cam EnableEvent(string name) {
    ((CamBase)this).EnableEvent(name);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Enable a camera event
  /// </summary>
  /// <param name="name">of event to enable</param>
  /// <param name="max_queuesize">The upper limit of events to keep.</param>
  /// <returns>The Cam object</returns>
  public new Cam EnableEvent(string name, uint max_queuesize) {
    ((CamBase)this).EnableEvent(name, max_queuesize);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Clear all event queues
  /// </summary>
  /// <returns>The Cam object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public new Cam ClearEvents() {
    ((CamBase)this).ClearEvents();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Clear the event queue for a specific event
  /// </summary>
  /// <param name="name">Name of event to clear the queue for, default is ""</param>
  /// <returns>The Cam object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public new Cam ClearEvents(string name) {
    ((CamBase)this).ClearEvents(name);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Disable a camera event
  /// </summary>
  /// <param name="name">of event to disable</param>
  /// <returns>The Cam object</returns>
  public new Cam DisableEvent(string name) {
    ((CamBase)this).DisableEvent(name);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Enable event callback.
  /// </summary>
  /// <param name="callback">The EventCallback method of the given object will be called for every event data.</param>
  /// <returns>The Cam object</returns>
  public new Cam EnableEventCallback(NeoEventCallback callback) {
    ((CamBase)this).EnableEventCallback(callback);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Enable event callback.
  /// </summary>
  /// <param name="callback">The EventCallback method of the given object will be called for every event data.</param>
  /// <param name="name">Name of event to wait for, default is empty to wait for any event</param>
  /// <returns>The Cam object</returns>
  public new Cam EnableEventCallback(NeoEventCallback callback, string name) {
    ((CamBase)this).EnableEventCallback(callback, name);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Disable event callback.
  /// </summary>
  /// <returns>The Cam object</returns>
  public new Cam DisableEventCallback() {
    ((CamBase)this).DisableEventCallback();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Disable event callback.
  /// </summary>
  /// <param name="name">of event to disable</param>
  /// <returns>The Cam object</returns>
  public new Cam DisableEventCallback(string name) {
    ((CamBase)this).DisableEventCallback(name);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Delete the event queue
  /// </summary>
  /// <returns>The CamBase object</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public new Cam ClearPnPEvents() {
    ((CamBase)this).ClearPnPEvents();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Enable event callback.
  /// </summary>
  /// <param name="callback">The EventCallback method of the given object will be called for every event data.</param>
  /// <returns>The CamBase object</returns>
  public new Cam EnablePnPEventCallback(NeoEventCallback callback) {
    ((CamBase)this).EnablePnPEventCallback(callback);
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }
  /// <summary>
  /// Disable event callback.
  /// </summary>
  /// <returns>The CamBase object</returns>
  public new Cam DisablePnPEventCallback() {
    ((CamBase)this).DisablePnPEventCallback();
    Cam cam = new Cam(swigCPtr.Handle, false);
    cam.addReference(this);
    return cam;
  }


  /// <summary>
  /// Constructor
  /// </summary>
  public Cam() : this(neoapi_csharpPINVOKE.new_Cam__SWIG_0(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="arg0">A Cam object</param>
  public Cam(Cam arg0) : this(neoapi_csharpPINVOKE.new_Cam__SWIG_1(Cam.getCPtr(arg0)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Provides access to the generated camera features
  /// </summary>
  /// <returns>The FeatureAccess object</returns>
  /// <exception cref="NotConnectedException">No device connected</exception>
  /// <exception cref="FeatureAccessException">One or more features are not accessible</exception>
  public FeatureAccess f {
    get {
         global::System.IntPtr cPtr = neoapi_csharpPINVOKE.Cam_f_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
         FeatureAccess ret = null;
         if (cPtr != global::System.IntPtr.Zero) {
           ret = new FeatureAccess(cPtr, true);
           ret.addReference(this);
         }
         return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// A collection of camera features
/// </summary>
public class FeatureStack : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FeatureStack(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FeatureStack obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~FeatureStack() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_FeatureStack(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public FeatureStack() : this(neoapi_csharpPINVOKE.new_FeatureStack__SWIG_0(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="arg0">A FeatureStack Object</param>
  public FeatureStack(FeatureStack arg0) : this(neoapi_csharpPINVOKE.new_FeatureStack__SWIG_1(FeatureStack.getCPtr(arg0)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add a feature/value pair to the FeatureStack
  /// </summary>
  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">An Int32 value which should be written to the feature</param>
  /// <returns>The FeatureStack object</returns>
  public virtual FeatureStack Add(string name, int value) {
    FeatureStack ret = new FeatureStack(neoapi_csharpPINVOKE.FeatureStack_Add__SWIG_0(swigCPtr, name, value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">An Int64 value which should be written to the feature</param>
  /// <returns>The FeatureStack object</returns>
  public virtual FeatureStack Add(string name, long value) {
    FeatureStack ret = new FeatureStack(neoapi_csharpPINVOKE.FeatureStack_Add__SWIG_1(swigCPtr, name, value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">A double value which should be written to the feature</param>
  /// <returns>The FeatureStack object</returns>
  public virtual FeatureStack Add(string name, double value) {
    FeatureStack ret = new FeatureStack(neoapi_csharpPINVOKE.FeatureStack_Add__SWIG_2(swigCPtr, name, value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">A bool value which should be written to the feature</param>
  /// <returns>The FeatureStack object</returns>
  public virtual FeatureStack Add(string name, bool value) {
    FeatureStack ret = new FeatureStack(neoapi_csharpPINVOKE.FeatureStack_Add__SWIG_3(swigCPtr, name, value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <param name="value">A string value which should be written to the feature</param>
  /// <returns>The FeatureStack object</returns>
  public virtual FeatureStack Add(string name, string value) {
    FeatureStack ret = new FeatureStack(neoapi_csharpPINVOKE.FeatureStack_Add__SWIG_4(swigCPtr, name, value), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <param name="name"> The name of the feature to write (SFNC Name)</param>
  /// <returns>The FeatureStack object</returns>
  public virtual FeatureStack Add(string name) {
    FeatureStack ret = new FeatureStack(neoapi_csharpPINVOKE.FeatureStack_Add__SWIG_5(swigCPtr, name), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Remove all features from the collection
  /// </summary>
  /// <returns>The FeatureStack object</returns>
  public virtual FeatureStack Clear() {
    FeatureStack ret = new FeatureStack(neoapi_csharpPINVOKE.FeatureStack_Clear(swigCPtr), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// In replace mode register accesses are merged together. Only the merge result is written to the camera
  /// </summary>
  /// <param name="replace"> True to combine multiple register accesses if possible, otherwise false</param>
  /// <returns>The FeatureStack object</returns>
  public virtual FeatureStack SetReplaceMode(bool replace) {
    FeatureStack ret = new FeatureStack(neoapi_csharpPINVOKE.FeatureStack_SetReplaceMode__SWIG_0(swigCPtr, replace), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <returns>The FeatureStack object</returns>
  public virtual FeatureStack SetReplaceMode() {
    FeatureStack ret = new FeatureStack(neoapi_csharpPINVOKE.FeatureStack_SetReplaceMode__SWIG_1(swigCPtr), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for image compression
/// </summary>
public enum NeoImageCompression {
  /// <summary>No compression other than pixelformat</summary>
  RAW = 0,
  /// <summary>Jpeg compression</summary>
  Jpeg
}

}
namespace NeoAPI {

/// <summary>
/// Provides an object to get access to image data and its properties
/// </summary>
public class Image : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Image(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Image obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~Image() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_Image(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  private object parentReference;
  internal void addReference(object parent) {
    parentReference = parent;
  }
  protected System.Collections.Generic.Dictionary<string, Feature> chunk_list_ = null;

  /// <summary>
  /// Get a list of available PixelFormats for Convert
  /// </summary>
  /// <returns>A list of available PixelFormats</returns>
  public System.Collections.Generic.List<string> GetAvailablePixelFormats() {
    System.Collections.Generic.List<string> string_list = new System.Collections.Generic.List<string>();
    var handle = neoapi_csharpPINVOKE.create_NeoStringList();
    neoapi_csharpPINVOKE.Image_GetAvailablePixelFormats_List(swigCPtr.Handle, handle);
    uint size = neoapi_csharpPINVOKE.NeoStringList_len(handle);
    for (uint i = 0; i < size; i++) {
            string_list.Add(neoapi_csharpPINVOKE.NeoStringList_Get(handle, i));
    }
    neoapi_csharpPINVOKE.remove_NeoStringList(handle);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return string_list;
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public Image() : this(neoapi_csharpPINVOKE.new_Image__SWIG_0(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="arg0">An Image Object</param>
  public Image(Image arg0) : this(neoapi_csharpPINVOKE.new_Image__SWIG_1(Image.getCPtr(arg0)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copies the Image object and its image data
  /// </summary>
  /// <returns>An Image object</returns>
  /// <exception cref="NoImageBufferException">The image could not be copied.</exception>
  public virtual Image Copy() {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.Image_Copy(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    Image ret = new Image(ptr, true);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Save the image in bmp format at the given path
  /// </summary>
  /// <param name="filename">The filename or path for the saved image</param>
  /// <exception cref="FileAccessException">The image could not be saved at the given Path</exception>
  public virtual void Save(string filename) {
    neoapi_csharpPINVOKE.Image_Save(swigCPtr, filename);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Convert the Image to another PixelFormat
  /// </summary>
  /// <param name="pixelformat">for the new image</param>
  /// <returns>A new Image in requested pixelformat</returns>
  public virtual Image Convert(string pixelformat) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.Image_Convert__SWIG_0(swigCPtr, pixelformat);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    Image ret = new Image(ptr, true);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Convert the Image based on the provided settings
  /// </summary>
  /// <param name="settings"> The settings for the converted image.</param>
  /// <returns>A new Image with requested Settings</returns>
  public virtual Image Convert(ConverterSettings settings) {
    global::System.IntPtr ptr = neoapi_csharpPINVOKE.Image_Convert__SWIG_1(swigCPtr, ConverterSettings.getCPtr(settings));
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    Image ret = new Image(ptr, true);
    ret.addReference(this);
    return ret;
}

  /// <summary>
  /// Indicates whether the pixelformat is available for conversion
  /// </summary>
  /// <param name="pixelformat">The target PixelFormat name</param>
  /// <returns>True if the pixelformat is available to work with, otherwise false</returns>
  public virtual bool IsPixelFormatAvailable(string pixelformat) {
    bool ret = neoapi_csharpPINVOKE.Image_IsPixelFormatAvailable(swigCPtr, pixelformat);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get a list of all available chunk features of the image
  /// </summary>
  /// <returns>The System.Collections.Generic.Dictionary<string, Feature> list of available chunk features</returns>
  public virtual System.Collections.Generic.Dictionary<string, Feature> GetChunkList() {
    chunk_list_ = new System.Collections.Generic.Dictionary<string, Feature>();
    var neo_feature_list = neoapi_csharpPINVOKE.Image_GetChunkList(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    var neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureList_begin(neo_feature_list);
    var neo_feature_list_end = neoapi_csharpPINVOKE.FeatureList_end(neo_feature_list);
    for(; neoapi_csharpPINVOKE.FeatureListIterator_operator_not_equal(neo_feature_list_iter, neo_feature_list_end);
        neo_feature_list_iter = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_postfix(neo_feature_list_iter))
    {
        chunk_list_.Add(
        neoapi_csharpPINVOKE.FeatureListIterator_GetName(neo_feature_list_iter),
        new Feature(neoapi_csharpPINVOKE.FeatureListIterator___ref__(neo_feature_list_iter), false));
    }
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_end);
    neoapi_csharpPINVOKE.delete_FeatureListIterator(neo_feature_list_iter);
    
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return chunk_list_;
}

  /// <summary>
  /// Check if the image is empty or filled with data, returns true as long the image is not filled with data
  /// </summary>
  public bool IsEmpty {
    get {
      bool ret = neoapi_csharpPINVOKE.Image_IsEmpty_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the ID of the image, returns zero as long the image is not filled with data
  /// </summary>
  public ulong ImageID {
    get {
      ulong ret = neoapi_csharpPINVOKE.Image_ImageID_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the timestamp of the image, returns zero as long the image is not filled with data
  /// </summary>
  public ulong Timestamp {
    get {
      ulong ret = neoapi_csharpPINVOKE.Image_Timestamp_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get a pointer to the image data, returns nullptr as long as the image is not filled with data
  /// </summary>
  public global::System.IntPtr ImageData {
get {
    global::System.IntPtr ret = neoapi_csharpPINVOKE.Image_ImageData_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
}
  }

  /// <summary>
  /// Get the size of the image in byte, returns zero as long the image is not filled with data
  /// </summary>
  public uint Size {
    get {
      uint ret = neoapi_csharpPINVOKE.Image_Size_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the height of the image in pixel, returns zero as long the image is not filled with data
  /// </summary>
  public ulong Height {
    get {
      ulong ret = neoapi_csharpPINVOKE.Image_Height_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the width of the image in pixel, returns zero as long the image is not filled with data
  /// </summary>
  public ulong Width {
    get {
      ulong ret = neoapi_csharpPINVOKE.Image_Width_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the pixelformat of the image, returns an empty string as long the image is not filled with
  /// data
  /// </summary>
  public string PixelFormat {
    get {
      string ret = neoapi_csharpPINVOKE.Image_PixelFormat_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// The number of extra bytes transmitted at the end of each line
  /// </summary>
  public ulong XPadding {
    get {
      ulong ret = neoapi_csharpPINVOKE.Image_XPadding_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// The number of extra bytes transmitted at the end of the image
  /// </summary>
  public ulong YPadding {
    get {
      ulong ret = neoapi_csharpPINVOKE.Image_YPadding_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get compression method of the image
  /// </summary>
  public NeoImageCompression Compression {
    get {
      NeoImageCompression ret = (NeoImageCompression)neoapi_csharpPINVOKE.Image_Compression_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Camera info container class which offers basic information about an available camera
/// </summary>
public class CamInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CamInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CamInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~CamInfo() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_CamInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public CamInfo() : this(neoapi_csharpPINVOKE.new_CamInfo__SWIG_0(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Copy-Constructor
  /// </summary>
  /// <param name="arg0">A CamInfo Object</param>
  public CamInfo(CamInfo arg0) : this(neoapi_csharpPINVOKE.new_CamInfo__SWIG_1(CamInfo.getCPtr(arg0)), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Get the ID of the camera, this is unique to each camera in combination with a Baumer producer
  /// </summary>
  /// <returns>The ID</returns>
  public string Id {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_Id_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the camera model name
  /// </summary>
  /// <returns>The model name</returns>
  public string ModelName {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_ModelName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the camera serial number
  /// </summary>
  /// <returns>The serial number</returns>
  public string SerialNumber {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_SerialNumber_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the transport layer type
  /// </summary>
  /// <returns>The transport layer type</returns>
  public string TLType {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_TLType_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the camera vendor name.
  /// </summary>
  /// <returns>The vendor name</returns>
  public string VendorName {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_VendorName_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the USB3 Vision GUID
  /// </summary>
  /// <returns>The USB3 Vision GUID</returns>
  public string USB3VisionGUID {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_USB3VisionGUID_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the USB port ID
  /// </summary>
  /// <returns>The USB port ID</returns>
  public string USBPortID {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_USBPortID_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the cameras ethernet IP address
  /// </summary>
  /// <returns>The IP address</returns>
  public string GevIpAddress {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_GevIpAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the cameras ethernet subnet mask
  /// </summary>
  /// <returns>The subnet mask</returns>
  public string GevSubnetMask {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_GevSubnetMask_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the cameras ethernet gateway IP
  /// </summary>
  /// <returns>The gateway IP</returns>
  public string GevGateway {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_GevGateway_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Get the cameras ethernet MAC address
  /// </summary>
  /// <returns>The MAC address</returns>
  public string GevMACAddress {
    get {
      string ret = neoapi_csharpPINVOKE.CamInfo_GevMACAddress_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>
  /// Check if this camera is available for connection
  /// </summary>
  /// <returns>True if this camera can be connected, False otherwise</returns>
  public bool IsConnectable {
    get {
      bool ret = neoapi_csharpPINVOKE.CamInfo_IsConnectable_get(swigCPtr);
      if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
namespace NeoAPI {

/// <summary>
/// Provides a list of physically connected cameras available to be used/connected with neoAPI
/// </summary>
public class CamInfoList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CamInfoList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CamInfoList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  protected NeoEventCallbackHandler pnp_event_callback_ = new NeoEventCallbackHandler();
  /// <summary>
  /// C# handler for pnp event callback
  /// </summary>
  public NeoEventCallbackHandler PnPEventCallback { get { return pnp_event_callback_; } }
  /// <summary>
  /// Enable event callback.
  /// </summary>
  public void EnablePnPEventCallback() { EnablePnPEventCallback(PnPEventCallback); }

    protected System.Collections.Generic.List<NeoAPI.CamInfo> cam_info_list_ = null;
    /// <summary>
    /// Get the List
    /// </summary>
    public System.Collections.ObjectModel.ReadOnlyCollection<NeoAPI.CamInfo> List
    {
        get
        {
            if(cam_info_list_ == null) {
                cam_info_list_ = new System.Collections.Generic.List<CamInfo>();
                uint list_size = size();
                for (uint index = 0; index < list_size; index++)
                {
                    cam_info_list_.Add(IndexToCamInfo(index));
                }
            }
            return cam_info_list_.AsReadOnly();
        }
    }

    /// <summary>
    /// Get the Enumerator.
    /// </summary>
    /// <returns>The enumerator.</returns>
    public System.Collections.Generic.IEnumerator<NeoAPI.CamInfo> GetEnumerator()
    {
        return List.GetEnumerator();
    }

  /// <summary>
  /// Get the single instance.
  /// </summary>
  /// <returns>The single CamInfoList instance.</returns>
  public static CamInfoList Get() {
    CamInfoList ret = new CamInfoList(neoapi_csharpPINVOKE.CamInfoList_Get(), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private CamInfo IndexToCamInfo(uint index) {
    CamInfo ret = new CamInfo(neoapi_csharpPINVOKE.CamInfoList_IndexToCamInfo(swigCPtr, index), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Refresh camera list
  /// </summary>
  /// <returns>The number of cameras has changed</returns>
  public virtual bool Refresh() {
    bool ret = neoapi_csharpPINVOKE.CamInfoList_Refresh(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    cam_info_list_ = null;
    return ret;
}

  private uint size() {
    uint ret = neoapi_csharpPINVOKE.CamInfoList_size(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Get a plug and play event from the camera
  /// </summary>
  /// <param name="timeout">Timeout in ms to wait for an event, default is 400 ms</param>
  /// <returns>The NeoEvent object with all relevant data, could be empty</returns>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public virtual NeoEvent GetPnPEvent(uint timeout) {
    NeoEvent ret = new NeoEvent(neoapi_csharpPINVOKE.CamInfoList_GetPnPEvent__SWIG_0(swigCPtr, timeout), true);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <returns>The NeoEvent object with all relevant data, could be empty</returns>
  public virtual NeoEvent GetPnPEvent() {
    NeoEvent ret = new NeoEvent(neoapi_csharpPINVOKE.CamInfoList_GetPnPEvent__SWIG_1(swigCPtr), true);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Delete all events in the event queue
  /// </summary>
  /// <returns>The CamInfoList object</returns>
  public virtual CamInfoList ClearPnPEvents() {
    CamInfoList ret = new CamInfoList(neoapi_csharpPINVOKE.CamInfoList_ClearPnPEvents(swigCPtr), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Enable event callback to get notified of changes of the CamInfoList
  /// </summary>
  /// <param name="callback">The EventCallback method of the given object will be called for every event data.</param>
  /// <returns>The CamInfoList object</returns>
  public virtual CamInfoList EnablePnPEventCallback(NeoEventCallback callback) {
    CamInfoList ret = new CamInfoList(neoapi_csharpPINVOKE.CamInfoList_EnablePnPEventCallback(swigCPtr, NeoEventCallback.getCPtr(callback)), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Disable an active event callback
  /// </summary>
  /// <returns>The CamInfoList object</returns>
  public virtual CamInfoList DisablePnPEventCallback() {
    CamInfoList ret = new CamInfoList(neoapi_csharpPINVOKE.CamInfoList_DisablePnPEventCallback(swigCPtr), false);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace NeoAPI {

/// <summary>
/// Valid values for trace severity
/// </summary>
public enum NeoTraceSeverity {
  /// <summary>All (including internal)</summary>
  All = 0,
  /// <summary>Info</summary>
  Info,
  /// <summary>Warning</summary>
  Warning,
  /// <summary>Error</summary>
  Error
}

}
namespace NeoAPI {

/// <summary>
/// Trace callback class to derive from an get Trace messages
/// </summary>
public class NeoTraceCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NeoTraceCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NeoTraceCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~NeoTraceCallback() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_NeoTraceCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Constructor
  /// </summary>
  public NeoTraceCallback() : this(neoapi_csharpPINVOKE.new_NeoTraceCallback(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  /// <summary>
  /// Overwrite this method to receive trace messages
  /// </summary>
  /// <param name="msg">The trace message</param>
  public virtual void LogCallback(string msg) {
    if (SwigDerivedClassHasMethod("LogCallback", swigMethodTypes0)) neoapi_csharpPINVOKE.NeoTraceCallback_LogCallbackSwigExplicitNeoTraceCallback(swigCPtr, msg); else neoapi_csharpPINVOKE.NeoTraceCallback_LogCallback(swigCPtr, msg);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("LogCallback", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateNeoTraceCallback_0(SwigDirectorLogCallback);
    neoapi_csharpPINVOKE.NeoTraceCallback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(NeoTraceCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorLogCallback(string msg) {
    try {
      LogCallback(msg);
    }
    catch(System.Exception ex)
    {
      NeoTrace trace = new NeoTrace();
      trace.Error("Catched unhandled exception! Message: " + ex.Message,
        System.Reflection.Assembly.GetExecutingAssembly().GetName().Name,
        System.Reflection.MethodInfo.GetCurrentMethod().Name, this);
    };
  }

  /// <summary>
  /// internal
  /// </summary>
  /// <param name="msg">internal</param>
  public delegate void SwigDelegateNeoTraceCallback_0(string msg);

  private SwigDelegateNeoTraceCallback_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string) };
}

}
namespace NeoAPI {


  /// <summary>
  /// Class providing trace event arguments
  /// </summary>
  public class TraceEventArgs : System.EventArgs
  {
    /// <summary>
    /// Formated text for trace message
    /// </summary>
    public string Message { get; set; }
  }
  /// <summary>
  /// The C# handler for  NeoTrace Callbacks
  /// </summary>
  public class NeoTraceCallbackHandler : NeoTraceCallback {
    /// <summary>
    /// Overwrite this method to receive trace messages
    /// </summary>
    /// <param name="message">The trace message</param>
    public override void LogCallback(string message) {
      System.EventHandler<TraceEventArgs> handler = Handler;
      if (handler != null) {
        TraceEventArgs args = new TraceEventArgs();
        args.Message = message;
        handler(this, args);
      }
    }
    /// <summary>
    /// internal
    /// </summary>
    public event System.EventHandler<TraceEventArgs> Handler;
  }
  /// <summary>
  /// Class providing trace and logging functionality
  /// </summary>
  public class NeoTrace : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NeoTrace(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NeoTrace obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Destructor
  /// </summary>
  ~NeoTrace() {
    Dispose();
  }

  /// <summary>
  /// Free Resources
  /// </summary>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          neoapi_csharpPINVOKE.delete_NeoTrace(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    protected NeoTraceCallbackHandler callback_ = new NeoTraceCallbackHandler();
    /// <summary>
    /// Callback Handler for trace messages
    /// </summary>
    public NeoTraceCallbackHandler Callback { get {return callback_;} }

    /// <summary>
    /// Enable the trace for callback event handler
    /// </summary>
    public void EnableLogCallback() { EnableLogCallback(Callback); }
    /// <summary>
    /// Add an information message to trace
    /// </summary>
    /// <param name="msg">The message to trace.</param>
    /// <param name="mod">The module or unit name to trace.</param>
    /// <param name="fct">The function or device name to trace.</param>
    /// <param name="obj">The object to trace.</param>
    public void Info(string msg, string mod, string fct, object obj) {
        Info(msg, mod, fct, new global::System.IntPtr(obj.GetHashCode()));
    }
    /// <summary>
    /// Trace a warning message.
    /// </summary>
    /// <param name="msg">The message to trace.</param>
    /// <param name="mod">The module or unit name to trace.</param>
    /// <param name="fct">The function or device name to trace.</param>
    /// <param name="obj">The object to trace.</param>
    public void Warning(string msg, string mod, string fct, object obj) {
        Warning(msg, mod, fct, new global::System.IntPtr(obj.GetHashCode()));
    }
    /// <summary>
    /// Trace an error message.
    /// </summary>
    /// <param name="msg">The message to trace.</param>
    /// <param name="mod">The module or unit name to trace.</param>
    /// <param name="fct">The function or device name to trace.</param>
    /// <param name="obj">The object to trace.</param>
    public void Error(string msg, string mod, string fct, object obj) {
        Error(msg, mod, fct, new global::System.IntPtr(obj.GetHashCode()));
    }

  /// <summary>
  /// Constructor
  /// </summary>
  public NeoTrace() : this(neoapi_csharpPINVOKE.new_NeoTrace(), true) {
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add an information message to trace
  /// </summary>
  /// <param name="msg">The message to trace.</param>
  public void Info(string msg) {
    neoapi_csharpPINVOKE.NeoTrace_Info__SWIG_0(swigCPtr, msg);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add an information message to trace
  /// </summary>
  /// <param name="msg">The message to trace.</param>
  /// <param name="mod">The module or unit name to trace.</param>
  /// <param name="fct">The function or device name to trace.</param>
  /// <param name="arg3">The identifier of object to trace.</param>
  public void Info(string msg, string mod, string fct, global::System.IntPtr arg3) {
    neoapi_csharpPINVOKE.NeoTrace_Info__SWIG_1(swigCPtr, msg, mod, fct, arg3);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add an information message to trace
  /// </summary>
  /// <param name="msg">The message to trace.</param>
  /// <param name="mod">The module or unit name to trace.</param>
  /// <param name="fct">The function or device name to trace.</param>
  public void Info(string msg, string mod, string fct) {
    neoapi_csharpPINVOKE.NeoTrace_Info__SWIG_2(swigCPtr, msg, mod, fct);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add a warning message to trace
  /// </summary>
  /// <param name="msg">The message to trace.</param>
  public void Warning(string msg) {
    neoapi_csharpPINVOKE.NeoTrace_Warning__SWIG_0(swigCPtr, msg);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add a warning message to trace
  /// </summary>
  /// <param name="msg">The message to trace.</param>
  /// <param name="mod">The module or unit name to trace.</param>
  /// <param name="fct">The function or device name to trace.</param>
  /// <param name="arg3">The object to trace.</param>
  public void Warning(string msg, string mod, string fct, global::System.IntPtr arg3) {
    neoapi_csharpPINVOKE.NeoTrace_Warning__SWIG_1(swigCPtr, msg, mod, fct, arg3);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add a warning message to trace
  /// </summary>
  /// <param name="msg">The message to trace.</param>
  /// <param name="mod">The module or unit name to trace.</param>
  /// <param name="fct">The function or device name to trace.</param>
  public void Warning(string msg, string mod, string fct) {
    neoapi_csharpPINVOKE.NeoTrace_Warning__SWIG_2(swigCPtr, msg, mod, fct);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add an error message to trace
  /// </summary>
  /// <param name="msg">The message to trace.</param>
  public void Error(string msg) {
    neoapi_csharpPINVOKE.NeoTrace_Error__SWIG_0(swigCPtr, msg);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add an error message to trace
  /// </summary>
  /// <param name="msg">The message to trace.</param>
  /// <param name="mod">The module or unit name to trace.</param>
  /// <param name="fct">The function or device name to trace.</param>
  /// <param name="arg3">The object to trace.</param>
  public void Error(string msg, string mod, string fct, global::System.IntPtr arg3) {
    neoapi_csharpPINVOKE.NeoTrace_Error__SWIG_1(swigCPtr, msg, mod, fct, arg3);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Add an error message to trace
  /// </summary>
  /// <param name="msg">The message to trace.</param>
  /// <param name="mod">The module or unit name to trace.</param>
  /// <param name="fct">The function or device name to trace.</param>
  public void Error(string msg, string mod, string fct) {
    neoapi_csharpPINVOKE.NeoTrace_Error__SWIG_2(swigCPtr, msg, mod, fct);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Enable trace output to file.
  /// </summary>
  /// <param name="filename">The filename(including folder) to store the trace.</param>
  /// <exception cref="NotConnectedException">No device connected.</exception>
  public void EnableLogfile(string filename) {
    neoapi_csharpPINVOKE.NeoTrace_EnableLogfile(swigCPtr, filename);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Disable trace output to file.
  /// </summary>
  public void DisableLogfile() {
    neoapi_csharpPINVOKE.NeoTrace_DisableLogfile(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Enable the trace to the given callback
  /// </summary>
  /// <param name="callback">The LogCallback method of the given object will be called for every trace message.</param>
  public void EnableLogCallback(NeoTraceCallback callback) {
    neoapi_csharpPINVOKE.NeoTrace_EnableLogCallback(swigCPtr, NeoTraceCallback.getCPtr(callback));
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Disable the trace to a callback
  /// </summary>
  public void DisableLogCallback() {
    neoapi_csharpPINVOKE.NeoTrace_DisableLogCallback(swigCPtr);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Filter trace messages by setting a minimum severity.
  /// </summary>
  /// <param name="severity">The target severity.</param>
  public void SetSeverity(NeoTraceSeverity severity) {
    neoapi_csharpPINVOKE.NeoTrace_SetSeverity(swigCPtr, (int)severity);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace NeoAPI {

class neoapi_csharpPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="SWIGRegisterExceptionCallbacks_neoapi_csharp")]
    public static extern void SWIGRegisterExceptionCallbacks_neoapi_csharp(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_neoapi_csharp")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_neoapi_csharp(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_neoapi_csharp(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_neoapi_csharp(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(neoapi_csharpPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(neoapi_csharpPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="SWIGRegisterStringCallback_neoapi_csharp")]
    public static extern void SWIGRegisterStringCallback_neoapi_csharp(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_neoapi_csharp(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static neoapi_csharpPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSharp_NeoAPI_GetLibraryVersion")]
  public static extern string CSharp_NeoAPI_GetLibraryVersion();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_create_NeoStringList")]
  public static extern global::System.IntPtr create_NeoStringList();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_remove_NeoStringList")]
  public static extern void remove_NeoStringList(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoStringList_len")]
  public static extern uint NeoStringList_len(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoStringList_Get")]
  public static extern string NeoStringList_Get(global::System.IntPtr jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetAvailableChunks_List")]
  public static extern void CamBase_GetAvailableChunks_List(global::System.IntPtr jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetAvailableEvents_List")]
  public static extern void CamBase_GetAvailableEvents_List(global::System.IntPtr jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetEnabledEvents_List")]
  public static extern void CamBase_GetEnabledEvents_List(global::System.IntPtr jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_GetAvailablePixelFormats_List")]
  public static extern void Image_GetAvailablePixelFormats_List(global::System.IntPtr jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureList_begin")]
  public static extern global::System.IntPtr FeatureList_begin(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureList_end")]
  public static extern global::System.IntPtr FeatureList_end(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_FeatureListIterator__SWIG_0")]
  public static extern global::System.IntPtr new_FeatureListIterator__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_FeatureListIterator")]
  public static extern void delete_FeatureListIterator(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureListIterator_operator_not_equal")]
  public static extern bool FeatureListIterator_operator_not_equal(global::System.IntPtr jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureListIterator_operator_plus_plus_postfix")]
  public static extern global::System.IntPtr FeatureListIterator_operator_plus_plus_postfix(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureListIterator_operator_plus_plus_prefix")]
  public static extern global::System.IntPtr FeatureListIterator_operator_plus_plus_prefix(global::System.IntPtr jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureListIterator___ref__")]
  public static extern global::System.IntPtr FeatureListIterator___ref__(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureListIterator_GetName")]
  public static extern string FeatureListIterator_GetName(global::System.IntPtr jarg1);

  class NeoExceptionHelper {
    public delegate void NeoExceptionDelegate(string message);
    static NeoExceptionDelegate exceptionDelegate = new NeoExceptionDelegate(SetPendingNeoException);

    [global::System.Runtime.InteropServices.DllImport("neoapi_csharp" /*, EntryPoint=NeoException##RegisterCallback*/)]
    public static extern void NeoExceptionRegisterCallback(NeoExceptionDelegate exceptionCallback);

    static void SetPendingNeoException(string message) {
      SWIGPendingException.Set(new NeoException(message));
    }

    static NeoExceptionHelper() {
      NeoExceptionRegisterCallback(exceptionDelegate);
    }
  }
  static NeoExceptionHelper neoExceptionHelper = new NeoExceptionHelper();


  class NotConnectedExceptionHelper {
    public delegate void NotConnectedExceptionDelegate(string message);
    static NotConnectedExceptionDelegate notConnectedDelegate = new NotConnectedExceptionDelegate(SetPendingNotConnectedException);

    [global::System.Runtime.InteropServices.DllImport("neoapi_csharp" /*, EntryPoint=NotConnectedException##RegisterCallback*/)]
    public static extern void NotConnectedExceptionRegisterCallback(NotConnectedExceptionDelegate notConnectedCallback);

    static void SetPendingNotConnectedException(string message) {
      SWIGPendingException.Set(new NotConnectedException(message));
    }

    static NotConnectedExceptionHelper() {
      NotConnectedExceptionRegisterCallback(notConnectedDelegate);
    }
  }
  static NotConnectedExceptionHelper notConnectedExceptionHelper = new NotConnectedExceptionHelper();


  class NoAccessExceptionHelper {
    public delegate void NoAccessExceptionDelegate(string message);
    static NoAccessExceptionDelegate noAccessDelegate = new NoAccessExceptionDelegate(SetPendingNoAccessException);

    [global::System.Runtime.InteropServices.DllImport("neoapi_csharp" /*, EntryPoint=NoAccessException##RegisterCallback*/)]
    public static extern void NoAccessExceptionRegisterCallback(NoAccessExceptionDelegate noAccessCallback);

    static void SetPendingNoAccessException(string message) {
      SWIGPendingException.Set(new NoAccessException(message));
    }

    static NoAccessExceptionHelper() {
      NoAccessExceptionRegisterCallback(noAccessDelegate);
    }
  }
  static NoAccessExceptionHelper noAccessExceptionHelper = new NoAccessExceptionHelper();


  class FeatureAccessExceptionHelper {
    public delegate void FeatureAccessExceptionDelegate(string message);
    static FeatureAccessExceptionDelegate featureAccessDelegate = new FeatureAccessExceptionDelegate(SetPendingFeatureAccessException);

    [global::System.Runtime.InteropServices.DllImport("neoapi_csharp" /*, EntryPoint=FeatureAccessException##RegisterCallback*/)]
    public static extern void FeatureAccessExceptionRegisterCallback(FeatureAccessExceptionDelegate featureAccessCallback);

    static void SetPendingFeatureAccessException(string message) {
      SWIGPendingException.Set(new FeatureAccessException(message));
    }

    static FeatureAccessExceptionHelper() {
      FeatureAccessExceptionRegisterCallback(featureAccessDelegate);
    }
  }
  static FeatureAccessExceptionHelper featureAccessExceptionHelper = new FeatureAccessExceptionHelper();


  class NoImageBufferExceptionHelper {
    public delegate void NoImageBufferExceptionDelegate(string message);
    static NoImageBufferExceptionDelegate noImageBufferDelegate = new NoImageBufferExceptionDelegate(SetPendingNoImageBufferException);

    [global::System.Runtime.InteropServices.DllImport("neoapi_csharp" /*, EntryPoint=NoImageBufferException##RegisterCallback*/)]
    public static extern void NoImageBufferExceptionRegisterCallback(NoImageBufferExceptionDelegate noImageBufferCallback);

    static void SetPendingNoImageBufferException(string message) {
      SWIGPendingException.Set(new NoImageBufferException(message));
    }

    static NoImageBufferExceptionHelper() {
      NoImageBufferExceptionRegisterCallback(noImageBufferDelegate);
    }
  }
  static NoImageBufferExceptionHelper noImageBufferExceptionHelper = new NoImageBufferExceptionHelper();


  class FileAccessExceptionHelper {
    public delegate void FileAccessExceptionDelegate(string message);
    static FileAccessExceptionDelegate fileAccessDelegate = new FileAccessExceptionDelegate(SetPendingFileAccessException);

    [global::System.Runtime.InteropServices.DllImport("neoapi_csharp" /*, EntryPoint=FileAccessException##RegisterCallback*/)]
    public static extern void FileAccessExceptionRegisterCallback(FileAccessExceptionDelegate fileAccessCallback);

    static void SetPendingFileAccessException(string message) {
      SWIGPendingException.Set(new FileAccessException(message));
    }

    static FileAccessExceptionHelper() {
      FileAccessExceptionRegisterCallback(fileAccessDelegate);
    }
  }
  static FileAccessExceptionHelper fileAccessExceptionHelper = new FileAccessExceptionHelper();


  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_ColorMatrix__SWIG_0")]
  public static extern global::System.IntPtr new_ColorMatrix__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_ColorMatrix__SWIG_1")]
  public static extern global::System.IntPtr new_ColorMatrix__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_ColorMatrix")]
  public static extern void delete_ColorMatrix(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ColorMatrix_GetValue")]
  public static extern double ColorMatrix_GetValue(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ColorMatrix_SetValue")]
  public static extern global::System.IntPtr ColorMatrix_SetValue(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_ConverterSettings__SWIG_0")]
  public static extern global::System.IntPtr new_ConverterSettings__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_ConverterSettings__SWIG_1")]
  public static extern global::System.IntPtr new_ConverterSettings__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_ConverterSettings")]
  public static extern void delete_ConverterSettings(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_DebayerFormat_set")]
  public static extern void ConverterSettings_DebayerFormat_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_DebayerFormat_get")]
  public static extern string ConverterSettings_DebayerFormat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_SharpeningMode_set")]
  public static extern void ConverterSettings_SharpeningMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_SharpeningMode_get")]
  public static extern int ConverterSettings_SharpeningMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_DemosaicingMethod_set")]
  public static extern void ConverterSettings_DemosaicingMethod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_DemosaicingMethod_get")]
  public static extern int ConverterSettings_DemosaicingMethod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_SharpeningFactor_set")]
  public static extern void ConverterSettings_SharpeningFactor_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_SharpeningFactor_get")]
  public static extern uint ConverterSettings_SharpeningFactor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_SharpeningSensitivityThreshold_set")]
  public static extern void ConverterSettings_SharpeningSensitivityThreshold_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_SharpeningSensitivityThreshold_get")]
  public static extern uint ConverterSettings_SharpeningSensitivityThreshold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_ColorTransformationMatrix_set")]
  public static extern void ConverterSettings_ColorTransformationMatrix_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_ConverterSettings_ColorTransformationMatrix_get")]
  public static extern global::System.IntPtr ConverterSettings_ColorTransformationMatrix_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_NeoEvent__SWIG_0")]
  public static extern global::System.IntPtr new_NeoEvent__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_NeoEvent__SWIG_1")]
  public static extern global::System.IntPtr new_NeoEvent__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_NeoEvent")]
  public static extern void delete_NeoEvent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoEvent_IsEmpty_get")]
  public static extern bool NeoEvent_IsEmpty_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoEvent_CameraId_get")]
  public static extern string NeoEvent_CameraId_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoEvent_Name_get")]
  public static extern string NeoEvent_Name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoEvent_Timestamp_get")]
  public static extern ulong NeoEvent_Timestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoEvent_Id_get")]
  public static extern ulong NeoEvent_Id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_NeoEventCallback")]
  public static extern global::System.IntPtr new_NeoEventCallback();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_NeoEventCallback")]
  public static extern void delete_NeoEventCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoEventCallback_EventCallback")]
  public static extern void NeoEventCallback_EventCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoEventCallback_EventCallbackSwigExplicitNeoEventCallback")]
  public static extern void NeoEventCallback_EventCallbackSwigExplicitNeoEventCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoEventCallback_director_connect")]
  public static extern void NeoEventCallback_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, NeoEventCallback.SwigDelegateNeoEventCallback_0 delegate0);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_Feature__SWIG_0")]
  public static extern global::System.IntPtr new_Feature__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_Feature__SWIG_1")]
  public static extern global::System.IntPtr new_Feature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_Feature")]
  public static extern void delete_Feature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_GetEnumValueList")]
  public static extern global::System.IntPtr Feature_GetEnumValueList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_Execute")]
  public static extern global::System.IntPtr Feature_Execute(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_GetSelectedFeatureList")]
  public static extern global::System.IntPtr Feature_GetSelectedFeatureList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_GetRegister")]
  public static extern global::System.IntPtr Feature_GetRegister(global::System.Runtime.InteropServices.HandleRef jarg1, byte[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_SetRegister")]
  public static extern global::System.IntPtr Feature_SetRegister(global::System.Runtime.InteropServices.HandleRef jarg1, byte[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_Interface_get")]
  public static extern string Feature_Interface_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_ToolTip_get")]
  public static extern string Feature_ToolTip_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_Description_get")]
  public static extern string Feature_Description_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_Name_get")]
  public static extern string Feature_Name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_DisplayName_get")]
  public static extern string Feature_DisplayName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_Visibility_get")]
  public static extern string Feature_Visibility_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_IsReadable_get")]
  public static extern bool Feature_IsReadable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_IsWritable_get")]
  public static extern bool Feature_IsWritable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_Representation_get")]
  public static extern string Feature_Representation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_Unit_get")]
  public static extern string Feature_Unit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_IsAvailable_get")]
  public static extern bool Feature_IsAvailable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_ValueInt_set")]
  public static extern void Feature_ValueInt_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_ValueInt_get")]
  public static extern long Feature_ValueInt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_IntMin_get")]
  public static extern long Feature_IntMin_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_IntMax_get")]
  public static extern long Feature_IntMax_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_IntInc_get")]
  public static extern long Feature_IntInc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_ValueDouble_set")]
  public static extern void Feature_ValueDouble_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_ValueDouble_get")]
  public static extern double Feature_ValueDouble_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_DoubleMin_get")]
  public static extern double Feature_DoubleMin_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_DoubleMax_get")]
  public static extern double Feature_DoubleMax_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_DoubleInc_get")]
  public static extern double Feature_DoubleInc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_DoublePrecision_get")]
  public static extern long Feature_DoublePrecision_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_MaxStringLength_get")]
  public static extern long Feature_MaxStringLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_ValueString_set")]
  public static extern void Feature_ValueString_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_ValueString_get")]
  public static extern string Feature_ValueString_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_IsDone_get")]
  public static extern bool Feature_IsDone_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_ValueBool_set")]
  public static extern void Feature_ValueBool_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_ValueBool_get")]
  public static extern bool Feature_ValueBool_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_IsSelector_get")]
  public static extern bool Feature_IsSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_RegisterLength_get")]
  public static extern ulong Feature_RegisterLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Feature_RegisterAddress_get")]
  public static extern ulong Feature_RegisterAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_BaseFeature__SWIG_0")]
  public static extern global::System.IntPtr new_BaseFeature__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_BaseFeature__SWIG_1")]
  public static extern global::System.IntPtr new_BaseFeature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_BaseFeature")]
  public static extern void delete_BaseFeature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BaseFeature_Interface_get")]
  public static extern string BaseFeature_Interface_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BaseFeature_ToolTip_get")]
  public static extern string BaseFeature_ToolTip_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BaseFeature_Description_get")]
  public static extern string BaseFeature_Description_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BaseFeature_Name_get")]
  public static extern string BaseFeature_Name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BaseFeature_DisplayName_get")]
  public static extern string BaseFeature_DisplayName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BaseFeature_Visibility_get")]
  public static extern string BaseFeature_Visibility_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BaseFeature_IsReadable_get")]
  public static extern bool BaseFeature_IsReadable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BaseFeature_IsWritable_get")]
  public static extern bool BaseFeature_IsWritable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BaseFeature_IsAvailable_get")]
  public static extern bool BaseFeature_IsAvailable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_DoubleFeature__SWIG_0")]
  public static extern global::System.IntPtr new_DoubleFeature__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_DoubleFeature__SWIG_1")]
  public static extern global::System.IntPtr new_DoubleFeature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_DoubleFeature")]
  public static extern void delete_DoubleFeature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_Value_set")]
  public static extern void DoubleFeature_Value_set(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_Value_get")]
  public static extern double DoubleFeature_Value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_Min_get")]
  public static extern double DoubleFeature_Min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_Max_get")]
  public static extern double DoubleFeature_Max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_Inc_get")]
  public static extern double DoubleFeature_Inc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_Unit_get")]
  public static extern string DoubleFeature_Unit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_Precision_get")]
  public static extern long DoubleFeature_Precision_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_Representation_get")]
  public static extern string DoubleFeature_Representation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_ValueString_get")]
  public static extern string DoubleFeature_ValueString_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_IntegerFeature__SWIG_0")]
  public static extern global::System.IntPtr new_IntegerFeature__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_IntegerFeature__SWIG_1")]
  public static extern global::System.IntPtr new_IntegerFeature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_IntegerFeature")]
  public static extern void delete_IntegerFeature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_GetSelectedFeatureList")]
  public static extern global::System.IntPtr IntegerFeature_GetSelectedFeatureList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_Min_get")]
  public static extern long IntegerFeature_Min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_Max_get")]
  public static extern long IntegerFeature_Max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_Inc_get")]
  public static extern long IntegerFeature_Inc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_Value_set")]
  public static extern void IntegerFeature_Value_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_Value_get")]
  public static extern long IntegerFeature_Value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_Unit_get")]
  public static extern string IntegerFeature_Unit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_Representation_get")]
  public static extern string IntegerFeature_Representation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_IsSelector_get")]
  public static extern bool IntegerFeature_IsSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_ValueString_get")]
  public static extern string IntegerFeature_ValueString_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_StringFeature__SWIG_0")]
  public static extern global::System.IntPtr new_StringFeature__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_StringFeature__SWIG_1")]
  public static extern global::System.IntPtr new_StringFeature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_StringFeature")]
  public static extern void delete_StringFeature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_StringFeature_MaxStringLength_get")]
  public static extern long StringFeature_MaxStringLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_StringFeature_ValueString_set")]
  public static extern void StringFeature_ValueString_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_StringFeature_ValueString_get")]
  public static extern string StringFeature_ValueString_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_BoolFeature__SWIG_0")]
  public static extern global::System.IntPtr new_BoolFeature__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_BoolFeature__SWIG_1")]
  public static extern global::System.IntPtr new_BoolFeature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_BoolFeature")]
  public static extern void delete_BoolFeature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BoolFeature_Value_set")]
  public static extern void BoolFeature_Value_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BoolFeature_Value_get")]
  public static extern bool BoolFeature_Value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BoolFeature_ValueString_get")]
  public static extern string BoolFeature_ValueString_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CommandFeature__SWIG_0")]
  public static extern global::System.IntPtr new_CommandFeature__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CommandFeature__SWIG_1")]
  public static extern global::System.IntPtr new_CommandFeature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CommandFeature")]
  public static extern void delete_CommandFeature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CommandFeature_Execute")]
  public static extern global::System.IntPtr CommandFeature_Execute(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CommandFeature_IsDone_get")]
  public static extern bool CommandFeature_IsDone_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CommandFeature_ValueString_get")]
  public static extern string CommandFeature_ValueString_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_EnumerationFeature__SWIG_0")]
  public static extern global::System.IntPtr new_EnumerationFeature__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_EnumerationFeature__SWIG_1")]
  public static extern global::System.IntPtr new_EnumerationFeature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_EnumerationFeature")]
  public static extern void delete_EnumerationFeature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_EnumerationFeature_GetEnumValueList")]
  public static extern global::System.IntPtr EnumerationFeature_GetEnumValueList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_EnumerationFeature_GetSelectedFeatureList")]
  public static extern global::System.IntPtr EnumerationFeature_GetSelectedFeatureList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_EnumerationFeature_IsSelector_get")]
  public static extern bool EnumerationFeature_IsSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_EnumerationFeature_ValueInt_set")]
  public static extern void EnumerationFeature_ValueInt_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_EnumerationFeature_ValueInt_get")]
  public static extern long EnumerationFeature_ValueInt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_EnumerationFeature_ValueString_set")]
  public static extern void EnumerationFeature_ValueString_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_EnumerationFeature_ValueString_get")]
  public static extern string EnumerationFeature_ValueString_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_RegisterFeature__SWIG_0")]
  public static extern global::System.IntPtr new_RegisterFeature__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_RegisterFeature__SWIG_1")]
  public static extern global::System.IntPtr new_RegisterFeature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_RegisterFeature")]
  public static extern void delete_RegisterFeature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_RegisterFeature_GetRegister")]
  public static extern global::System.IntPtr RegisterFeature_GetRegister(global::System.Runtime.InteropServices.HandleRef jarg1, byte[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_RegisterFeature_SetRegister")]
  public static extern global::System.IntPtr RegisterFeature_SetRegister(global::System.Runtime.InteropServices.HandleRef jarg1, byte[] jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_RegisterFeature_RegisterLength_get")]
  public static extern ulong RegisterFeature_RegisterLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_RegisterFeature_RegisterAddress_get")]
  public static extern ulong RegisterFeature_RegisterAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAcquisitionMode__SWIG_0")]
  public static extern global::System.IntPtr new_CAcquisitionMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAcquisitionMode__SWIG_1")]
  public static extern global::System.IntPtr new_CAcquisitionMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CAcquisitionMode")]
  public static extern void delete_CAcquisitionMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAcquisitionMode_Set")]
  public static extern global::System.IntPtr CAcquisitionMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAcquisitionMode_Get")]
  public static extern int CAcquisitionMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAcquisitionStatusSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CAcquisitionStatusSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAcquisitionStatusSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CAcquisitionStatusSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CAcquisitionStatusSelector")]
  public static extern void delete_CAcquisitionStatusSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAcquisitionStatusSelector_Set")]
  public static extern global::System.IntPtr CAcquisitionStatusSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAcquisitionStatusSelector_Get")]
  public static extern int CAcquisitionStatusSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CApertureStatus__SWIG_0")]
  public static extern global::System.IntPtr new_CApertureStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CApertureStatus__SWIG_1")]
  public static extern global::System.IntPtr new_CApertureStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CApertureStatus")]
  public static extern void delete_CApertureStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CApertureStatus_Set")]
  public static extern global::System.IntPtr CApertureStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CApertureStatus_Get")]
  public static extern int CApertureStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAutoFeatureRegionMode__SWIG_0")]
  public static extern global::System.IntPtr new_CAutoFeatureRegionMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAutoFeatureRegionMode__SWIG_1")]
  public static extern global::System.IntPtr new_CAutoFeatureRegionMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CAutoFeatureRegionMode")]
  public static extern void delete_CAutoFeatureRegionMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAutoFeatureRegionMode_Set")]
  public static extern global::System.IntPtr CAutoFeatureRegionMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAutoFeatureRegionMode_Get")]
  public static extern int CAutoFeatureRegionMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAutoFeatureRegionReference__SWIG_0")]
  public static extern global::System.IntPtr new_CAutoFeatureRegionReference__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAutoFeatureRegionReference__SWIG_1")]
  public static extern global::System.IntPtr new_CAutoFeatureRegionReference__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CAutoFeatureRegionReference")]
  public static extern void delete_CAutoFeatureRegionReference(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAutoFeatureRegionReference_Set")]
  public static extern global::System.IntPtr CAutoFeatureRegionReference_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAutoFeatureRegionReference_Get")]
  public static extern int CAutoFeatureRegionReference_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAutoFeatureRegionSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CAutoFeatureRegionSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CAutoFeatureRegionSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CAutoFeatureRegionSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CAutoFeatureRegionSelector")]
  public static extern void delete_CAutoFeatureRegionSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAutoFeatureRegionSelector_Set")]
  public static extern global::System.IntPtr CAutoFeatureRegionSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAutoFeatureRegionSelector_Get")]
  public static extern int CAutoFeatureRegionSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBOPFShift__SWIG_0")]
  public static extern global::System.IntPtr new_CBOPFShift__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBOPFShift__SWIG_1")]
  public static extern global::System.IntPtr new_CBOPFShift__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBOPFShift")]
  public static extern void delete_CBOPFShift(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBOPFShift_Set")]
  public static extern global::System.IntPtr CBOPFShift_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBOPFShift_Get")]
  public static extern int CBOPFShift_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBalanceWhiteAuto__SWIG_0")]
  public static extern global::System.IntPtr new_CBalanceWhiteAuto__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBalanceWhiteAuto__SWIG_1")]
  public static extern global::System.IntPtr new_CBalanceWhiteAuto__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBalanceWhiteAuto")]
  public static extern void delete_CBalanceWhiteAuto(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBalanceWhiteAuto_Set")]
  public static extern global::System.IntPtr CBalanceWhiteAuto_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBalanceWhiteAuto_Get")]
  public static extern int CBalanceWhiteAuto_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBalanceWhiteAutoStatus__SWIG_0")]
  public static extern global::System.IntPtr new_CBalanceWhiteAutoStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBalanceWhiteAutoStatus__SWIG_1")]
  public static extern global::System.IntPtr new_CBalanceWhiteAutoStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBalanceWhiteAutoStatus")]
  public static extern void delete_CBalanceWhiteAutoStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBalanceWhiteAutoStatus_Set")]
  public static extern global::System.IntPtr CBalanceWhiteAutoStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBalanceWhiteAutoStatus_Get")]
  public static extern int CBalanceWhiteAutoStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBaudrate__SWIG_0")]
  public static extern global::System.IntPtr new_CBaudrate__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBaudrate__SWIG_1")]
  public static extern global::System.IntPtr new_CBaudrate__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBaudrate")]
  public static extern void delete_CBaudrate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBaudrate_Set")]
  public static extern global::System.IntPtr CBaudrate_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBaudrate_Get")]
  public static extern int CBaudrate_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBinningHorizontalMode__SWIG_0")]
  public static extern global::System.IntPtr new_CBinningHorizontalMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBinningHorizontalMode__SWIG_1")]
  public static extern global::System.IntPtr new_CBinningHorizontalMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBinningHorizontalMode")]
  public static extern void delete_CBinningHorizontalMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBinningHorizontalMode_Set")]
  public static extern global::System.IntPtr CBinningHorizontalMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBinningHorizontalMode_Get")]
  public static extern int CBinningHorizontalMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBinningSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CBinningSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBinningSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CBinningSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBinningSelector")]
  public static extern void delete_CBinningSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBinningSelector_Set")]
  public static extern global::System.IntPtr CBinningSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBinningSelector_Get")]
  public static extern int CBinningSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBinningVerticalMode__SWIG_0")]
  public static extern global::System.IntPtr new_CBinningVerticalMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBinningVerticalMode__SWIG_1")]
  public static extern global::System.IntPtr new_CBinningVerticalMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBinningVerticalMode")]
  public static extern void delete_CBinningVerticalMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBinningVerticalMode_Set")]
  public static extern global::System.IntPtr CBinningVerticalMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBinningVerticalMode_Get")]
  public static extern int CBinningVerticalMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBlackLevelSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CBlackLevelSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBlackLevelSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CBlackLevelSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBlackLevelSelector")]
  public static extern void delete_CBlackLevelSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBlackLevelSelector_Set")]
  public static extern global::System.IntPtr CBlackLevelSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBlackLevelSelector_Get")]
  public static extern int CBlackLevelSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBlackSunSuppression__SWIG_0")]
  public static extern global::System.IntPtr new_CBlackSunSuppression__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBlackSunSuppression__SWIG_1")]
  public static extern global::System.IntPtr new_CBlackSunSuppression__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBlackSunSuppression")]
  public static extern void delete_CBlackSunSuppression(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBlackSunSuppression_Set")]
  public static extern global::System.IntPtr CBlackSunSuppression_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBlackSunSuppression_Get")]
  public static extern int CBlackSunSuppression_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerEnable__SWIG_0")]
  public static extern global::System.IntPtr new_CBoSequencerEnable__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerEnable__SWIG_1")]
  public static extern global::System.IntPtr new_CBoSequencerEnable__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBoSequencerEnable")]
  public static extern void delete_CBoSequencerEnable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerEnable_Set")]
  public static extern global::System.IntPtr CBoSequencerEnable_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerEnable_Get")]
  public static extern int CBoSequencerEnable_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerIOSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CBoSequencerIOSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerIOSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CBoSequencerIOSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBoSequencerIOSelector")]
  public static extern void delete_CBoSequencerIOSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerIOSelector_Set")]
  public static extern global::System.IntPtr CBoSequencerIOSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerIOSelector_Get")]
  public static extern int CBoSequencerIOSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerMode__SWIG_0")]
  public static extern global::System.IntPtr new_CBoSequencerMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerMode__SWIG_1")]
  public static extern global::System.IntPtr new_CBoSequencerMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBoSequencerMode")]
  public static extern void delete_CBoSequencerMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerMode_Set")]
  public static extern global::System.IntPtr CBoSequencerMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerMode_Get")]
  public static extern int CBoSequencerMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerSensorDigitizationTaps__SWIG_0")]
  public static extern global::System.IntPtr new_CBoSequencerSensorDigitizationTaps__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerSensorDigitizationTaps__SWIG_1")]
  public static extern global::System.IntPtr new_CBoSequencerSensorDigitizationTaps__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBoSequencerSensorDigitizationTaps")]
  public static extern void delete_CBoSequencerSensorDigitizationTaps(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerSensorDigitizationTaps_Set")]
  public static extern global::System.IntPtr CBoSequencerSensorDigitizationTaps_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerSensorDigitizationTaps_Get")]
  public static extern int CBoSequencerSensorDigitizationTaps_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerStart__SWIG_0")]
  public static extern global::System.IntPtr new_CBoSequencerStart__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBoSequencerStart__SWIG_1")]
  public static extern global::System.IntPtr new_CBoSequencerStart__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBoSequencerStart")]
  public static extern void delete_CBoSequencerStart(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerStart_Set")]
  public static extern global::System.IntPtr CBoSequencerStart_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerStart_Get")]
  public static extern int CBoSequencerStart_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBrightnessAutoPriority__SWIG_0")]
  public static extern global::System.IntPtr new_CBrightnessAutoPriority__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBrightnessAutoPriority__SWIG_1")]
  public static extern global::System.IntPtr new_CBrightnessAutoPriority__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBrightnessAutoPriority")]
  public static extern void delete_CBrightnessAutoPriority(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBrightnessAutoPriority_Set")]
  public static extern global::System.IntPtr CBrightnessAutoPriority_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBrightnessAutoPriority_Get")]
  public static extern int CBrightnessAutoPriority_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBrightnessCorrection__SWIG_0")]
  public static extern global::System.IntPtr new_CBrightnessCorrection__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CBrightnessCorrection__SWIG_1")]
  public static extern global::System.IntPtr new_CBrightnessCorrection__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CBrightnessCorrection")]
  public static extern void delete_CBrightnessCorrection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBrightnessCorrection_Set")]
  public static extern global::System.IntPtr CBrightnessCorrection_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBrightnessCorrection_Get")]
  public static extern int CBrightnessCorrection_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCalibrationMatrixValueSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CCalibrationMatrixValueSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCalibrationMatrixValueSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CCalibrationMatrixValueSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CCalibrationMatrixValueSelector")]
  public static extern void delete_CCalibrationMatrixValueSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCalibrationMatrixValueSelector_Set")]
  public static extern global::System.IntPtr CCalibrationMatrixValueSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCalibrationMatrixValueSelector_Get")]
  public static extern int CCalibrationMatrixValueSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CChunkSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CChunkSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CChunkSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CChunkSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CChunkSelector")]
  public static extern void delete_CChunkSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CChunkSelector_Set")]
  public static extern global::System.IntPtr CChunkSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CChunkSelector_Get")]
  public static extern int CChunkSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CClConfiguration__SWIG_0")]
  public static extern global::System.IntPtr new_CClConfiguration__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CClConfiguration__SWIG_1")]
  public static extern global::System.IntPtr new_CClConfiguration__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CClConfiguration")]
  public static extern void delete_CClConfiguration(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CClConfiguration_Set")]
  public static extern global::System.IntPtr CClConfiguration_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CClConfiguration_Get")]
  public static extern int CClConfiguration_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CClTimeSlotsCount__SWIG_0")]
  public static extern global::System.IntPtr new_CClTimeSlotsCount__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CClTimeSlotsCount__SWIG_1")]
  public static extern global::System.IntPtr new_CClTimeSlotsCount__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CClTimeSlotsCount")]
  public static extern void delete_CClTimeSlotsCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CClTimeSlotsCount_Set")]
  public static extern global::System.IntPtr CClTimeSlotsCount_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CClTimeSlotsCount_Get")]
  public static extern int CClTimeSlotsCount_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CColorTransformationAuto__SWIG_0")]
  public static extern global::System.IntPtr new_CColorTransformationAuto__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CColorTransformationAuto__SWIG_1")]
  public static extern global::System.IntPtr new_CColorTransformationAuto__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CColorTransformationAuto")]
  public static extern void delete_CColorTransformationAuto(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationAuto_Set")]
  public static extern global::System.IntPtr CColorTransformationAuto_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationAuto_Get")]
  public static extern int CColorTransformationAuto_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CColorTransformationFactoryListSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CColorTransformationFactoryListSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CColorTransformationFactoryListSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CColorTransformationFactoryListSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CColorTransformationFactoryListSelector")]
  public static extern void delete_CColorTransformationFactoryListSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationFactoryListSelector_Set")]
  public static extern global::System.IntPtr CColorTransformationFactoryListSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationFactoryListSelector_Get")]
  public static extern int CColorTransformationFactoryListSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CColorTransformationSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CColorTransformationSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CColorTransformationSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CColorTransformationSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CColorTransformationSelector")]
  public static extern void delete_CColorTransformationSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationSelector_Set")]
  public static extern global::System.IntPtr CColorTransformationSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationSelector_Get")]
  public static extern int CColorTransformationSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CColorTransformationValueSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CColorTransformationValueSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CColorTransformationValueSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CColorTransformationValueSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CColorTransformationValueSelector")]
  public static extern void delete_CColorTransformationValueSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationValueSelector_Set")]
  public static extern global::System.IntPtr CColorTransformationValueSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationValueSelector_Get")]
  public static extern int CColorTransformationValueSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CComponentSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CComponentSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CComponentSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CComponentSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CComponentSelector")]
  public static extern void delete_CComponentSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CComponentSelector_Set")]
  public static extern global::System.IntPtr CComponentSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CComponentSelector_Get")]
  public static extern int CComponentSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterEventActivation__SWIG_0")]
  public static extern global::System.IntPtr new_CCounterEventActivation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterEventActivation__SWIG_1")]
  public static extern global::System.IntPtr new_CCounterEventActivation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CCounterEventActivation")]
  public static extern void delete_CCounterEventActivation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterEventActivation_Set")]
  public static extern global::System.IntPtr CCounterEventActivation_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterEventActivation_Get")]
  public static extern int CCounterEventActivation_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterEventSource__SWIG_0")]
  public static extern global::System.IntPtr new_CCounterEventSource__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterEventSource__SWIG_1")]
  public static extern global::System.IntPtr new_CCounterEventSource__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CCounterEventSource")]
  public static extern void delete_CCounterEventSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterEventSource_Set")]
  public static extern global::System.IntPtr CCounterEventSource_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterEventSource_Get")]
  public static extern int CCounterEventSource_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterResetActivation__SWIG_0")]
  public static extern global::System.IntPtr new_CCounterResetActivation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterResetActivation__SWIG_1")]
  public static extern global::System.IntPtr new_CCounterResetActivation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CCounterResetActivation")]
  public static extern void delete_CCounterResetActivation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterResetActivation_Set")]
  public static extern global::System.IntPtr CCounterResetActivation_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterResetActivation_Get")]
  public static extern int CCounterResetActivation_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterResetSource__SWIG_0")]
  public static extern global::System.IntPtr new_CCounterResetSource__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterResetSource__SWIG_1")]
  public static extern global::System.IntPtr new_CCounterResetSource__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CCounterResetSource")]
  public static extern void delete_CCounterResetSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterResetSource_Set")]
  public static extern global::System.IntPtr CCounterResetSource_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterResetSource_Get")]
  public static extern int CCounterResetSource_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CCounterSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCounterSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CCounterSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CCounterSelector")]
  public static extern void delete_CCounterSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterSelector_Set")]
  public static extern global::System.IntPtr CCounterSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterSelector_Get")]
  public static extern int CCounterSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCustomDataConfigurationMode__SWIG_0")]
  public static extern global::System.IntPtr new_CCustomDataConfigurationMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CCustomDataConfigurationMode__SWIG_1")]
  public static extern global::System.IntPtr new_CCustomDataConfigurationMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CCustomDataConfigurationMode")]
  public static extern void delete_CCustomDataConfigurationMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCustomDataConfigurationMode_Set")]
  public static extern global::System.IntPtr CCustomDataConfigurationMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCustomDataConfigurationMode_Get")]
  public static extern int CCustomDataConfigurationMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDecimationHorizontalMode__SWIG_0")]
  public static extern global::System.IntPtr new_CDecimationHorizontalMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDecimationHorizontalMode__SWIG_1")]
  public static extern global::System.IntPtr new_CDecimationHorizontalMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDecimationHorizontalMode")]
  public static extern void delete_CDecimationHorizontalMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDecimationHorizontalMode_Set")]
  public static extern global::System.IntPtr CDecimationHorizontalMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDecimationHorizontalMode_Get")]
  public static extern int CDecimationHorizontalMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDecimationVerticalMode__SWIG_0")]
  public static extern global::System.IntPtr new_CDecimationVerticalMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDecimationVerticalMode__SWIG_1")]
  public static extern global::System.IntPtr new_CDecimationVerticalMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDecimationVerticalMode")]
  public static extern void delete_CDecimationVerticalMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDecimationVerticalMode_Set")]
  public static extern global::System.IntPtr CDecimationVerticalMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDecimationVerticalMode_Get")]
  public static extern int CDecimationVerticalMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDefectPixelListSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CDefectPixelListSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDefectPixelListSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CDefectPixelListSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDefectPixelListSelector")]
  public static extern void delete_CDefectPixelListSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDefectPixelListSelector_Set")]
  public static extern global::System.IntPtr CDefectPixelListSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDefectPixelListSelector_Get")]
  public static extern int CDefectPixelListSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceCharacterSet__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceCharacterSet__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceCharacterSet__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceCharacterSet__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceCharacterSet")]
  public static extern void delete_CDeviceCharacterSet(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceCharacterSet_Set")]
  public static extern global::System.IntPtr CDeviceCharacterSet_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceCharacterSet_Get")]
  public static extern int CDeviceCharacterSet_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceClockSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceClockSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceClockSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceClockSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceClockSelector")]
  public static extern void delete_CDeviceClockSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceClockSelector_Set")]
  public static extern global::System.IntPtr CDeviceClockSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceClockSelector_Get")]
  public static extern int CDeviceClockSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceFrontUARTSource__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceFrontUARTSource__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceFrontUARTSource__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceFrontUARTSource__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceFrontUARTSource")]
  public static extern void delete_CDeviceFrontUARTSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceFrontUARTSource_Set")]
  public static extern global::System.IntPtr CDeviceFrontUARTSource_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceFrontUARTSource_Get")]
  public static extern int CDeviceFrontUARTSource_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceLicense__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceLicense__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceLicense__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceLicense__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceLicense")]
  public static extern void delete_CDeviceLicense(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLicense_Set")]
  public static extern global::System.IntPtr CDeviceLicense_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLicense_Get")]
  public static extern int CDeviceLicense_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceLicenseTypeSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceLicenseTypeSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceLicenseTypeSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceLicenseTypeSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceLicenseTypeSelector")]
  public static extern void delete_CDeviceLicenseTypeSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLicenseTypeSelector_Set")]
  public static extern global::System.IntPtr CDeviceLicenseTypeSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLicenseTypeSelector_Get")]
  public static extern int CDeviceLicenseTypeSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceLinkHeartbeatMode__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceLinkHeartbeatMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceLinkHeartbeatMode__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceLinkHeartbeatMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceLinkHeartbeatMode")]
  public static extern void delete_CDeviceLinkHeartbeatMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLinkHeartbeatMode_Set")]
  public static extern global::System.IntPtr CDeviceLinkHeartbeatMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLinkHeartbeatMode_Get")]
  public static extern int CDeviceLinkHeartbeatMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceLinkSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceLinkSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceLinkSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceLinkSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceLinkSelector")]
  public static extern void delete_CDeviceLinkSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLinkSelector_Set")]
  public static extern global::System.IntPtr CDeviceLinkSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLinkSelector_Get")]
  public static extern int CDeviceLinkSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceRegistersEndianness__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceRegistersEndianness__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceRegistersEndianness__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceRegistersEndianness__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceRegistersEndianness")]
  public static extern void delete_CDeviceRegistersEndianness(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceRegistersEndianness_Set")]
  public static extern global::System.IntPtr CDeviceRegistersEndianness_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceRegistersEndianness_Get")]
  public static extern int CDeviceRegistersEndianness_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceScanType__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceScanType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceScanType__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceScanType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceScanType")]
  public static extern void delete_CDeviceScanType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceScanType_Set")]
  public static extern global::System.IntPtr CDeviceScanType_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceScanType_Get")]
  public static extern int CDeviceScanType_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSensorSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceSensorSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSensorSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceSensorSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceSensorSelector")]
  public static extern void delete_CDeviceSensorSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSensorSelector_Set")]
  public static extern global::System.IntPtr CDeviceSensorSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSensorSelector_Get")]
  public static extern int CDeviceSensorSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSensorType__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceSensorType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSensorType__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceSensorType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceSensorType")]
  public static extern void delete_CDeviceSensorType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSensorType_Set")]
  public static extern global::System.IntPtr CDeviceSensorType_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSensorType_Get")]
  public static extern int CDeviceSensorType_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSensorVersion__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceSensorVersion__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSensorVersion__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceSensorVersion__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceSensorVersion")]
  public static extern void delete_CDeviceSensorVersion(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSensorVersion_Set")]
  public static extern global::System.IntPtr CDeviceSensorVersion_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSensorVersion_Get")]
  public static extern int CDeviceSensorVersion_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSerialPortBaudRate__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceSerialPortBaudRate__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSerialPortBaudRate__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceSerialPortBaudRate__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceSerialPortBaudRate")]
  public static extern void delete_CDeviceSerialPortBaudRate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSerialPortBaudRate_Set")]
  public static extern global::System.IntPtr CDeviceSerialPortBaudRate_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSerialPortBaudRate_Get")]
  public static extern int CDeviceSerialPortBaudRate_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSerialPortSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceSerialPortSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceSerialPortSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceSerialPortSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceSerialPortSelector")]
  public static extern void delete_CDeviceSerialPortSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSerialPortSelector_Set")]
  public static extern global::System.IntPtr CDeviceSerialPortSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSerialPortSelector_Get")]
  public static extern int CDeviceSerialPortSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceStreamChannelEndianness__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceStreamChannelEndianness__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceStreamChannelEndianness__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceStreamChannelEndianness__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceStreamChannelEndianness")]
  public static extern void delete_CDeviceStreamChannelEndianness(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceStreamChannelEndianness_Set")]
  public static extern global::System.IntPtr CDeviceStreamChannelEndianness_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceStreamChannelEndianness_Get")]
  public static extern int CDeviceStreamChannelEndianness_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceStreamChannelType__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceStreamChannelType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceStreamChannelType__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceStreamChannelType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceStreamChannelType")]
  public static extern void delete_CDeviceStreamChannelType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceStreamChannelType_Set")]
  public static extern global::System.IntPtr CDeviceStreamChannelType_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceStreamChannelType_Get")]
  public static extern int CDeviceStreamChannelType_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTLType__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceTLType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTLType__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceTLType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceTLType")]
  public static extern void delete_CDeviceTLType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTLType_Set")]
  public static extern global::System.IntPtr CDeviceTLType_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTLType_Get")]
  public static extern int CDeviceTLType_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTapGeometry__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceTapGeometry__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTapGeometry__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceTapGeometry__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceTapGeometry")]
  public static extern void delete_CDeviceTapGeometry(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTapGeometry_Set")]
  public static extern global::System.IntPtr CDeviceTapGeometry_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTapGeometry_Get")]
  public static extern int CDeviceTapGeometry_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTemperatureSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceTemperatureSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTemperatureSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceTemperatureSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceTemperatureSelector")]
  public static extern void delete_CDeviceTemperatureSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTemperatureSelector_Set")]
  public static extern global::System.IntPtr CDeviceTemperatureSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTemperatureSelector_Get")]
  public static extern int CDeviceTemperatureSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTemperatureStatus__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceTemperatureStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTemperatureStatus__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceTemperatureStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceTemperatureStatus")]
  public static extern void delete_CDeviceTemperatureStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTemperatureStatus_Set")]
  public static extern global::System.IntPtr CDeviceTemperatureStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTemperatureStatus_Get")]
  public static extern int CDeviceTemperatureStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTemperatureStatusTransitionSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceTemperatureStatusTransitionSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceTemperatureStatusTransitionSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceTemperatureStatusTransitionSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceTemperatureStatusTransitionSelector")]
  public static extern void delete_CDeviceTemperatureStatusTransitionSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTemperatureStatusTransitionSelector_Set")]
  public static extern global::System.IntPtr CDeviceTemperatureStatusTransitionSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTemperatureStatusTransitionSelector_Get")]
  public static extern int CDeviceTemperatureStatusTransitionSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceType__SWIG_0")]
  public static extern global::System.IntPtr new_CDeviceType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CDeviceType__SWIG_1")]
  public static extern global::System.IntPtr new_CDeviceType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CDeviceType")]
  public static extern void delete_CDeviceType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceType_Set")]
  public static extern global::System.IntPtr CDeviceType_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceType_Get")]
  public static extern int CDeviceType_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CEventNotification__SWIG_0")]
  public static extern global::System.IntPtr new_CEventNotification__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CEventNotification__SWIG_1")]
  public static extern global::System.IntPtr new_CEventNotification__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CEventNotification")]
  public static extern void delete_CEventNotification(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CEventNotification_Set")]
  public static extern global::System.IntPtr CEventNotification_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CEventNotification_Get")]
  public static extern int CEventNotification_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CEventSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CEventSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CEventSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CEventSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CEventSelector")]
  public static extern void delete_CEventSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CEventSelector_Set")]
  public static extern global::System.IntPtr CEventSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CEventSelector_Get")]
  public static extern int CEventSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CExposureAuto__SWIG_0")]
  public static extern global::System.IntPtr new_CExposureAuto__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CExposureAuto__SWIG_1")]
  public static extern global::System.IntPtr new_CExposureAuto__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CExposureAuto")]
  public static extern void delete_CExposureAuto(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CExposureAuto_Set")]
  public static extern global::System.IntPtr CExposureAuto_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CExposureAuto_Get")]
  public static extern int CExposureAuto_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CExposureMode__SWIG_0")]
  public static extern global::System.IntPtr new_CExposureMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CExposureMode__SWIG_1")]
  public static extern global::System.IntPtr new_CExposureMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CExposureMode")]
  public static extern void delete_CExposureMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CExposureMode_Set")]
  public static extern global::System.IntPtr CExposureMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CExposureMode_Get")]
  public static extern int CExposureMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CFocalLengthStatus__SWIG_0")]
  public static extern global::System.IntPtr new_CFocalLengthStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CFocalLengthStatus__SWIG_1")]
  public static extern global::System.IntPtr new_CFocalLengthStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CFocalLengthStatus")]
  public static extern void delete_CFocalLengthStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CFocalLengthStatus_Set")]
  public static extern global::System.IntPtr CFocalLengthStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CFocalLengthStatus_Get")]
  public static extern int CFocalLengthStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CFocusStatus__SWIG_0")]
  public static extern global::System.IntPtr new_CFocusStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CFocusStatus__SWIG_1")]
  public static extern global::System.IntPtr new_CFocusStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CFocusStatus")]
  public static extern void delete_CFocusStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CFocusStatus_Set")]
  public static extern global::System.IntPtr CFocusStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CFocusStatus_Get")]
  public static extern int CFocusStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGainAuto__SWIG_0")]
  public static extern global::System.IntPtr new_CGainAuto__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGainAuto__SWIG_1")]
  public static extern global::System.IntPtr new_CGainAuto__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CGainAuto")]
  public static extern void delete_CGainAuto(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGainAuto_Set")]
  public static extern global::System.IntPtr CGainAuto_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGainAuto_Get")]
  public static extern int CGainAuto_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGainSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CGainSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGainSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CGainSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CGainSelector")]
  public static extern void delete_CGainSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGainSelector_Set")]
  public static extern global::System.IntPtr CGainSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGainSelector_Get")]
  public static extern int CGainSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGevCCP__SWIG_0")]
  public static extern global::System.IntPtr new_CGevCCP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGevCCP__SWIG_1")]
  public static extern global::System.IntPtr new_CGevCCP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CGevCCP")]
  public static extern void delete_CGevCCP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevCCP_Set")]
  public static extern global::System.IntPtr CGevCCP_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevCCP_Get")]
  public static extern int CGevCCP_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGevGVCPExtendedStatusCodesSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CGevGVCPExtendedStatusCodesSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGevGVCPExtendedStatusCodesSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CGevGVCPExtendedStatusCodesSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CGevGVCPExtendedStatusCodesSelector")]
  public static extern void delete_CGevGVCPExtendedStatusCodesSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevGVCPExtendedStatusCodesSelector_Set")]
  public static extern global::System.IntPtr CGevGVCPExtendedStatusCodesSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevGVCPExtendedStatusCodesSelector_Get")]
  public static extern int CGevGVCPExtendedStatusCodesSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGevIPConfigurationStatus__SWIG_0")]
  public static extern global::System.IntPtr new_CGevIPConfigurationStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGevIPConfigurationStatus__SWIG_1")]
  public static extern global::System.IntPtr new_CGevIPConfigurationStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CGevIPConfigurationStatus")]
  public static extern void delete_CGevIPConfigurationStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevIPConfigurationStatus_Set")]
  public static extern global::System.IntPtr CGevIPConfigurationStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevIPConfigurationStatus_Get")]
  public static extern int CGevIPConfigurationStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGevSupportedOptionSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CGevSupportedOptionSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CGevSupportedOptionSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CGevSupportedOptionSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CGevSupportedOptionSelector")]
  public static extern void delete_CGevSupportedOptionSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevSupportedOptionSelector_Set")]
  public static extern global::System.IntPtr CGevSupportedOptionSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevSupportedOptionSelector_Get")]
  public static extern int CGevSupportedOptionSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CHDRGainRatioSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CHDRGainRatioSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CHDRGainRatioSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CHDRGainRatioSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CHDRGainRatioSelector")]
  public static extern void delete_CHDRGainRatioSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CHDRGainRatioSelector_Set")]
  public static extern global::System.IntPtr CHDRGainRatioSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CHDRGainRatioSelector_Get")]
  public static extern int CHDRGainRatioSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CHDRTonemappingCurvePresetSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CHDRTonemappingCurvePresetSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CHDRTonemappingCurvePresetSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CHDRTonemappingCurvePresetSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CHDRTonemappingCurvePresetSelector")]
  public static extern void delete_CHDRTonemappingCurvePresetSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CHDRTonemappingCurvePresetSelector_Set")]
  public static extern global::System.IntPtr CHDRTonemappingCurvePresetSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CHDRTonemappingCurvePresetSelector_Get")]
  public static extern int CHDRTonemappingCurvePresetSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CImageCompressionJPEGFormatOption__SWIG_0")]
  public static extern global::System.IntPtr new_CImageCompressionJPEGFormatOption__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CImageCompressionJPEGFormatOption__SWIG_1")]
  public static extern global::System.IntPtr new_CImageCompressionJPEGFormatOption__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CImageCompressionJPEGFormatOption")]
  public static extern void delete_CImageCompressionJPEGFormatOption(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CImageCompressionJPEGFormatOption_Set")]
  public static extern global::System.IntPtr CImageCompressionJPEGFormatOption_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CImageCompressionJPEGFormatOption_Get")]
  public static extern int CImageCompressionJPEGFormatOption_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CImageCompressionMode__SWIG_0")]
  public static extern global::System.IntPtr new_CImageCompressionMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CImageCompressionMode__SWIG_1")]
  public static extern global::System.IntPtr new_CImageCompressionMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CImageCompressionMode")]
  public static extern void delete_CImageCompressionMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CImageCompressionMode_Set")]
  public static extern global::System.IntPtr CImageCompressionMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CImageCompressionMode_Get")]
  public static extern int CImageCompressionMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CImageCompressionRateOption__SWIG_0")]
  public static extern global::System.IntPtr new_CImageCompressionRateOption__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CImageCompressionRateOption__SWIG_1")]
  public static extern global::System.IntPtr new_CImageCompressionRateOption__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CImageCompressionRateOption")]
  public static extern void delete_CImageCompressionRateOption(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CImageCompressionRateOption_Set")]
  public static extern global::System.IntPtr CImageCompressionRateOption_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CImageCompressionRateOption_Get")]
  public static extern int CImageCompressionRateOption_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CInterfaceSpeedMode__SWIG_0")]
  public static extern global::System.IntPtr new_CInterfaceSpeedMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CInterfaceSpeedMode__SWIG_1")]
  public static extern global::System.IntPtr new_CInterfaceSpeedMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CInterfaceSpeedMode")]
  public static extern void delete_CInterfaceSpeedMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CInterfaceSpeedMode_Set")]
  public static extern global::System.IntPtr CInterfaceSpeedMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CInterfaceSpeedMode_Get")]
  public static extern int CInterfaceSpeedMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLUTContent__SWIG_0")]
  public static extern global::System.IntPtr new_CLUTContent__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLUTContent__SWIG_1")]
  public static extern global::System.IntPtr new_CLUTContent__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CLUTContent")]
  public static extern void delete_CLUTContent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLUTContent_Set")]
  public static extern global::System.IntPtr CLUTContent_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLUTContent_Get")]
  public static extern int CLUTContent_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLUTSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CLUTSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLUTSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CLUTSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CLUTSelector")]
  public static extern void delete_CLUTSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLUTSelector_Set")]
  public static extern global::System.IntPtr CLUTSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLUTSelector_Get")]
  public static extern int CLUTSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLineFormat__SWIG_0")]
  public static extern global::System.IntPtr new_CLineFormat__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLineFormat__SWIG_1")]
  public static extern global::System.IntPtr new_CLineFormat__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CLineFormat")]
  public static extern void delete_CLineFormat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineFormat_Set")]
  public static extern global::System.IntPtr CLineFormat_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineFormat_Get")]
  public static extern int CLineFormat_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLineMode__SWIG_0")]
  public static extern global::System.IntPtr new_CLineMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLineMode__SWIG_1")]
  public static extern global::System.IntPtr new_CLineMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CLineMode")]
  public static extern void delete_CLineMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineMode_Set")]
  public static extern global::System.IntPtr CLineMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineMode_Get")]
  public static extern int CLineMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLinePWMConfigurationMode__SWIG_0")]
  public static extern global::System.IntPtr new_CLinePWMConfigurationMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLinePWMConfigurationMode__SWIG_1")]
  public static extern global::System.IntPtr new_CLinePWMConfigurationMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CLinePWMConfigurationMode")]
  public static extern void delete_CLinePWMConfigurationMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLinePWMConfigurationMode_Set")]
  public static extern global::System.IntPtr CLinePWMConfigurationMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLinePWMConfigurationMode_Get")]
  public static extern int CLinePWMConfigurationMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLinePWMMode__SWIG_0")]
  public static extern global::System.IntPtr new_CLinePWMMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLinePWMMode__SWIG_1")]
  public static extern global::System.IntPtr new_CLinePWMMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CLinePWMMode")]
  public static extern void delete_CLinePWMMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLinePWMMode_Set")]
  public static extern global::System.IntPtr CLinePWMMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLinePWMMode_Get")]
  public static extern int CLinePWMMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLineSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CLineSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLineSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CLineSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CLineSelector")]
  public static extern void delete_CLineSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineSelector_Set")]
  public static extern global::System.IntPtr CLineSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineSelector_Get")]
  public static extern int CLineSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLineSource__SWIG_0")]
  public static extern global::System.IntPtr new_CLineSource__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CLineSource__SWIG_1")]
  public static extern global::System.IntPtr new_CLineSource__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CLineSource")]
  public static extern void delete_CLineSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineSource_Set")]
  public static extern global::System.IntPtr CLineSource_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineSource_Get")]
  public static extern int CLineSource_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryActivePart__SWIG_0")]
  public static extern global::System.IntPtr new_CMemoryActivePart__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryActivePart__SWIG_1")]
  public static extern global::System.IntPtr new_CMemoryActivePart__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CMemoryActivePart")]
  public static extern void delete_CMemoryActivePart(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryActivePart_Set")]
  public static extern global::System.IntPtr CMemoryActivePart_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryActivePart_Get")]
  public static extern int CMemoryActivePart_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryMode__SWIG_0")]
  public static extern global::System.IntPtr new_CMemoryMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryMode__SWIG_1")]
  public static extern global::System.IntPtr new_CMemoryMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CMemoryMode")]
  public static extern void delete_CMemoryMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryMode_Set")]
  public static extern global::System.IntPtr CMemoryMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryMode_Get")]
  public static extern int CMemoryMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryPartIncrementSource__SWIG_0")]
  public static extern global::System.IntPtr new_CMemoryPartIncrementSource__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryPartIncrementSource__SWIG_1")]
  public static extern global::System.IntPtr new_CMemoryPartIncrementSource__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CMemoryPartIncrementSource")]
  public static extern void delete_CMemoryPartIncrementSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryPartIncrementSource_Set")]
  public static extern global::System.IntPtr CMemoryPartIncrementSource_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryPartIncrementSource_Get")]
  public static extern int CMemoryPartIncrementSource_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryPartMode__SWIG_0")]
  public static extern global::System.IntPtr new_CMemoryPartMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryPartMode__SWIG_1")]
  public static extern global::System.IntPtr new_CMemoryPartMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CMemoryPartMode")]
  public static extern void delete_CMemoryPartMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryPartMode_Set")]
  public static extern global::System.IntPtr CMemoryPartMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryPartMode_Get")]
  public static extern int CMemoryPartMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryPartSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CMemoryPartSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CMemoryPartSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CMemoryPartSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CMemoryPartSelector")]
  public static extern void delete_CMemoryPartSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryPartSelector_Set")]
  public static extern global::System.IntPtr CMemoryPartSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryPartSelector_Get")]
  public static extern int CMemoryPartSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_COpticControllerSelector__SWIG_0")]
  public static extern global::System.IntPtr new_COpticControllerSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_COpticControllerSelector__SWIG_1")]
  public static extern global::System.IntPtr new_COpticControllerSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_COpticControllerSelector")]
  public static extern void delete_COpticControllerSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_COpticControllerSelector_Set")]
  public static extern global::System.IntPtr COpticControllerSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_COpticControllerSelector_Get")]
  public static extern int COpticControllerSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_COpticControllerStatus__SWIG_0")]
  public static extern global::System.IntPtr new_COpticControllerStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_COpticControllerStatus__SWIG_1")]
  public static extern global::System.IntPtr new_COpticControllerStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_COpticControllerStatus")]
  public static extern void delete_COpticControllerStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_COpticControllerStatus_Set")]
  public static extern global::System.IntPtr COpticControllerStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_COpticControllerStatus_Get")]
  public static extern int COpticControllerStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPartialScanEnabled__SWIG_0")]
  public static extern global::System.IntPtr new_CPartialScanEnabled__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPartialScanEnabled__SWIG_1")]
  public static extern global::System.IntPtr new_CPartialScanEnabled__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPartialScanEnabled")]
  public static extern void delete_CPartialScanEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPartialScanEnabled_Set")]
  public static extern global::System.IntPtr CPartialScanEnabled_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPartialScanEnabled_Get")]
  public static extern int CPartialScanEnabled_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPixelFormat__SWIG_0")]
  public static extern global::System.IntPtr new_CPixelFormat__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPixelFormat__SWIG_1")]
  public static extern global::System.IntPtr new_CPixelFormat__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPixelFormat")]
  public static extern void delete_CPixelFormat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPixelFormat_Set")]
  public static extern global::System.IntPtr CPixelFormat_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPixelFormat_Get")]
  public static extern int CPixelFormat_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpClockAccuracy__SWIG_0")]
  public static extern global::System.IntPtr new_CPtpClockAccuracy__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpClockAccuracy__SWIG_1")]
  public static extern global::System.IntPtr new_CPtpClockAccuracy__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPtpClockAccuracy")]
  public static extern void delete_CPtpClockAccuracy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpClockAccuracy_Set")]
  public static extern global::System.IntPtr CPtpClockAccuracy_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpClockAccuracy_Get")]
  public static extern int CPtpClockAccuracy_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpClockOffsetMode__SWIG_0")]
  public static extern global::System.IntPtr new_CPtpClockOffsetMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpClockOffsetMode__SWIG_1")]
  public static extern global::System.IntPtr new_CPtpClockOffsetMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPtpClockOffsetMode")]
  public static extern void delete_CPtpClockOffsetMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpClockOffsetMode_Set")]
  public static extern global::System.IntPtr CPtpClockOffsetMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpClockOffsetMode_Get")]
  public static extern int CPtpClockOffsetMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpDriftOffsetMode__SWIG_0")]
  public static extern global::System.IntPtr new_CPtpDriftOffsetMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpDriftOffsetMode__SWIG_1")]
  public static extern global::System.IntPtr new_CPtpDriftOffsetMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPtpDriftOffsetMode")]
  public static extern void delete_CPtpDriftOffsetMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpDriftOffsetMode_Set")]
  public static extern global::System.IntPtr CPtpDriftOffsetMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpDriftOffsetMode_Get")]
  public static extern int CPtpDriftOffsetMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpMode__SWIG_0")]
  public static extern global::System.IntPtr new_CPtpMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpMode__SWIG_1")]
  public static extern global::System.IntPtr new_CPtpMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPtpMode")]
  public static extern void delete_CPtpMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpMode_Set")]
  public static extern global::System.IntPtr CPtpMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpMode_Get")]
  public static extern int CPtpMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpServoStatus__SWIG_0")]
  public static extern global::System.IntPtr new_CPtpServoStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpServoStatus__SWIG_1")]
  public static extern global::System.IntPtr new_CPtpServoStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPtpServoStatus")]
  public static extern void delete_CPtpServoStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpServoStatus_Set")]
  public static extern global::System.IntPtr CPtpServoStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpServoStatus_Get")]
  public static extern int CPtpServoStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpStatus__SWIG_0")]
  public static extern global::System.IntPtr new_CPtpStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpStatus__SWIG_1")]
  public static extern global::System.IntPtr new_CPtpStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPtpStatus")]
  public static extern void delete_CPtpStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpStatus_Set")]
  public static extern global::System.IntPtr CPtpStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpStatus_Get")]
  public static extern int CPtpStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpSyncMessageIntervalStatus__SWIG_0")]
  public static extern global::System.IntPtr new_CPtpSyncMessageIntervalStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpSyncMessageIntervalStatus__SWIG_1")]
  public static extern global::System.IntPtr new_CPtpSyncMessageIntervalStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPtpSyncMessageIntervalStatus")]
  public static extern void delete_CPtpSyncMessageIntervalStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpSyncMessageIntervalStatus_Set")]
  public static extern global::System.IntPtr CPtpSyncMessageIntervalStatus_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpSyncMessageIntervalStatus_Get")]
  public static extern int CPtpSyncMessageIntervalStatus_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpTimestampOffsetMode__SWIG_0")]
  public static extern global::System.IntPtr new_CPtpTimestampOffsetMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CPtpTimestampOffsetMode__SWIG_1")]
  public static extern global::System.IntPtr new_CPtpTimestampOffsetMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CPtpTimestampOffsetMode")]
  public static extern void delete_CPtpTimestampOffsetMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpTimestampOffsetMode_Set")]
  public static extern global::System.IntPtr CPtpTimestampOffsetMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpTimestampOffsetMode_Get")]
  public static extern int CPtpTimestampOffsetMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CReadOutBuffering__SWIG_0")]
  public static extern global::System.IntPtr new_CReadOutBuffering__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CReadOutBuffering__SWIG_1")]
  public static extern global::System.IntPtr new_CReadOutBuffering__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CReadOutBuffering")]
  public static extern void delete_CReadOutBuffering(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CReadOutBuffering_Set")]
  public static extern global::System.IntPtr CReadOutBuffering_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CReadOutBuffering_Get")]
  public static extern int CReadOutBuffering_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CReadoutMode__SWIG_0")]
  public static extern global::System.IntPtr new_CReadoutMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CReadoutMode__SWIG_1")]
  public static extern global::System.IntPtr new_CReadoutMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CReadoutMode")]
  public static extern void delete_CReadoutMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CReadoutMode_Set")]
  public static extern global::System.IntPtr CReadoutMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CReadoutMode_Get")]
  public static extern int CReadoutMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionAcquisitionMode__SWIG_0")]
  public static extern global::System.IntPtr new_CRegionAcquisitionMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionAcquisitionMode__SWIG_1")]
  public static extern global::System.IntPtr new_CRegionAcquisitionMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CRegionAcquisitionMode")]
  public static extern void delete_CRegionAcquisitionMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionAcquisitionMode_Set")]
  public static extern global::System.IntPtr CRegionAcquisitionMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionAcquisitionMode_Get")]
  public static extern int CRegionAcquisitionMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionConfigurationMode__SWIG_0")]
  public static extern global::System.IntPtr new_CRegionConfigurationMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionConfigurationMode__SWIG_1")]
  public static extern global::System.IntPtr new_CRegionConfigurationMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CRegionConfigurationMode")]
  public static extern void delete_CRegionConfigurationMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionConfigurationMode_Set")]
  public static extern global::System.IntPtr CRegionConfigurationMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionConfigurationMode_Get")]
  public static extern int CRegionConfigurationMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionMode__SWIG_0")]
  public static extern global::System.IntPtr new_CRegionMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionMode__SWIG_1")]
  public static extern global::System.IntPtr new_CRegionMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CRegionMode")]
  public static extern void delete_CRegionMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionMode_Set")]
  public static extern global::System.IntPtr CRegionMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionMode_Get")]
  public static extern int CRegionMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CRegionSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CRegionSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CRegionSelector")]
  public static extern void delete_CRegionSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionSelector_Set")]
  public static extern global::System.IntPtr CRegionSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionSelector_Get")]
  public static extern int CRegionSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionTransferMode__SWIG_0")]
  public static extern global::System.IntPtr new_CRegionTransferMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CRegionTransferMode__SWIG_1")]
  public static extern global::System.IntPtr new_CRegionTransferMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CRegionTransferMode")]
  public static extern void delete_CRegionTransferMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionTransferMode_Set")]
  public static extern global::System.IntPtr CRegionTransferMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionTransferMode_Get")]
  public static extern int CRegionTransferMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSIControl__SWIG_0")]
  public static extern global::System.IntPtr new_CSIControl__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSIControl__SWIG_1")]
  public static extern global::System.IntPtr new_CSIControl__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSIControl")]
  public static extern void delete_CSIControl(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSIControl_Set")]
  public static extern global::System.IntPtr CSIControl_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSIControl_Get")]
  public static extern int CSIControl_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSensorADDigitization__SWIG_0")]
  public static extern global::System.IntPtr new_CSensorADDigitization__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSensorADDigitization__SWIG_1")]
  public static extern global::System.IntPtr new_CSensorADDigitization__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSensorADDigitization")]
  public static extern void delete_CSensorADDigitization(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorADDigitization_Set")]
  public static extern global::System.IntPtr CSensorADDigitization_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorADDigitization_Get")]
  public static extern int CSensorADDigitization_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSensorDigitizationTaps__SWIG_0")]
  public static extern global::System.IntPtr new_CSensorDigitizationTaps__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSensorDigitizationTaps__SWIG_1")]
  public static extern global::System.IntPtr new_CSensorDigitizationTaps__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSensorDigitizationTaps")]
  public static extern void delete_CSensorDigitizationTaps(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorDigitizationTaps_Set")]
  public static extern global::System.IntPtr CSensorDigitizationTaps_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorDigitizationTaps_Get")]
  public static extern int CSensorDigitizationTaps_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSensorShutterMode__SWIG_0")]
  public static extern global::System.IntPtr new_CSensorShutterMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSensorShutterMode__SWIG_1")]
  public static extern global::System.IntPtr new_CSensorShutterMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSensorShutterMode")]
  public static extern void delete_CSensorShutterMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorShutterMode_Set")]
  public static extern global::System.IntPtr CSensorShutterMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorShutterMode_Get")]
  public static extern int CSensorShutterMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSensorTaps__SWIG_0")]
  public static extern global::System.IntPtr new_CSensorTaps__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSensorTaps__SWIG_1")]
  public static extern global::System.IntPtr new_CSensorTaps__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSensorTaps")]
  public static extern void delete_CSensorTaps(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorTaps_Set")]
  public static extern global::System.IntPtr CSensorTaps_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorTaps_Get")]
  public static extern int CSensorTaps_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerConfigurationMode__SWIG_0")]
  public static extern global::System.IntPtr new_CSequencerConfigurationMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerConfigurationMode__SWIG_1")]
  public static extern global::System.IntPtr new_CSequencerConfigurationMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSequencerConfigurationMode")]
  public static extern void delete_CSequencerConfigurationMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerConfigurationMode_Set")]
  public static extern global::System.IntPtr CSequencerConfigurationMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerConfigurationMode_Get")]
  public static extern int CSequencerConfigurationMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerFeatureSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CSequencerFeatureSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerFeatureSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CSequencerFeatureSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSequencerFeatureSelector")]
  public static extern void delete_CSequencerFeatureSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerFeatureSelector_Set")]
  public static extern global::System.IntPtr CSequencerFeatureSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerFeatureSelector_Get")]
  public static extern int CSequencerFeatureSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerMode__SWIG_0")]
  public static extern global::System.IntPtr new_CSequencerMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerMode__SWIG_1")]
  public static extern global::System.IntPtr new_CSequencerMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSequencerMode")]
  public static extern void delete_CSequencerMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerMode_Set")]
  public static extern global::System.IntPtr CSequencerMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerMode_Get")]
  public static extern int CSequencerMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerTriggerActivation__SWIG_0")]
  public static extern global::System.IntPtr new_CSequencerTriggerActivation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerTriggerActivation__SWIG_1")]
  public static extern global::System.IntPtr new_CSequencerTriggerActivation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSequencerTriggerActivation")]
  public static extern void delete_CSequencerTriggerActivation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerTriggerActivation_Set")]
  public static extern global::System.IntPtr CSequencerTriggerActivation_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerTriggerActivation_Get")]
  public static extern int CSequencerTriggerActivation_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerTriggerSource__SWIG_0")]
  public static extern global::System.IntPtr new_CSequencerTriggerSource__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSequencerTriggerSource__SWIG_1")]
  public static extern global::System.IntPtr new_CSequencerTriggerSource__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSequencerTriggerSource")]
  public static extern void delete_CSequencerTriggerSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerTriggerSource_Set")]
  public static extern global::System.IntPtr CSequencerTriggerSource_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerTriggerSource_Get")]
  public static extern int CSequencerTriggerSource_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CShadingSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CShadingSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CShadingSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CShadingSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CShadingSelector")]
  public static extern void delete_CShadingSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CShadingSelector_Set")]
  public static extern global::System.IntPtr CShadingSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CShadingSelector_Get")]
  public static extern int CShadingSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSharpeningMode__SWIG_0")]
  public static extern global::System.IntPtr new_CSharpeningMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSharpeningMode__SWIG_1")]
  public static extern global::System.IntPtr new_CSharpeningMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSharpeningMode")]
  public static extern void delete_CSharpeningMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSharpeningMode_Set")]
  public static extern global::System.IntPtr CSharpeningMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSharpeningMode_Get")]
  public static extern int CSharpeningMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSourceID__SWIG_0")]
  public static extern global::System.IntPtr new_CSourceID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSourceID__SWIG_1")]
  public static extern global::System.IntPtr new_CSourceID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSourceID")]
  public static extern void delete_CSourceID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSourceID_Set")]
  public static extern global::System.IntPtr CSourceID_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSourceID_Get")]
  public static extern int CSourceID_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSourceSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CSourceSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSourceSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CSourceSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSourceSelector")]
  public static extern void delete_CSourceSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSourceSelector_Set")]
  public static extern global::System.IntPtr CSourceSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSourceSelector_Get")]
  public static extern int CSourceSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSwitchPortSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CSwitchPortSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CSwitchPortSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CSwitchPortSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CSwitchPortSelector")]
  public static extern void delete_CSwitchPortSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSwitchPortSelector_Set")]
  public static extern global::System.IntPtr CSwitchPortSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSwitchPortSelector_Get")]
  public static extern int CSwitchPortSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTestPattern__SWIG_0")]
  public static extern global::System.IntPtr new_CTestPattern__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTestPattern__SWIG_1")]
  public static extern global::System.IntPtr new_CTestPattern__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTestPattern")]
  public static extern void delete_CTestPattern(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTestPattern_Set")]
  public static extern global::System.IntPtr CTestPattern_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTestPattern_Get")]
  public static extern int CTestPattern_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTestPatternGeneratorSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CTestPatternGeneratorSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTestPatternGeneratorSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CTestPatternGeneratorSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTestPatternGeneratorSelector")]
  public static extern void delete_CTestPatternGeneratorSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTestPatternGeneratorSelector_Set")]
  public static extern global::System.IntPtr CTestPatternGeneratorSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTestPatternGeneratorSelector_Get")]
  public static extern int CTestPatternGeneratorSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTimerSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CTimerSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTimerSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CTimerSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTimerSelector")]
  public static extern void delete_CTimerSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTimerSelector_Set")]
  public static extern global::System.IntPtr CTimerSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTimerSelector_Get")]
  public static extern int CTimerSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTimerTriggerActivation__SWIG_0")]
  public static extern global::System.IntPtr new_CTimerTriggerActivation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTimerTriggerActivation__SWIG_1")]
  public static extern global::System.IntPtr new_CTimerTriggerActivation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTimerTriggerActivation")]
  public static extern void delete_CTimerTriggerActivation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTimerTriggerActivation_Set")]
  public static extern global::System.IntPtr CTimerTriggerActivation_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTimerTriggerActivation_Get")]
  public static extern int CTimerTriggerActivation_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTimerTriggerSource__SWIG_0")]
  public static extern global::System.IntPtr new_CTimerTriggerSource__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTimerTriggerSource__SWIG_1")]
  public static extern global::System.IntPtr new_CTimerTriggerSource__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTimerTriggerSource")]
  public static extern void delete_CTimerTriggerSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTimerTriggerSource_Set")]
  public static extern global::System.IntPtr CTimerTriggerSource_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTimerTriggerSource_Get")]
  public static extern int CTimerTriggerSource_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTransferControlMode__SWIG_0")]
  public static extern global::System.IntPtr new_CTransferControlMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTransferControlMode__SWIG_1")]
  public static extern global::System.IntPtr new_CTransferControlMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTransferControlMode")]
  public static extern void delete_CTransferControlMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferControlMode_Set")]
  public static extern global::System.IntPtr CTransferControlMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferControlMode_Get")]
  public static extern int CTransferControlMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTransferOperationMode__SWIG_0")]
  public static extern global::System.IntPtr new_CTransferOperationMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTransferOperationMode__SWIG_1")]
  public static extern global::System.IntPtr new_CTransferOperationMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTransferOperationMode")]
  public static extern void delete_CTransferOperationMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferOperationMode_Set")]
  public static extern global::System.IntPtr CTransferOperationMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferOperationMode_Get")]
  public static extern int CTransferOperationMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTransferSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CTransferSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTransferSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CTransferSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTransferSelector")]
  public static extern void delete_CTransferSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferSelector_Set")]
  public static extern global::System.IntPtr CTransferSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferSelector_Get")]
  public static extern int CTransferSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTransferStatusSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CTransferStatusSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTransferStatusSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CTransferStatusSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTransferStatusSelector")]
  public static extern void delete_CTransferStatusSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferStatusSelector_Set")]
  public static extern global::System.IntPtr CTransferStatusSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferStatusSelector_Get")]
  public static extern int CTransferStatusSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerActivation__SWIG_0")]
  public static extern global::System.IntPtr new_CTriggerActivation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerActivation__SWIG_1")]
  public static extern global::System.IntPtr new_CTriggerActivation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTriggerActivation")]
  public static extern void delete_CTriggerActivation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerActivation_Set")]
  public static extern global::System.IntPtr CTriggerActivation_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerActivation_Get")]
  public static extern int CTriggerActivation_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerMode__SWIG_0")]
  public static extern global::System.IntPtr new_CTriggerMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerMode__SWIG_1")]
  public static extern global::System.IntPtr new_CTriggerMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTriggerMode")]
  public static extern void delete_CTriggerMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerMode_Set")]
  public static extern global::System.IntPtr CTriggerMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerMode_Get")]
  public static extern int CTriggerMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerOverlap__SWIG_0")]
  public static extern global::System.IntPtr new_CTriggerOverlap__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerOverlap__SWIG_1")]
  public static extern global::System.IntPtr new_CTriggerOverlap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTriggerOverlap")]
  public static extern void delete_CTriggerOverlap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerOverlap_Set")]
  public static extern global::System.IntPtr CTriggerOverlap_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerOverlap_Get")]
  public static extern int CTriggerOverlap_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CTriggerSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CTriggerSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTriggerSelector")]
  public static extern void delete_CTriggerSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerSelector_Set")]
  public static extern global::System.IntPtr CTriggerSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerSelector_Get")]
  public static extern int CTriggerSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerSource__SWIG_0")]
  public static extern global::System.IntPtr new_CTriggerSource__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CTriggerSource__SWIG_1")]
  public static extern global::System.IntPtr new_CTriggerSource__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CTriggerSource")]
  public static extern void delete_CTriggerSource(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerSource_Set")]
  public static extern global::System.IntPtr CTriggerSource_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerSource_Get")]
  public static extern int CTriggerSource_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CUserOutputSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CUserOutputSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CUserOutputSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CUserOutputSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CUserOutputSelector")]
  public static extern void delete_CUserOutputSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserOutputSelector_Set")]
  public static extern global::System.IntPtr CUserOutputSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserOutputSelector_Get")]
  public static extern int CUserOutputSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CUserSetDefault__SWIG_0")]
  public static extern global::System.IntPtr new_CUserSetDefault__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CUserSetDefault__SWIG_1")]
  public static extern global::System.IntPtr new_CUserSetDefault__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CUserSetDefault")]
  public static extern void delete_CUserSetDefault(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserSetDefault_Set")]
  public static extern global::System.IntPtr CUserSetDefault_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserSetDefault_Get")]
  public static extern int CUserSetDefault_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CUserSetFeatureSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CUserSetFeatureSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CUserSetFeatureSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CUserSetFeatureSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CUserSetFeatureSelector")]
  public static extern void delete_CUserSetFeatureSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserSetFeatureSelector_Set")]
  public static extern global::System.IntPtr CUserSetFeatureSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserSetFeatureSelector_Get")]
  public static extern int CUserSetFeatureSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CUserSetSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CUserSetSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CUserSetSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CUserSetSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CUserSetSelector")]
  public static extern void delete_CUserSetSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserSetSelector_Set")]
  public static extern global::System.IntPtr CUserSetSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserSetSelector_Get")]
  public static extern int CUserSetSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationDataConfigurationMode__SWIG_0")]
  public static extern global::System.IntPtr new_CboCalibrationDataConfigurationMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationDataConfigurationMode__SWIG_1")]
  public static extern global::System.IntPtr new_CboCalibrationDataConfigurationMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboCalibrationDataConfigurationMode")]
  public static extern void delete_CboCalibrationDataConfigurationMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationDataConfigurationMode_Set")]
  public static extern global::System.IntPtr CboCalibrationDataConfigurationMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationDataConfigurationMode_Get")]
  public static extern int CboCalibrationDataConfigurationMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationMatrixSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CboCalibrationMatrixSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationMatrixSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CboCalibrationMatrixSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboCalibrationMatrixSelector")]
  public static extern void delete_CboCalibrationMatrixSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationMatrixSelector_Set")]
  public static extern global::System.IntPtr CboCalibrationMatrixSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationMatrixSelector_Get")]
  public static extern int CboCalibrationMatrixSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationMatrixValueSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CboCalibrationMatrixValueSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationMatrixValueSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CboCalibrationMatrixValueSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboCalibrationMatrixValueSelector")]
  public static extern void delete_CboCalibrationMatrixValueSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationMatrixValueSelector_Set")]
  public static extern global::System.IntPtr CboCalibrationMatrixValueSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationMatrixValueSelector_Get")]
  public static extern int CboCalibrationMatrixValueSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationVectorSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CboCalibrationVectorSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationVectorSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CboCalibrationVectorSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboCalibrationVectorSelector")]
  public static extern void delete_CboCalibrationVectorSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationVectorSelector_Set")]
  public static extern global::System.IntPtr CboCalibrationVectorSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationVectorSelector_Get")]
  public static extern int CboCalibrationVectorSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationVectorValueSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CboCalibrationVectorValueSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboCalibrationVectorValueSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CboCalibrationVectorValueSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboCalibrationVectorValueSelector")]
  public static extern void delete_CboCalibrationVectorValueSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationVectorValueSelector_Set")]
  public static extern global::System.IntPtr CboCalibrationVectorValueSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationVectorValueSelector_Get")]
  public static extern int CboCalibrationVectorValueSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboGeometryDistortionValueSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CboGeometryDistortionValueSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboGeometryDistortionValueSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CboGeometryDistortionValueSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboGeometryDistortionValueSelector")]
  public static extern void delete_CboGeometryDistortionValueSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboGeometryDistortionValueSelector_Set")]
  public static extern global::System.IntPtr CboGeometryDistortionValueSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboGeometryDistortionValueSelector_Get")]
  public static extern int CboGeometryDistortionValueSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialConfigBaudRate__SWIG_0")]
  public static extern global::System.IntPtr new_CboSerialConfigBaudRate__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialConfigBaudRate__SWIG_1")]
  public static extern global::System.IntPtr new_CboSerialConfigBaudRate__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboSerialConfigBaudRate")]
  public static extern void delete_CboSerialConfigBaudRate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigBaudRate_Set")]
  public static extern global::System.IntPtr CboSerialConfigBaudRate_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigBaudRate_Get")]
  public static extern int CboSerialConfigBaudRate_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialConfigDataBits__SWIG_0")]
  public static extern global::System.IntPtr new_CboSerialConfigDataBits__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialConfigDataBits__SWIG_1")]
  public static extern global::System.IntPtr new_CboSerialConfigDataBits__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboSerialConfigDataBits")]
  public static extern void delete_CboSerialConfigDataBits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigDataBits_Set")]
  public static extern global::System.IntPtr CboSerialConfigDataBits_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigDataBits_Get")]
  public static extern int CboSerialConfigDataBits_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialConfigParity__SWIG_0")]
  public static extern global::System.IntPtr new_CboSerialConfigParity__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialConfigParity__SWIG_1")]
  public static extern global::System.IntPtr new_CboSerialConfigParity__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboSerialConfigParity")]
  public static extern void delete_CboSerialConfigParity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigParity_Set")]
  public static extern global::System.IntPtr CboSerialConfigParity_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigParity_Get")]
  public static extern int CboSerialConfigParity_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialConfigStopBits__SWIG_0")]
  public static extern global::System.IntPtr new_CboSerialConfigStopBits__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialConfigStopBits__SWIG_1")]
  public static extern global::System.IntPtr new_CboSerialConfigStopBits__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboSerialConfigStopBits")]
  public static extern void delete_CboSerialConfigStopBits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigStopBits_Set")]
  public static extern global::System.IntPtr CboSerialConfigStopBits_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigStopBits_Get")]
  public static extern int CboSerialConfigStopBits_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialMode__SWIG_0")]
  public static extern global::System.IntPtr new_CboSerialMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialMode__SWIG_1")]
  public static extern global::System.IntPtr new_CboSerialMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboSerialMode")]
  public static extern void delete_CboSerialMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialMode_Set")]
  public static extern global::System.IntPtr CboSerialMode_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialMode_Get")]
  public static extern int CboSerialMode_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialSelector__SWIG_0")]
  public static extern global::System.IntPtr new_CboSerialSelector__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CboSerialSelector__SWIG_1")]
  public static extern global::System.IntPtr new_CboSerialSelector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CboSerialSelector")]
  public static extern void delete_CboSerialSelector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialSelector_Set")]
  public static extern global::System.IntPtr CboSerialSelector_Set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialSelector_Get")]
  public static extern int CboSerialSelector_Get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_FeatureAccess__SWIG_0")]
  public static extern global::System.IntPtr new_FeatureAccess__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_FeatureAccess__SWIG_1")]
  public static extern global::System.IntPtr new_FeatureAccess__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_FeatureAccess")]
  public static extern void delete_FeatureAccess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionAbort_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionAbort_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionFrameCount_set")]
  public static extern void FeatureAccess_AcquisitionFrameCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionFrameCount_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionFrameCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionFrameRate_set")]
  public static extern void FeatureAccess_AcquisitionFrameRate_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionFrameRate_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionFrameRate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionFrameRateEnable_set")]
  public static extern void FeatureAccess_AcquisitionFrameRateEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionFrameRateEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionFrameRateEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionFrameRateLimit_set")]
  public static extern void FeatureAccess_AcquisitionFrameRateLimit_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionFrameRateLimit_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionFrameRateLimit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionMode_set")]
  public static extern void FeatureAccess_AcquisitionMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionMode_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionStart_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionStartAuto_set")]
  public static extern void FeatureAccess_AcquisitionStartAuto_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionStartAuto_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionStartAuto_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionStatus_set")]
  public static extern void FeatureAccess_AcquisitionStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionStatusSelector_set")]
  public static extern void FeatureAccess_AcquisitionStatusSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionStatusSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionStatusSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AcquisitionStop_get")]
  public static extern global::System.IntPtr FeatureAccess_AcquisitionStop_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ActionDeviceKey_set")]
  public static extern void FeatureAccess_ActionDeviceKey_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ActionDeviceKey_get")]
  public static extern global::System.IntPtr FeatureAccess_ActionDeviceKey_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ActionGroupKey_set")]
  public static extern void FeatureAccess_ActionGroupKey_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ActionGroupKey_get")]
  public static extern global::System.IntPtr FeatureAccess_ActionGroupKey_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ActionGroupMask_set")]
  public static extern void FeatureAccess_ActionGroupMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ActionGroupMask_get")]
  public static extern global::System.IntPtr FeatureAccess_ActionGroupMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ActionSelector_set")]
  public static extern void FeatureAccess_ActionSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ActionSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_ActionSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Aperture_set")]
  public static extern void FeatureAccess_Aperture_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Aperture_get")]
  public static extern global::System.IntPtr FeatureAccess_Aperture_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ApertureInitialize_get")]
  public static extern global::System.IntPtr FeatureAccess_ApertureInitialize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ApertureStatus_set")]
  public static extern void FeatureAccess_ApertureStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ApertureStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_ApertureStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ApertureStepper_set")]
  public static extern void FeatureAccess_ApertureStepper_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ApertureStepper_get")]
  public static extern global::System.IntPtr FeatureAccess_ApertureStepper_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureCycleTime_set")]
  public static extern void FeatureAccess_AutoFeatureCycleTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureCycleTime_get")]
  public static extern global::System.IntPtr FeatureAccess_AutoFeatureCycleTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureHeight_set")]
  public static extern void FeatureAccess_AutoFeatureHeight_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureHeight_get")]
  public static extern global::System.IntPtr FeatureAccess_AutoFeatureHeight_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureOffsetX_set")]
  public static extern void FeatureAccess_AutoFeatureOffsetX_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureOffsetX_get")]
  public static extern global::System.IntPtr FeatureAccess_AutoFeatureOffsetX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureOffsetY_set")]
  public static extern void FeatureAccess_AutoFeatureOffsetY_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureOffsetY_get")]
  public static extern global::System.IntPtr FeatureAccess_AutoFeatureOffsetY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureRegionMode_set")]
  public static extern void FeatureAccess_AutoFeatureRegionMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureRegionMode_get")]
  public static extern global::System.IntPtr FeatureAccess_AutoFeatureRegionMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureRegionReference_set")]
  public static extern void FeatureAccess_AutoFeatureRegionReference_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureRegionReference_get")]
  public static extern global::System.IntPtr FeatureAccess_AutoFeatureRegionReference_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureRegionSelector_set")]
  public static extern void FeatureAccess_AutoFeatureRegionSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureRegionSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_AutoFeatureRegionSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureWidth_set")]
  public static extern void FeatureAccess_AutoFeatureWidth_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AutoFeatureWidth_get")]
  public static extern global::System.IntPtr FeatureAccess_AutoFeatureWidth_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AveragingEnable_set")]
  public static extern void FeatureAccess_AveragingEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AveragingEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_AveragingEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AveragingImageCount_set")]
  public static extern void FeatureAccess_AveragingImageCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AveragingImageCount_get")]
  public static extern global::System.IntPtr FeatureAccess_AveragingImageCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AveragingNormalization_set")]
  public static extern void FeatureAccess_AveragingNormalization_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_AveragingNormalization_get")]
  public static extern global::System.IntPtr FeatureAccess_AveragingNormalization_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BOPFShift_set")]
  public static extern void FeatureAccess_BOPFShift_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BOPFShift_get")]
  public static extern global::System.IntPtr FeatureAccess_BOPFShift_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BalanceWhiteAuto_set")]
  public static extern void FeatureAccess_BalanceWhiteAuto_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BalanceWhiteAuto_get")]
  public static extern global::System.IntPtr FeatureAccess_BalanceWhiteAuto_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BalanceWhiteAutoStatus_set")]
  public static extern void FeatureAccess_BalanceWhiteAutoStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BalanceWhiteAutoStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_BalanceWhiteAutoStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Baudrate_set")]
  public static extern void FeatureAccess_Baudrate_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Baudrate_get")]
  public static extern global::System.IntPtr FeatureAccess_Baudrate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningHorizontal_set")]
  public static extern void FeatureAccess_BinningHorizontal_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningHorizontal_get")]
  public static extern global::System.IntPtr FeatureAccess_BinningHorizontal_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningHorizontalMode_set")]
  public static extern void FeatureAccess_BinningHorizontalMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningHorizontalMode_get")]
  public static extern global::System.IntPtr FeatureAccess_BinningHorizontalMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningRegion0_set")]
  public static extern void FeatureAccess_BinningRegion0_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningRegion0_get")]
  public static extern global::System.IntPtr FeatureAccess_BinningRegion0_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningSelector_set")]
  public static extern void FeatureAccess_BinningSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_BinningSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningSensor_set")]
  public static extern void FeatureAccess_BinningSensor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningSensor_get")]
  public static extern global::System.IntPtr FeatureAccess_BinningSensor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningVertical_set")]
  public static extern void FeatureAccess_BinningVertical_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningVertical_get")]
  public static extern global::System.IntPtr FeatureAccess_BinningVertical_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningVerticalMode_set")]
  public static extern void FeatureAccess_BinningVerticalMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BinningVerticalMode_get")]
  public static extern global::System.IntPtr FeatureAccess_BinningVerticalMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BitShift_set")]
  public static extern void FeatureAccess_BitShift_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BitShift_get")]
  public static extern global::System.IntPtr FeatureAccess_BitShift_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevel_set")]
  public static extern void FeatureAccess_BlackLevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevel_get")]
  public static extern global::System.IntPtr FeatureAccess_BlackLevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevelCorrectionEnable_set")]
  public static extern void FeatureAccess_BlackLevelCorrectionEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevelCorrectionEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_BlackLevelCorrectionEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevelCorrectionThreshold_set")]
  public static extern void FeatureAccess_BlackLevelCorrectionThreshold_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevelCorrectionThreshold_get")]
  public static extern global::System.IntPtr FeatureAccess_BlackLevelCorrectionThreshold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevelRaw_set")]
  public static extern void FeatureAccess_BlackLevelRaw_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevelRaw_get")]
  public static extern global::System.IntPtr FeatureAccess_BlackLevelRaw_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevelSelector_set")]
  public static extern void FeatureAccess_BlackLevelSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackLevelSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_BlackLevelSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackReferenceCorrectionEnable_set")]
  public static extern void FeatureAccess_BlackReferenceCorrectionEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackReferenceCorrectionEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_BlackReferenceCorrectionEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackSunSuppression_set")]
  public static extern void FeatureAccess_BlackSunSuppression_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BlackSunSuppression_get")]
  public static extern global::System.IntPtr FeatureAccess_BlackSunSuppression_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerAbort_set")]
  public static extern void FeatureAccess_BoSequencerAbort_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerAbort_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerAbort_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerBinningHorizontal_set")]
  public static extern void FeatureAccess_BoSequencerBinningHorizontal_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerBinningHorizontal_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerBinningHorizontal_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerBinningVertical_set")]
  public static extern void FeatureAccess_BoSequencerBinningVertical_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerBinningVertical_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerBinningVertical_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerEnable_set")]
  public static extern void FeatureAccess_BoSequencerEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerExposure_set")]
  public static extern void FeatureAccess_BoSequencerExposure_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerExposure_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerExposure_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerFramesPerTrigger_set")]
  public static extern void FeatureAccess_BoSequencerFramesPerTrigger_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerFramesPerTrigger_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerFramesPerTrigger_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerGain_set")]
  public static extern void FeatureAccess_BoSequencerGain_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerGain_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerGain_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerHeight_set")]
  public static extern void FeatureAccess_BoSequencerHeight_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerHeight_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerHeight_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerIOSelector_set")]
  public static extern void FeatureAccess_BoSequencerIOSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerIOSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerIOSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerIOStatus_set")]
  public static extern void FeatureAccess_BoSequencerIOStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerIOStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerIOStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerIsRunning_set")]
  public static extern void FeatureAccess_BoSequencerIsRunning_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerIsRunning_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerIsRunning_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerLoops_set")]
  public static extern void FeatureAccess_BoSequencerLoops_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerLoops_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerLoops_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerMode_set")]
  public static extern void FeatureAccess_BoSequencerMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerMode_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerNumberOfSets_set")]
  public static extern void FeatureAccess_BoSequencerNumberOfSets_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerNumberOfSets_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerNumberOfSets_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerOffsetX_set")]
  public static extern void FeatureAccess_BoSequencerOffsetX_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerOffsetX_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerOffsetX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerOffsetY_set")]
  public static extern void FeatureAccess_BoSequencerOffsetY_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerOffsetY_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerOffsetY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSensorDigitizationTaps_set")]
  public static extern void FeatureAccess_BoSequencerSensorDigitizationTaps_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSensorDigitizationTaps_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerSensorDigitizationTaps_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetActive_set")]
  public static extern void FeatureAccess_BoSequencerSetActive_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetActive_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerSetActive_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetNumberOfSets_set")]
  public static extern void FeatureAccess_BoSequencerSetNumberOfSets_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetNumberOfSets_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerSetNumberOfSets_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetReadOutTime_set")]
  public static extern void FeatureAccess_BoSequencerSetReadOutTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetReadOutTime_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerSetReadOutTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetRepeats_set")]
  public static extern void FeatureAccess_BoSequencerSetRepeats_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetRepeats_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerSetRepeats_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetSelector_set")]
  public static extern void FeatureAccess_BoSequencerSetSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerSetSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerSetSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerStart_set")]
  public static extern void FeatureAccess_BoSequencerStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerStart_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerWidth_set")]
  public static extern void FeatureAccess_BoSequencerWidth_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BoSequencerWidth_get")]
  public static extern global::System.IntPtr FeatureAccess_BoSequencerWidth_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BrightnessAutoNominalValue_set")]
  public static extern void FeatureAccess_BrightnessAutoNominalValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BrightnessAutoNominalValue_get")]
  public static extern global::System.IntPtr FeatureAccess_BrightnessAutoNominalValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BrightnessAutoPriority_set")]
  public static extern void FeatureAccess_BrightnessAutoPriority_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BrightnessAutoPriority_get")]
  public static extern global::System.IntPtr FeatureAccess_BrightnessAutoPriority_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BrightnessCorrection_set")]
  public static extern void FeatureAccess_BrightnessCorrection_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BrightnessCorrection_get")]
  public static extern global::System.IntPtr FeatureAccess_BrightnessCorrection_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BrightnessCorrectionFactor_set")]
  public static extern void FeatureAccess_BrightnessCorrectionFactor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_BrightnessCorrectionFactor_get")]
  public static extern global::System.IntPtr FeatureAccess_BrightnessCorrectionFactor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CLFVALLowTime_set")]
  public static extern void FeatureAccess_CLFVALLowTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CLFVALLowTime_get")]
  public static extern global::System.IntPtr FeatureAccess_CLFVALLowTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CLLVALLowTime_set")]
  public static extern void FeatureAccess_CLLVALLowTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CLLVALLowTime_get")]
  public static extern global::System.IntPtr FeatureAccess_CLLVALLowTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CLMCRC_set")]
  public static extern void FeatureAccess_CLMCRC_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CLMCRC_get")]
  public static extern global::System.IntPtr FeatureAccess_CLMCRC_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CLMCTT_set")]
  public static extern void FeatureAccess_CLMCTT_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CLMCTT_get")]
  public static extern global::System.IntPtr FeatureAccess_CLMCTT_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CalibrationAngleOfPolarizationOffset_set")]
  public static extern void FeatureAccess_CalibrationAngleOfPolarizationOffset_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CalibrationAngleOfPolarizationOffset_get")]
  public static extern global::System.IntPtr FeatureAccess_CalibrationAngleOfPolarizationOffset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CalibrationEnable_set")]
  public static extern void FeatureAccess_CalibrationEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CalibrationEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_CalibrationEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CalibrationMatrixValue_set")]
  public static extern void FeatureAccess_CalibrationMatrixValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CalibrationMatrixValue_get")]
  public static extern global::System.IntPtr FeatureAccess_CalibrationMatrixValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CalibrationMatrixValueSelector_set")]
  public static extern void FeatureAccess_CalibrationMatrixValueSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CalibrationMatrixValueSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_CalibrationMatrixValueSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkActionRequestID_set")]
  public static extern void FeatureAccess_ChunkActionRequestID_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkActionRequestID_get")]
  public static extern global::System.IntPtr FeatureAccess_ChunkActionRequestID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkActionSourceIP_set")]
  public static extern void FeatureAccess_ChunkActionSourceIP_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkActionSourceIP_get")]
  public static extern global::System.IntPtr FeatureAccess_ChunkActionSourceIP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkBinningRegion0_set")]
  public static extern void FeatureAccess_ChunkBinningRegion0_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkBinningRegion0_get")]
  public static extern global::System.IntPtr FeatureAccess_ChunkBinningRegion0_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkBinningSensor_set")]
  public static extern void FeatureAccess_ChunkBinningSensor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkBinningSensor_get")]
  public static extern global::System.IntPtr FeatureAccess_ChunkBinningSensor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkEnable_set")]
  public static extern void FeatureAccess_ChunkEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_ChunkEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkModeActive_set")]
  public static extern void FeatureAccess_ChunkModeActive_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkModeActive_get")]
  public static extern global::System.IntPtr FeatureAccess_ChunkModeActive_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkSelector_set")]
  public static extern void FeatureAccess_ChunkSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_ChunkSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkTriggerCounter_set")]
  public static extern void FeatureAccess_ChunkTriggerCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ChunkTriggerCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_ChunkTriggerCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ClConfiguration_set")]
  public static extern void FeatureAccess_ClConfiguration_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ClConfiguration_get")]
  public static extern global::System.IntPtr FeatureAccess_ClConfiguration_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ClTimeSlotsCount_set")]
  public static extern void FeatureAccess_ClTimeSlotsCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ClTimeSlotsCount_get")]
  public static extern global::System.IntPtr FeatureAccess_ClTimeSlotsCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationAuto_set")]
  public static extern void FeatureAccess_ColorTransformationAuto_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationAuto_get")]
  public static extern global::System.IntPtr FeatureAccess_ColorTransformationAuto_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationEnable_set")]
  public static extern void FeatureAccess_ColorTransformationEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_ColorTransformationEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationFactoryListSelector_set")]
  public static extern void FeatureAccess_ColorTransformationFactoryListSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationFactoryListSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_ColorTransformationFactoryListSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationOutputColorSpace_set")]
  public static extern void FeatureAccess_ColorTransformationOutputColorSpace_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationOutputColorSpace_get")]
  public static extern global::System.IntPtr FeatureAccess_ColorTransformationOutputColorSpace_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationResetToFactoryList_get")]
  public static extern global::System.IntPtr FeatureAccess_ColorTransformationResetToFactoryList_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationSelector_set")]
  public static extern void FeatureAccess_ColorTransformationSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_ColorTransformationSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationValue_set")]
  public static extern void FeatureAccess_ColorTransformationValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationValue_get")]
  public static extern global::System.IntPtr FeatureAccess_ColorTransformationValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationValueSelector_set")]
  public static extern void FeatureAccess_ColorTransformationValueSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ColorTransformationValueSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_ColorTransformationValueSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ComponentEnable_set")]
  public static extern void FeatureAccess_ComponentEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ComponentEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_ComponentEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ComponentSelector_set")]
  public static extern void FeatureAccess_ComponentSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ComponentSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_ComponentSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ConcatenationEnable_set")]
  public static extern void FeatureAccess_ConcatenationEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ConcatenationEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_ConcatenationEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterDuration_set")]
  public static extern void FeatureAccess_CounterDuration_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterDuration_get")]
  public static extern global::System.IntPtr FeatureAccess_CounterDuration_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterEventActivation_set")]
  public static extern void FeatureAccess_CounterEventActivation_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterEventActivation_get")]
  public static extern global::System.IntPtr FeatureAccess_CounterEventActivation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterEventSource_set")]
  public static extern void FeatureAccess_CounterEventSource_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterEventSource_get")]
  public static extern global::System.IntPtr FeatureAccess_CounterEventSource_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterReset_get")]
  public static extern global::System.IntPtr FeatureAccess_CounterReset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterResetActivation_set")]
  public static extern void FeatureAccess_CounterResetActivation_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterResetActivation_get")]
  public static extern global::System.IntPtr FeatureAccess_CounterResetActivation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterResetSource_set")]
  public static extern void FeatureAccess_CounterResetSource_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterResetSource_get")]
  public static extern global::System.IntPtr FeatureAccess_CounterResetSource_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterSelector_set")]
  public static extern void FeatureAccess_CounterSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_CounterSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterValue_set")]
  public static extern void FeatureAccess_CounterValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterValue_get")]
  public static extern global::System.IntPtr FeatureAccess_CounterValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterValueAtReset_set")]
  public static extern void FeatureAccess_CounterValueAtReset_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CounterValueAtReset_get")]
  public static extern global::System.IntPtr FeatureAccess_CounterValueAtReset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CustomData_set")]
  public static extern void FeatureAccess_CustomData_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CustomData_get")]
  public static extern global::System.IntPtr FeatureAccess_CustomData_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CustomDataConfigurationMode_set")]
  public static extern void FeatureAccess_CustomDataConfigurationMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CustomDataConfigurationMode_get")]
  public static extern global::System.IntPtr FeatureAccess_CustomDataConfigurationMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CustomDataSelector_set")]
  public static extern void FeatureAccess_CustomDataSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_CustomDataSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_CustomDataSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DecimationHorizontal_set")]
  public static extern void FeatureAccess_DecimationHorizontal_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DecimationHorizontal_get")]
  public static extern global::System.IntPtr FeatureAccess_DecimationHorizontal_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DecimationHorizontalMode_set")]
  public static extern void FeatureAccess_DecimationHorizontalMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DecimationHorizontalMode_get")]
  public static extern global::System.IntPtr FeatureAccess_DecimationHorizontalMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DecimationVertical_set")]
  public static extern void FeatureAccess_DecimationVertical_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DecimationVertical_get")]
  public static extern global::System.IntPtr FeatureAccess_DecimationVertical_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DecimationVerticalMode_set")]
  public static extern void FeatureAccess_DecimationVerticalMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DecimationVerticalMode_get")]
  public static extern global::System.IntPtr FeatureAccess_DecimationVerticalMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelCorrection_set")]
  public static extern void FeatureAccess_DefectPixelCorrection_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelCorrection_get")]
  public static extern global::System.IntPtr FeatureAccess_DefectPixelCorrection_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListEntryActive_set")]
  public static extern void FeatureAccess_DefectPixelListEntryActive_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListEntryActive_get")]
  public static extern global::System.IntPtr FeatureAccess_DefectPixelListEntryActive_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListEntryPosX_set")]
  public static extern void FeatureAccess_DefectPixelListEntryPosX_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListEntryPosX_get")]
  public static extern global::System.IntPtr FeatureAccess_DefectPixelListEntryPosX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListEntryPosY_set")]
  public static extern void FeatureAccess_DefectPixelListEntryPosY_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListEntryPosY_get")]
  public static extern global::System.IntPtr FeatureAccess_DefectPixelListEntryPosY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListIndex_set")]
  public static extern void FeatureAccess_DefectPixelListIndex_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListIndex_get")]
  public static extern global::System.IntPtr FeatureAccess_DefectPixelListIndex_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListSelector_set")]
  public static extern void FeatureAccess_DefectPixelListSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DefectPixelListSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_DefectPixelListSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceCharacterSet_set")]
  public static extern void FeatureAccess_DeviceCharacterSet_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceCharacterSet_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceCharacterSet_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceClockFrequency_set")]
  public static extern void FeatureAccess_DeviceClockFrequency_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceClockFrequency_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceClockFrequency_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceClockSelector_set")]
  public static extern void FeatureAccess_DeviceClockSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceClockSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceClockSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceEventChannelCount_set")]
  public static extern void FeatureAccess_DeviceEventChannelCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceEventChannelCount_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceEventChannelCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceFamilyName_set")]
  public static extern void FeatureAccess_DeviceFamilyName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceFamilyName_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceFamilyName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceFirmwareVersion_set")]
  public static extern void FeatureAccess_DeviceFirmwareVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceFirmwareVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceFirmwareVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceFrontUARTSource_set")]
  public static extern void FeatureAccess_DeviceFrontUARTSource_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceFrontUARTSource_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceFrontUARTSource_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceGenCPVersionMajor_set")]
  public static extern void FeatureAccess_DeviceGenCPVersionMajor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceGenCPVersionMajor_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceGenCPVersionMajor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceGenCPVersionMinor_set")]
  public static extern void FeatureAccess_DeviceGenCPVersionMinor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceGenCPVersionMinor_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceGenCPVersionMinor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLicense_set")]
  public static extern void FeatureAccess_DeviceLicense_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLicense_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceLicense_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLicenseTypeSelector_set")]
  public static extern void FeatureAccess_DeviceLicenseTypeSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLicenseTypeSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceLicenseTypeSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkCommandTimeout_set")]
  public static extern void FeatureAccess_DeviceLinkCommandTimeout_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkCommandTimeout_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceLinkCommandTimeout_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkHeartbeatMode_set")]
  public static extern void FeatureAccess_DeviceLinkHeartbeatMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkHeartbeatMode_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceLinkHeartbeatMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkHeartbeatTimeout_set")]
  public static extern void FeatureAccess_DeviceLinkHeartbeatTimeout_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkHeartbeatTimeout_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceLinkHeartbeatTimeout_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkSelector_set")]
  public static extern void FeatureAccess_DeviceLinkSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceLinkSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkSpeed_set")]
  public static extern void FeatureAccess_DeviceLinkSpeed_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkSpeed_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceLinkSpeed_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkThroughputLimit_set")]
  public static extern void FeatureAccess_DeviceLinkThroughputLimit_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceLinkThroughputLimit_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceLinkThroughputLimit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceManufacturerInfo_set")]
  public static extern void FeatureAccess_DeviceManufacturerInfo_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceManufacturerInfo_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceManufacturerInfo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceManufacturerVersion_set")]
  public static extern void FeatureAccess_DeviceManufacturerVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceManufacturerVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceManufacturerVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceModelName_set")]
  public static extern void FeatureAccess_DeviceModelName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceModelName_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceModelName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceRegistersEndianness_set")]
  public static extern void FeatureAccess_DeviceRegistersEndianness_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceRegistersEndianness_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceRegistersEndianness_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceReset_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceReset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceResetToDeliveryState_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceResetToDeliveryState_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSFNCVersionMajor_set")]
  public static extern void FeatureAccess_DeviceSFNCVersionMajor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSFNCVersionMajor_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSFNCVersionMajor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSFNCVersionMinor_set")]
  public static extern void FeatureAccess_DeviceSFNCVersionMinor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSFNCVersionMinor_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSFNCVersionMinor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSFNCVersionSubMinor_set")]
  public static extern void FeatureAccess_DeviceSFNCVersionSubMinor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSFNCVersionSubMinor_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSFNCVersionSubMinor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceScanType_set")]
  public static extern void FeatureAccess_DeviceScanType_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceScanType_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceScanType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorConnected_set")]
  public static extern void FeatureAccess_DeviceSensorConnected_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorConnected_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSensorConnected_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorInitialized_set")]
  public static extern void FeatureAccess_DeviceSensorInitialized_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorInitialized_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSensorInitialized_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorSelector_set")]
  public static extern void FeatureAccess_DeviceSensorSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSensorSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorType_set")]
  public static extern void FeatureAccess_DeviceSensorType_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorType_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSensorType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorVersion_set")]
  public static extern void FeatureAccess_DeviceSensorVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSensorVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSensorVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSerialNumber_set")]
  public static extern void FeatureAccess_DeviceSerialNumber_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSerialNumber_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSerialNumber_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSerialPortBaudRate_set")]
  public static extern void FeatureAccess_DeviceSerialPortBaudRate_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSerialPortBaudRate_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSerialPortBaudRate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSerialPortSelector_set")]
  public static extern void FeatureAccess_DeviceSerialPortSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceSerialPortSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceSerialPortSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelCount_set")]
  public static extern void FeatureAccess_DeviceStreamChannelCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelCount_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceStreamChannelCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelEndianness_set")]
  public static extern void FeatureAccess_DeviceStreamChannelEndianness_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelEndianness_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceStreamChannelEndianness_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelPacketSize_set")]
  public static extern void FeatureAccess_DeviceStreamChannelPacketSize_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelPacketSize_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceStreamChannelPacketSize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelSelector_set")]
  public static extern void FeatureAccess_DeviceStreamChannelSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceStreamChannelSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelType_set")]
  public static extern void FeatureAccess_DeviceStreamChannelType_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceStreamChannelType_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceStreamChannelType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTLType_set")]
  public static extern void FeatureAccess_DeviceTLType_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTLType_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTLType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTLVersionMajor_set")]
  public static extern void FeatureAccess_DeviceTLVersionMajor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTLVersionMajor_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTLVersionMajor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTLVersionMinor_set")]
  public static extern void FeatureAccess_DeviceTLVersionMinor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTLVersionMinor_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTLVersionMinor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTLVersionSubMinor_set")]
  public static extern void FeatureAccess_DeviceTLVersionSubMinor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTLVersionSubMinor_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTLVersionSubMinor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTapGeometry_set")]
  public static extern void FeatureAccess_DeviceTapGeometry_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTapGeometry_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTapGeometry_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperature_set")]
  public static extern void FeatureAccess_DeviceTemperature_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperature_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTemperature_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureExceeded_set")]
  public static extern void FeatureAccess_DeviceTemperatureExceeded_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureExceeded_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTemperatureExceeded_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperaturePeltierEnable_set")]
  public static extern void FeatureAccess_DeviceTemperaturePeltierEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperaturePeltierEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTemperaturePeltierEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureSelector_set")]
  public static extern void FeatureAccess_DeviceTemperatureSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTemperatureSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureStatus_set")]
  public static extern void FeatureAccess_DeviceTemperatureStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTemperatureStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureStatusTransition_set")]
  public static extern void FeatureAccess_DeviceTemperatureStatusTransition_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureStatusTransition_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTemperatureStatusTransition_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureStatusTransitionSelector_set")]
  public static extern void FeatureAccess_DeviceTemperatureStatusTransitionSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureStatusTransitionSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTemperatureStatusTransitionSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureUnderrun_set")]
  public static extern void FeatureAccess_DeviceTemperatureUnderrun_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceTemperatureUnderrun_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceTemperatureUnderrun_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceType_set")]
  public static extern void FeatureAccess_DeviceType_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceType_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceUSB3VisionGUID_set")]
  public static extern void FeatureAccess_DeviceUSB3VisionGUID_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceUSB3VisionGUID_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceUSB3VisionGUID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceUserID_set")]
  public static extern void FeatureAccess_DeviceUserID_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceUserID_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceUserID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceVendorName_set")]
  public static extern void FeatureAccess_DeviceVendorName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceVendorName_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceVendorName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceVersion_set")]
  public static extern void FeatureAccess_DeviceVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceVersionControl_set")]
  public static extern void FeatureAccess_DeviceVersionControl_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DeviceVersionControl_get")]
  public static extern global::System.IntPtr FeatureAccess_DeviceVersionControl_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DiscardedEventCounter_set")]
  public static extern void FeatureAccess_DiscardedEventCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_DiscardedEventCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_DiscardedEventCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EnergyEfficientEthernetEnable_set")]
  public static extern void FeatureAccess_EnergyEfficientEthernetEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EnergyEfficientEthernetEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_EnergyEfficientEthernetEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventNotification_set")]
  public static extern void FeatureAccess_EventNotification_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventNotification_get")]
  public static extern global::System.IntPtr FeatureAccess_EventNotification_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSelector_set")]
  public static extern void FeatureAccess_EventSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ConcatenationAvailable_set")]
  public static extern void FeatureAccess_EventSensor1ConcatenationAvailable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ConcatenationAvailable_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ConcatenationAvailable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ConcatenationAvailableTimestamp_set")]
  public static extern void FeatureAccess_EventSensor1ConcatenationAvailableTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ConcatenationAvailableTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ConcatenationAvailableTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ConcatenationEmpty_set")]
  public static extern void FeatureAccess_EventSensor1ConcatenationEmpty_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ConcatenationEmpty_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ConcatenationEmpty_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ConcatenationEmptyTimestamp_set")]
  public static extern void FeatureAccess_EventSensor1ConcatenationEmptyTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ConcatenationEmptyTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ConcatenationEmptyTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ExposureEnd_set")]
  public static extern void FeatureAccess_EventSensor1ExposureEnd_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ExposureEnd_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ExposureEnd_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ExposureEndTimestamp_set")]
  public static extern void FeatureAccess_EventSensor1ExposureEndTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ExposureEndTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ExposureEndTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ExposureStart_set")]
  public static extern void FeatureAccess_EventSensor1ExposureStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ExposureStart_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ExposureStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ExposureStartTimestamp_set")]
  public static extern void FeatureAccess_EventSensor1ExposureStartTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ExposureStartTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ExposureStartTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ReadoutEnd_set")]
  public static extern void FeatureAccess_EventSensor1ReadoutEnd_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ReadoutEnd_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ReadoutEnd_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ReadoutEndTimestamp_set")]
  public static extern void FeatureAccess_EventSensor1ReadoutEndTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ReadoutEndTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ReadoutEndTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ReadoutStart_set")]
  public static extern void FeatureAccess_EventSensor1ReadoutStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ReadoutStart_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ReadoutStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ReadoutStartTimestamp_set")]
  public static extern void FeatureAccess_EventSensor1ReadoutStartTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1ReadoutStartTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1ReadoutStartTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1TriggerReady_set")]
  public static extern void FeatureAccess_EventSensor1TriggerReady_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1TriggerReady_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1TriggerReady_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1TriggerReadyTimestamp_set")]
  public static extern void FeatureAccess_EventSensor1TriggerReadyTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1TriggerReadyTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1TriggerReadyTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1TriggerSkipped_set")]
  public static extern void FeatureAccess_EventSensor1TriggerSkipped_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1TriggerSkipped_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1TriggerSkipped_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1TriggerSkippedTimestamp_set")]
  public static extern void FeatureAccess_EventSensor1TriggerSkippedTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor1TriggerSkippedTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor1TriggerSkippedTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ConcatenationAvailable_set")]
  public static extern void FeatureAccess_EventSensor2ConcatenationAvailable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ConcatenationAvailable_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ConcatenationAvailable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ConcatenationAvailableTimestamp_set")]
  public static extern void FeatureAccess_EventSensor2ConcatenationAvailableTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ConcatenationAvailableTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ConcatenationAvailableTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ConcatenationEmpty_set")]
  public static extern void FeatureAccess_EventSensor2ConcatenationEmpty_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ConcatenationEmpty_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ConcatenationEmpty_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ConcatenationEmptyTimestamp_set")]
  public static extern void FeatureAccess_EventSensor2ConcatenationEmptyTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ConcatenationEmptyTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ConcatenationEmptyTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ExposureEnd_set")]
  public static extern void FeatureAccess_EventSensor2ExposureEnd_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ExposureEnd_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ExposureEnd_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ExposureEndTimestamp_set")]
  public static extern void FeatureAccess_EventSensor2ExposureEndTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ExposureEndTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ExposureEndTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ExposureStart_set")]
  public static extern void FeatureAccess_EventSensor2ExposureStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ExposureStart_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ExposureStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ExposureStartTimestamp_set")]
  public static extern void FeatureAccess_EventSensor2ExposureStartTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ExposureStartTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ExposureStartTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ReadoutEnd_set")]
  public static extern void FeatureAccess_EventSensor2ReadoutEnd_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ReadoutEnd_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ReadoutEnd_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ReadoutEndTimestamp_set")]
  public static extern void FeatureAccess_EventSensor2ReadoutEndTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ReadoutEndTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ReadoutEndTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ReadoutStart_set")]
  public static extern void FeatureAccess_EventSensor2ReadoutStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ReadoutStart_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ReadoutStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ReadoutStartTimestamp_set")]
  public static extern void FeatureAccess_EventSensor2ReadoutStartTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2ReadoutStartTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2ReadoutStartTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2TriggerReady_set")]
  public static extern void FeatureAccess_EventSensor2TriggerReady_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2TriggerReady_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2TriggerReady_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2TriggerReadyTimestamp_set")]
  public static extern void FeatureAccess_EventSensor2TriggerReadyTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2TriggerReadyTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2TriggerReadyTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2TriggerSkipped_set")]
  public static extern void FeatureAccess_EventSensor2TriggerSkipped_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2TriggerSkipped_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2TriggerSkipped_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2TriggerSkippedTimestamp_set")]
  public static extern void FeatureAccess_EventSensor2TriggerSkippedTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensor2TriggerSkippedTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensor2TriggerSkippedTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensorInitializationFailed_set")]
  public static extern void FeatureAccess_EventSensorInitializationFailed_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensorInitializationFailed_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensorInitializationFailed_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensorInitializationFailedTimestamp_set")]
  public static extern void FeatureAccess_EventSensorInitializationFailedTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventSensorInitializationFailedTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventSensorInitializationFailedTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventboSerialUART0ReadReady_set")]
  public static extern void FeatureAccess_EventboSerialUART0ReadReady_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventboSerialUART0ReadReady_get")]
  public static extern global::System.IntPtr FeatureAccess_EventboSerialUART0ReadReady_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventboSerialUART0ReadReadyTimestamp_set")]
  public static extern void FeatureAccess_EventboSerialUART0ReadReadyTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventboSerialUART0ReadReadyTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventboSerialUART0ReadReadyTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventboSerialUART1ReadReady_set")]
  public static extern void FeatureAccess_EventboSerialUART1ReadReady_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventboSerialUART1ReadReady_get")]
  public static extern global::System.IntPtr FeatureAccess_EventboSerialUART1ReadReady_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventboSerialUART1ReadReadyTimestamp_set")]
  public static extern void FeatureAccess_EventboSerialUART1ReadReadyTimestamp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_EventboSerialUART1ReadReadyTimestamp_get")]
  public static extern global::System.IntPtr FeatureAccess_EventboSerialUART1ReadReadyTimestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureAuto_set")]
  public static extern void FeatureAccess_ExposureAuto_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureAuto_get")]
  public static extern global::System.IntPtr FeatureAccess_ExposureAuto_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureAutoMaxValue_set")]
  public static extern void FeatureAccess_ExposureAutoMaxValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureAutoMaxValue_get")]
  public static extern global::System.IntPtr FeatureAccess_ExposureAutoMaxValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureAutoMinValue_set")]
  public static extern void FeatureAccess_ExposureAutoMinValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureAutoMinValue_get")]
  public static extern global::System.IntPtr FeatureAccess_ExposureAutoMinValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureLinesOffsetEven_set")]
  public static extern void FeatureAccess_ExposureLinesOffsetEven_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureLinesOffsetEven_get")]
  public static extern global::System.IntPtr FeatureAccess_ExposureLinesOffsetEven_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureLinesOffsetOdd_set")]
  public static extern void FeatureAccess_ExposureLinesOffsetOdd_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureLinesOffsetOdd_get")]
  public static extern global::System.IntPtr FeatureAccess_ExposureLinesOffsetOdd_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureMode_set")]
  public static extern void FeatureAccess_ExposureMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureMode_get")]
  public static extern global::System.IntPtr FeatureAccess_ExposureMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureTime_set")]
  public static extern void FeatureAccess_ExposureTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureTime_get")]
  public static extern global::System.IntPtr FeatureAccess_ExposureTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureTimeGapMax_set")]
  public static extern void FeatureAccess_ExposureTimeGapMax_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureTimeGapMax_get")]
  public static extern global::System.IntPtr FeatureAccess_ExposureTimeGapMax_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureTimeGapMin_set")]
  public static extern void FeatureAccess_ExposureTimeGapMin_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ExposureTimeGapMin_get")]
  public static extern global::System.IntPtr FeatureAccess_ExposureTimeGapMin_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FixedPatternNoiseCorrection_set")]
  public static extern void FeatureAccess_FixedPatternNoiseCorrection_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FixedPatternNoiseCorrection_get")]
  public static extern global::System.IntPtr FeatureAccess_FixedPatternNoiseCorrection_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocalLength_set")]
  public static extern void FeatureAccess_FocalLength_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocalLength_get")]
  public static extern global::System.IntPtr FeatureAccess_FocalLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocalLengthInitialize_get")]
  public static extern global::System.IntPtr FeatureAccess_FocalLengthInitialize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocalLengthStatus_set")]
  public static extern void FeatureAccess_FocalLengthStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocalLengthStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_FocalLengthStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocalPower_set")]
  public static extern void FeatureAccess_FocalPower_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocalPower_get")]
  public static extern global::System.IntPtr FeatureAccess_FocalPower_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocusInitialize_get")]
  public static extern global::System.IntPtr FeatureAccess_FocusInitialize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocusStatus_set")]
  public static extern void FeatureAccess_FocusStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocusStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_FocusStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocusStepper_set")]
  public static extern void FeatureAccess_FocusStepper_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FocusStepper_get")]
  public static extern global::System.IntPtr FeatureAccess_FocusStepper_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FrameCounter_set")]
  public static extern void FeatureAccess_FrameCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_FrameCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_FrameCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GVSPConfigurationBlockID64Bit_set")]
  public static extern void FeatureAccess_GVSPConfigurationBlockID64Bit_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GVSPConfigurationBlockID64Bit_get")]
  public static extern global::System.IntPtr FeatureAccess_GVSPConfigurationBlockID64Bit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Gain_set")]
  public static extern void FeatureAccess_Gain_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Gain_get")]
  public static extern global::System.IntPtr FeatureAccess_Gain_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GainAuto_set")]
  public static extern void FeatureAccess_GainAuto_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GainAuto_get")]
  public static extern global::System.IntPtr FeatureAccess_GainAuto_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GainAutoMaxValue_set")]
  public static extern void FeatureAccess_GainAutoMaxValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GainAutoMaxValue_get")]
  public static extern global::System.IntPtr FeatureAccess_GainAutoMaxValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GainAutoMinValue_set")]
  public static extern void FeatureAccess_GainAutoMinValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GainAutoMinValue_get")]
  public static extern global::System.IntPtr FeatureAccess_GainAutoMinValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GainSelector_set")]
  public static extern void FeatureAccess_GainSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GainSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_GainSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Gamma_set")]
  public static extern void FeatureAccess_Gamma_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Gamma_get")]
  public static extern global::System.IntPtr FeatureAccess_Gamma_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCCP_set")]
  public static extern void FeatureAccess_GevCCP_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCCP_get")]
  public static extern global::System.IntPtr FeatureAccess_GevCCP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentDefaultGateway_set")]
  public static extern void FeatureAccess_GevCurrentDefaultGateway_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentDefaultGateway_get")]
  public static extern global::System.IntPtr FeatureAccess_GevCurrentDefaultGateway_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentIPAddress_set")]
  public static extern void FeatureAccess_GevCurrentIPAddress_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentIPAddress_get")]
  public static extern global::System.IntPtr FeatureAccess_GevCurrentIPAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentIPConfigurationDHCP_set")]
  public static extern void FeatureAccess_GevCurrentIPConfigurationDHCP_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentIPConfigurationDHCP_get")]
  public static extern global::System.IntPtr FeatureAccess_GevCurrentIPConfigurationDHCP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentIPConfigurationLLA_set")]
  public static extern void FeatureAccess_GevCurrentIPConfigurationLLA_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentIPConfigurationLLA_get")]
  public static extern global::System.IntPtr FeatureAccess_GevCurrentIPConfigurationLLA_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentIPConfigurationPersistentIP_set")]
  public static extern void FeatureAccess_GevCurrentIPConfigurationPersistentIP_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentIPConfigurationPersistentIP_get")]
  public static extern global::System.IntPtr FeatureAccess_GevCurrentIPConfigurationPersistentIP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentSubnetMask_set")]
  public static extern void FeatureAccess_GevCurrentSubnetMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevCurrentSubnetMask_get")]
  public static extern global::System.IntPtr FeatureAccess_GevCurrentSubnetMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevDiscoveryAckDelay_set")]
  public static extern void FeatureAccess_GevDiscoveryAckDelay_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevDiscoveryAckDelay_get")]
  public static extern global::System.IntPtr FeatureAccess_GevDiscoveryAckDelay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevFirstURL_set")]
  public static extern void FeatureAccess_GevFirstURL_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevFirstURL_get")]
  public static extern global::System.IntPtr FeatureAccess_GevFirstURL_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevGVCPExtendedStatusCodes_set")]
  public static extern void FeatureAccess_GevGVCPExtendedStatusCodes_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevGVCPExtendedStatusCodes_get")]
  public static extern global::System.IntPtr FeatureAccess_GevGVCPExtendedStatusCodes_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevGVCPExtendedStatusCodesSelector_set")]
  public static extern void FeatureAccess_GevGVCPExtendedStatusCodesSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevGVCPExtendedStatusCodesSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_GevGVCPExtendedStatusCodesSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevGVCPPendingAck_set")]
  public static extern void FeatureAccess_GevGVCPPendingAck_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevGVCPPendingAck_get")]
  public static extern global::System.IntPtr FeatureAccess_GevGVCPPendingAck_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevIPConfigurationStatus_set")]
  public static extern void FeatureAccess_GevIPConfigurationStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevIPConfigurationStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_GevIPConfigurationStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevInterfaceSelector_set")]
  public static extern void FeatureAccess_GevInterfaceSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevInterfaceSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_GevInterfaceSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMACAddress_set")]
  public static extern void FeatureAccess_GevMACAddress_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMACAddress_get")]
  public static extern global::System.IntPtr FeatureAccess_GevMACAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCDA_set")]
  public static extern void FeatureAccess_GevMCDA_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCDA_get")]
  public static extern global::System.IntPtr FeatureAccess_GevMCDA_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCPHostPort_set")]
  public static extern void FeatureAccess_GevMCPHostPort_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCPHostPort_get")]
  public static extern global::System.IntPtr FeatureAccess_GevMCPHostPort_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCRC_set")]
  public static extern void FeatureAccess_GevMCRC_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCRC_get")]
  public static extern global::System.IntPtr FeatureAccess_GevMCRC_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCSP_set")]
  public static extern void FeatureAccess_GevMCSP_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCSP_get")]
  public static extern global::System.IntPtr FeatureAccess_GevMCSP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCTT_set")]
  public static extern void FeatureAccess_GevMCTT_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevMCTT_get")]
  public static extern global::System.IntPtr FeatureAccess_GevMCTT_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPAUSEFrameReception_set")]
  public static extern void FeatureAccess_GevPAUSEFrameReception_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPAUSEFrameReception_get")]
  public static extern global::System.IntPtr FeatureAccess_GevPAUSEFrameReception_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPAUSEFrameTransmission_set")]
  public static extern void FeatureAccess_GevPAUSEFrameTransmission_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPAUSEFrameTransmission_get")]
  public static extern global::System.IntPtr FeatureAccess_GevPAUSEFrameTransmission_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPersistentDefaultGateway_set")]
  public static extern void FeatureAccess_GevPersistentDefaultGateway_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPersistentDefaultGateway_get")]
  public static extern global::System.IntPtr FeatureAccess_GevPersistentDefaultGateway_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPersistentIPAddress_set")]
  public static extern void FeatureAccess_GevPersistentIPAddress_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPersistentIPAddress_get")]
  public static extern global::System.IntPtr FeatureAccess_GevPersistentIPAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPersistentSubnetMask_set")]
  public static extern void FeatureAccess_GevPersistentSubnetMask_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPersistentSubnetMask_get")]
  public static extern global::System.IntPtr FeatureAccess_GevPersistentSubnetMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPrimaryApplicationIPAddress_set")]
  public static extern void FeatureAccess_GevPrimaryApplicationIPAddress_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPrimaryApplicationIPAddress_get")]
  public static extern global::System.IntPtr FeatureAccess_GevPrimaryApplicationIPAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPrimaryApplicationSocket_set")]
  public static extern void FeatureAccess_GevPrimaryApplicationSocket_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPrimaryApplicationSocket_get")]
  public static extern global::System.IntPtr FeatureAccess_GevPrimaryApplicationSocket_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPrimaryApplicationSwitchoverKey_set")]
  public static extern void FeatureAccess_GevPrimaryApplicationSwitchoverKey_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevPrimaryApplicationSwitchoverKey_get")]
  public static extern global::System.IntPtr FeatureAccess_GevPrimaryApplicationSwitchoverKey_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCCFGUnconditionalStreaming_set")]
  public static extern void FeatureAccess_GevSCCFGUnconditionalStreaming_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCCFGUnconditionalStreaming_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCCFGUnconditionalStreaming_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCDA_set")]
  public static extern void FeatureAccess_GevSCDA_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCDA_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCDA_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCFTD_set")]
  public static extern void FeatureAccess_GevSCFTD_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCFTD_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCFTD_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPD_set")]
  public static extern void FeatureAccess_GevSCPD_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPD_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCPD_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPHostPort_set")]
  public static extern void FeatureAccess_GevSCPHostPort_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPHostPort_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCPHostPort_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPInterfaceIndex_set")]
  public static extern void FeatureAccess_GevSCPInterfaceIndex_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPInterfaceIndex_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCPInterfaceIndex_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPSDoNotFragment_set")]
  public static extern void FeatureAccess_GevSCPSDoNotFragment_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPSDoNotFragment_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCPSDoNotFragment_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPSFireTestPacket_set")]
  public static extern void FeatureAccess_GevSCPSFireTestPacket_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPSFireTestPacket_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCPSFireTestPacket_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPSPacketSize_set")]
  public static extern void FeatureAccess_GevSCPSPacketSize_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCPSPacketSize_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCPSPacketSize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCSP_set")]
  public static extern void FeatureAccess_GevSCSP_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSCSP_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSCSP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSecondURL_set")]
  public static extern void FeatureAccess_GevSecondURL_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSecondURL_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSecondURL_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevStreamChannelSelector_set")]
  public static extern void FeatureAccess_GevStreamChannelSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevStreamChannelSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_GevStreamChannelSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSupportedOption_set")]
  public static extern void FeatureAccess_GevSupportedOption_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSupportedOption_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSupportedOption_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSupportedOptionSelector_set")]
  public static extern void FeatureAccess_GevSupportedOptionSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_GevSupportedOptionSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_GevSupportedOptionSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDREnable_set")]
  public static extern void FeatureAccess_HDREnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDREnable_get")]
  public static extern global::System.IntPtr FeatureAccess_HDREnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDREnableTriggerAutoMode_set")]
  public static extern void FeatureAccess_HDREnableTriggerAutoMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDREnableTriggerAutoMode_get")]
  public static extern global::System.IntPtr FeatureAccess_HDREnableTriggerAutoMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureRatio_set")]
  public static extern void FeatureAccess_HDRExposureRatio_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureRatio_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRExposureRatio_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureRatioPercent_set")]
  public static extern void FeatureAccess_HDRExposureRatioPercent_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureRatioPercent_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRExposureRatioPercent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureTimeBrightArea_set")]
  public static extern void FeatureAccess_HDRExposureTimeBrightArea_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureTimeBrightArea_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRExposureTimeBrightArea_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureTimeDarkArea_set")]
  public static extern void FeatureAccess_HDRExposureTimeDarkArea_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureTimeDarkArea_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRExposureTimeDarkArea_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureTimeRatio_set")]
  public static extern void FeatureAccess_HDRExposureTimeRatio_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRExposureTimeRatio_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRExposureTimeRatio_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRGainBrightArea_set")]
  public static extern void FeatureAccess_HDRGainBrightArea_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRGainBrightArea_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRGainBrightArea_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRGainDarkArea_set")]
  public static extern void FeatureAccess_HDRGainDarkArea_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRGainDarkArea_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRGainDarkArea_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRGainRatio_set")]
  public static extern void FeatureAccess_HDRGainRatio_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRGainRatio_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRGainRatio_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRGainRatioSelector_set")]
  public static extern void FeatureAccess_HDRGainRatioSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRGainRatioSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRGainRatioSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRIndex_set")]
  public static extern void FeatureAccess_HDRIndex_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRIndex_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRIndex_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRPotentialAbs_set")]
  public static extern void FeatureAccess_HDRPotentialAbs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRPotentialAbs_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRPotentialAbs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRProcessingEnable_set")]
  public static extern void FeatureAccess_HDRProcessingEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRProcessingEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRProcessingEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRProcessingSmoothingEnable_set")]
  public static extern void FeatureAccess_HDRProcessingSmoothingEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRProcessingSmoothingEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRProcessingSmoothingEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRProcessingThresholdMax_set")]
  public static extern void FeatureAccess_HDRProcessingThresholdMax_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRProcessingThresholdMax_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRProcessingThresholdMax_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRProcessingThresholdMin_set")]
  public static extern void FeatureAccess_HDRProcessingThresholdMin_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRProcessingThresholdMin_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRProcessingThresholdMin_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRSplitviewEnable_set")]
  public static extern void FeatureAccess_HDRSplitviewEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRSplitviewEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRSplitviewEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurveGradient_set")]
  public static extern void FeatureAccess_HDRTonemappingCurveGradient_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurveGradient_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRTonemappingCurveGradient_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurveGridpoint_set")]
  public static extern void FeatureAccess_HDRTonemappingCurveGridpoint_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurveGridpoint_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRTonemappingCurveGridpoint_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurveGridpointIndex_set")]
  public static extern void FeatureAccess_HDRTonemappingCurveGridpointIndex_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurveGridpointIndex_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRTonemappingCurveGridpointIndex_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurveOffset_set")]
  public static extern void FeatureAccess_HDRTonemappingCurveOffset_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurveOffset_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRTonemappingCurveOffset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurvePresetSelector_set")]
  public static extern void FeatureAccess_HDRTonemappingCurvePresetSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurvePresetSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRTonemappingCurvePresetSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingCurveResetToPreset_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRTonemappingCurveResetToPreset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingEnable_set")]
  public static extern void FeatureAccess_HDRTonemappingEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRTonemappingEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingMax_set")]
  public static extern void FeatureAccess_HDRTonemappingMax_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingMax_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRTonemappingMax_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingMean_set")]
  public static extern void FeatureAccess_HDRTonemappingMean_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HDRTonemappingMean_get")]
  public static extern global::System.IntPtr FeatureAccess_HDRTonemappingMean_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HQModeEnable_set")]
  public static extern void FeatureAccess_HQModeEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HQModeEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_HQModeEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Height_set")]
  public static extern void FeatureAccess_Height_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Height_get")]
  public static extern global::System.IntPtr FeatureAccess_Height_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HeightMax_set")]
  public static extern void FeatureAccess_HeightMax_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HeightMax_get")]
  public static extern global::System.IntPtr FeatureAccess_HeightMax_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HighConversionGain_set")]
  public static extern void FeatureAccess_HighConversionGain_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HighConversionGain_get")]
  public static extern global::System.IntPtr FeatureAccess_HighConversionGain_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HighConversionGainEnable_set")]
  public static extern void FeatureAccess_HighConversionGainEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_HighConversionGainEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_HighConversionGainEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionBitrate_set")]
  public static extern void FeatureAccess_ImageCompressionBitrate_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionBitrate_get")]
  public static extern global::System.IntPtr FeatureAccess_ImageCompressionBitrate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionJPEGFormatOption_set")]
  public static extern void FeatureAccess_ImageCompressionJPEGFormatOption_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionJPEGFormatOption_get")]
  public static extern global::System.IntPtr FeatureAccess_ImageCompressionJPEGFormatOption_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionMode_set")]
  public static extern void FeatureAccess_ImageCompressionMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionMode_get")]
  public static extern global::System.IntPtr FeatureAccess_ImageCompressionMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionQuality_set")]
  public static extern void FeatureAccess_ImageCompressionQuality_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionQuality_get")]
  public static extern global::System.IntPtr FeatureAccess_ImageCompressionQuality_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionRateOption_set")]
  public static extern void FeatureAccess_ImageCompressionRateOption_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionRateOption_get")]
  public static extern global::System.IntPtr FeatureAccess_ImageCompressionRateOption_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionVersion_set")]
  public static extern void FeatureAccess_ImageCompressionVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageCompressionVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_ImageCompressionVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageData_get")]
  public static extern global::System.IntPtr FeatureAccess_ImageData_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageDataEnable_set")]
  public static extern void FeatureAccess_ImageDataEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ImageDataEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_ImageDataEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_InterfaceSpeedMode_set")]
  public static extern void FeatureAccess_InterfaceSpeedMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_InterfaceSpeedMode_get")]
  public static extern global::System.IntPtr FeatureAccess_InterfaceSpeedMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTContent_set")]
  public static extern void FeatureAccess_LUTContent_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTContent_get")]
  public static extern global::System.IntPtr FeatureAccess_LUTContent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTEnable_set")]
  public static extern void FeatureAccess_LUTEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_LUTEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTIndex_set")]
  public static extern void FeatureAccess_LUTIndex_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTIndex_get")]
  public static extern global::System.IntPtr FeatureAccess_LUTIndex_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTSelector_set")]
  public static extern void FeatureAccess_LUTSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_LUTSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTValue_set")]
  public static extern void FeatureAccess_LUTValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LUTValue_get")]
  public static extern global::System.IntPtr FeatureAccess_LUTValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineDebouncerHighTime_set")]
  public static extern void FeatureAccess_LineDebouncerHighTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineDebouncerHighTime_get")]
  public static extern global::System.IntPtr FeatureAccess_LineDebouncerHighTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineDebouncerHighTimeAbs_set")]
  public static extern void FeatureAccess_LineDebouncerHighTimeAbs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineDebouncerHighTimeAbs_get")]
  public static extern global::System.IntPtr FeatureAccess_LineDebouncerHighTimeAbs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineDebouncerLowTime_set")]
  public static extern void FeatureAccess_LineDebouncerLowTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineDebouncerLowTime_get")]
  public static extern global::System.IntPtr FeatureAccess_LineDebouncerLowTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineDebouncerLowTimeAbs_set")]
  public static extern void FeatureAccess_LineDebouncerLowTimeAbs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineDebouncerLowTimeAbs_get")]
  public static extern global::System.IntPtr FeatureAccess_LineDebouncerLowTimeAbs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineFormat_set")]
  public static extern void FeatureAccess_LineFormat_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineFormat_get")]
  public static extern global::System.IntPtr FeatureAccess_LineFormat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineInverter_set")]
  public static extern void FeatureAccess_LineInverter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineInverter_get")]
  public static extern global::System.IntPtr FeatureAccess_LineInverter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineLengthMin_set")]
  public static extern void FeatureAccess_LineLengthMin_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineLengthMin_get")]
  public static extern global::System.IntPtr FeatureAccess_LineLengthMin_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineMode_set")]
  public static extern void FeatureAccess_LineMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineMode_get")]
  public static extern global::System.IntPtr FeatureAccess_LineMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMConfigurationMode_set")]
  public static extern void FeatureAccess_LinePWMConfigurationMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMConfigurationMode_get")]
  public static extern global::System.IntPtr FeatureAccess_LinePWMConfigurationMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMDuration_set")]
  public static extern void FeatureAccess_LinePWMDuration_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMDuration_get")]
  public static extern global::System.IntPtr FeatureAccess_LinePWMDuration_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMDutyCycle_set")]
  public static extern void FeatureAccess_LinePWMDutyCycle_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMDutyCycle_get")]
  public static extern global::System.IntPtr FeatureAccess_LinePWMDutyCycle_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMMaxDuration_set")]
  public static extern void FeatureAccess_LinePWMMaxDuration_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMMaxDuration_get")]
  public static extern global::System.IntPtr FeatureAccess_LinePWMMaxDuration_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMMaxDutyCycle_set")]
  public static extern void FeatureAccess_LinePWMMaxDutyCycle_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMMaxDutyCycle_get")]
  public static extern global::System.IntPtr FeatureAccess_LinePWMMaxDutyCycle_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMMode_set")]
  public static extern void FeatureAccess_LinePWMMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMMode_get")]
  public static extern global::System.IntPtr FeatureAccess_LinePWMMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMOffTime_set")]
  public static extern void FeatureAccess_LinePWMOffTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMOffTime_get")]
  public static extern global::System.IntPtr FeatureAccess_LinePWMOffTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMPeriodTime_set")]
  public static extern void FeatureAccess_LinePWMPeriodTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LinePWMPeriodTime_get")]
  public static extern global::System.IntPtr FeatureAccess_LinePWMPeriodTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineSelector_set")]
  public static extern void FeatureAccess_LineSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_LineSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineSource_set")]
  public static extern void FeatureAccess_LineSource_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineSource_get")]
  public static extern global::System.IntPtr FeatureAccess_LineSource_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineStatus_set")]
  public static extern void FeatureAccess_LineStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_LineStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineStatusAll_set")]
  public static extern void FeatureAccess_LineStatusAll_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LineStatusAll_get")]
  public static extern global::System.IntPtr FeatureAccess_LineStatusAll_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LostEventCounter_set")]
  public static extern void FeatureAccess_LostEventCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_LostEventCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_LostEventCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MedianFilterEnable_set")]
  public static extern void FeatureAccess_MedianFilterEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MedianFilterEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_MedianFilterEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryActivePart_set")]
  public static extern void FeatureAccess_MemoryActivePart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryActivePart_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryActivePart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryFilledBlocks_set")]
  public static extern void FeatureAccess_MemoryFilledBlocks_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryFilledBlocks_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryFilledBlocks_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryFreeBlocks_set")]
  public static extern void FeatureAccess_MemoryFreeBlocks_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryFreeBlocks_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryFreeBlocks_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryMaxBlocks_set")]
  public static extern void FeatureAccess_MemoryMaxBlocks_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryMaxBlocks_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryMaxBlocks_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryMode_set")]
  public static extern void FeatureAccess_MemoryMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryMode_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartActiveBlock_set")]
  public static extern void FeatureAccess_MemoryPartActiveBlock_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartActiveBlock_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryPartActiveBlock_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartBlocks_set")]
  public static extern void FeatureAccess_MemoryPartBlocks_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartBlocks_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryPartBlocks_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartFilledBlocks_set")]
  public static extern void FeatureAccess_MemoryPartFilledBlocks_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartFilledBlocks_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryPartFilledBlocks_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartFreeBlocks_set")]
  public static extern void FeatureAccess_MemoryPartFreeBlocks_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartFreeBlocks_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryPartFreeBlocks_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartIncrementSoftware_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryPartIncrementSoftware_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartIncrementSource_set")]
  public static extern void FeatureAccess_MemoryPartIncrementSource_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartIncrementSource_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryPartIncrementSource_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartMode_set")]
  public static extern void FeatureAccess_MemoryPartMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartMode_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryPartMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartPreviewRatio_set")]
  public static extern void FeatureAccess_MemoryPartPreviewRatio_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartPreviewRatio_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryPartPreviewRatio_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartSelector_set")]
  public static extern void FeatureAccess_MemoryPartSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_MemoryPartSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_MemoryPartSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OffsetX_set")]
  public static extern void FeatureAccess_OffsetX_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OffsetX_get")]
  public static extern global::System.IntPtr FeatureAccess_OffsetX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OffsetY_set")]
  public static extern void FeatureAccess_OffsetY_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OffsetY_get")]
  public static extern global::System.IntPtr FeatureAccess_OffsetY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerDisconnect_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerDisconnect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerFamilyName_set")]
  public static extern void FeatureAccess_OpticControllerFamilyName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerFamilyName_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerFamilyName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerFirmwareVersion_set")]
  public static extern void FeatureAccess_OpticControllerFirmwareVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerFirmwareVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerFirmwareVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerInitialize_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerInitialize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerModelName_set")]
  public static extern void FeatureAccess_OpticControllerModelName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerModelName_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerModelName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerSelector_set")]
  public static extern void FeatureAccess_OpticControllerSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerSerialNumber_set")]
  public static extern void FeatureAccess_OpticControllerSerialNumber_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerSerialNumber_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerSerialNumber_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerStatus_set")]
  public static extern void FeatureAccess_OpticControllerStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerTemperature_set")]
  public static extern void FeatureAccess_OpticControllerTemperature_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerTemperature_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerTemperature_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerThermalCompensation_set")]
  public static extern void FeatureAccess_OpticControllerThermalCompensation_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerThermalCompensation_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerThermalCompensation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerVendorName_set")]
  public static extern void FeatureAccess_OpticControllerVendorName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerVendorName_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerVendorName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerVersion_set")]
  public static extern void FeatureAccess_OpticControllerVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_OpticControllerVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_OpticControllerVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PIN_set")]
  public static extern void FeatureAccess_PIN_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PIN_get")]
  public static extern global::System.IntPtr FeatureAccess_PIN_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PartialScanEnabled_set")]
  public static extern void FeatureAccess_PartialScanEnabled_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PartialScanEnabled_get")]
  public static extern global::System.IntPtr FeatureAccess_PartialScanEnabled_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PayloadSize_set")]
  public static extern void FeatureAccess_PayloadSize_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PayloadSize_get")]
  public static extern global::System.IntPtr FeatureAccess_PayloadSize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PhysicalPixelSizeX_set")]
  public static extern void FeatureAccess_PhysicalPixelSizeX_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PhysicalPixelSizeX_get")]
  public static extern global::System.IntPtr FeatureAccess_PhysicalPixelSizeX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PhysicalPixelSizeY_set")]
  public static extern void FeatureAccess_PhysicalPixelSizeY_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PhysicalPixelSizeY_get")]
  public static extern global::System.IntPtr FeatureAccess_PhysicalPixelSizeY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PixelCorrectionEnable_set")]
  public static extern void FeatureAccess_PixelCorrectionEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PixelCorrectionEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_PixelCorrectionEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PixelCorrectionThreshold_set")]
  public static extern void FeatureAccess_PixelCorrectionThreshold_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PixelCorrectionThreshold_get")]
  public static extern global::System.IntPtr FeatureAccess_PixelCorrectionThreshold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PixelFormat_set")]
  public static extern void FeatureAccess_PixelFormat_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PixelFormat_get")]
  public static extern global::System.IntPtr FeatureAccess_PixelFormat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpClockAccuracy_set")]
  public static extern void FeatureAccess_PtpClockAccuracy_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpClockAccuracy_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpClockAccuracy_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpClockID_set")]
  public static extern void FeatureAccess_PtpClockID_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpClockID_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpClockID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpClockOffset_set")]
  public static extern void FeatureAccess_PtpClockOffset_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpClockOffset_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpClockOffset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpClockOffsetMode_set")]
  public static extern void FeatureAccess_PtpClockOffsetMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpClockOffsetMode_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpClockOffsetMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpClockOffsetSet_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpClockOffsetSet_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpDataSetLatch_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpDataSetLatch_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpDriftOffset_set")]
  public static extern void FeatureAccess_PtpDriftOffset_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpDriftOffset_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpDriftOffset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpDriftOffsetMode_set")]
  public static extern void FeatureAccess_PtpDriftOffsetMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpDriftOffsetMode_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpDriftOffsetMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpDriftOffsetSet_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpDriftOffsetSet_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpEnable_set")]
  public static extern void FeatureAccess_PtpEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpGrandmasterClockID_set")]
  public static extern void FeatureAccess_PtpGrandmasterClockID_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpGrandmasterClockID_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpGrandmasterClockID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpKi_set")]
  public static extern void FeatureAccess_PtpKi_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpKi_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpKi_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpKp_set")]
  public static extern void FeatureAccess_PtpKp_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpKp_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpKp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpMode_set")]
  public static extern void FeatureAccess_PtpMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpMode_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpOffsetFromMaster_set")]
  public static extern void FeatureAccess_PtpOffsetFromMaster_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpOffsetFromMaster_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpOffsetFromMaster_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpParentClockID_set")]
  public static extern void FeatureAccess_PtpParentClockID_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpParentClockID_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpParentClockID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpServoStatus_set")]
  public static extern void FeatureAccess_PtpServoStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpServoStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpServoStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpServoStatusThreshold_set")]
  public static extern void FeatureAccess_PtpServoStatusThreshold_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpServoStatusThreshold_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpServoStatusThreshold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpStatus_set")]
  public static extern void FeatureAccess_PtpStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpSyncMessageInterval_set")]
  public static extern void FeatureAccess_PtpSyncMessageInterval_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpSyncMessageInterval_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpSyncMessageInterval_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpSyncMessageIntervalStatus_set")]
  public static extern void FeatureAccess_PtpSyncMessageIntervalStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpSyncMessageIntervalStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpSyncMessageIntervalStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpTimestampOffset_set")]
  public static extern void FeatureAccess_PtpTimestampOffset_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpTimestampOffset_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpTimestampOffset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpTimestampOffsetMode_set")]
  public static extern void FeatureAccess_PtpTimestampOffsetMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpTimestampOffsetMode_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpTimestampOffsetMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpTimestampOffsetSet_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpTimestampOffsetSet_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpUseControllerTestSettings_set")]
  public static extern void FeatureAccess_PtpUseControllerTestSettings_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_PtpUseControllerTestSettings_get")]
  public static extern global::System.IntPtr FeatureAccess_PtpUseControllerTestSettings_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReadOutBuffering_set")]
  public static extern void FeatureAccess_ReadOutBuffering_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReadOutBuffering_get")]
  public static extern global::System.IntPtr FeatureAccess_ReadOutBuffering_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReadOutTime_set")]
  public static extern void FeatureAccess_ReadOutTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReadOutTime_get")]
  public static extern global::System.IntPtr FeatureAccess_ReadOutTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReadoutMode_set")]
  public static extern void FeatureAccess_ReadoutMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReadoutMode_get")]
  public static extern global::System.IntPtr FeatureAccess_ReadoutMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionAcquisitionMode_set")]
  public static extern void FeatureAccess_RegionAcquisitionMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionAcquisitionMode_get")]
  public static extern global::System.IntPtr FeatureAccess_RegionAcquisitionMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionConfigurationMode_set")]
  public static extern void FeatureAccess_RegionConfigurationMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionConfigurationMode_get")]
  public static extern global::System.IntPtr FeatureAccess_RegionConfigurationMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionMode_set")]
  public static extern void FeatureAccess_RegionMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionMode_get")]
  public static extern global::System.IntPtr FeatureAccess_RegionMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionSelector_set")]
  public static extern void FeatureAccess_RegionSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_RegionSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionTransferMode_set")]
  public static extern void FeatureAccess_RegionTransferMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionTransferMode_get")]
  public static extern global::System.IntPtr FeatureAccess_RegionTransferMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionVersion_set")]
  public static extern void FeatureAccess_RegionVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RegionVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_RegionVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReverseX_set")]
  public static extern void FeatureAccess_ReverseX_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReverseX_get")]
  public static extern global::System.IntPtr FeatureAccess_ReverseX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReverseY_set")]
  public static extern void FeatureAccess_ReverseY_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ReverseY_get")]
  public static extern global::System.IntPtr FeatureAccess_ReverseY_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxAcknowledgeLength_set")]
  public static extern void FeatureAccess_RxAcknowledgeLength_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxAcknowledgeLength_get")]
  public static extern global::System.IntPtr FeatureAccess_RxAcknowledgeLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxDiscardedMessages_set")]
  public static extern void FeatureAccess_RxDiscardedMessages_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxDiscardedMessages_get")]
  public static extern global::System.IntPtr FeatureAccess_RxDiscardedMessages_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxFiFo_get")]
  public static extern global::System.IntPtr FeatureAccess_RxFiFo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxFiFoMessageLength_set")]
  public static extern void FeatureAccess_RxFiFoMessageLength_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxFiFoMessageLength_get")]
  public static extern global::System.IntPtr FeatureAccess_RxFiFoMessageLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxRetryCount_set")]
  public static extern void FeatureAccess_RxRetryCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxRetryCount_get")]
  public static extern global::System.IntPtr FeatureAccess_RxRetryCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxSynchronizationDelay_set")]
  public static extern void FeatureAccess_RxSynchronizationDelay_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxSynchronizationDelay_get")]
  public static extern global::System.IntPtr FeatureAccess_RxSynchronizationDelay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxSynchronizationDelayNormalized_set")]
  public static extern void FeatureAccess_RxSynchronizationDelayNormalized_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_RxSynchronizationDelayNormalized_get")]
  public static extern global::System.IntPtr FeatureAccess_RxSynchronizationDelayNormalized_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIControl_set")]
  public static extern void FeatureAccess_SIControl_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIControl_get")]
  public static extern global::System.IntPtr FeatureAccess_SIControl_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIPayloadFinalTransfer1Size_set")]
  public static extern void FeatureAccess_SIPayloadFinalTransfer1Size_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIPayloadFinalTransfer1Size_get")]
  public static extern global::System.IntPtr FeatureAccess_SIPayloadFinalTransfer1Size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIPayloadFinalTransfer2Size_set")]
  public static extern void FeatureAccess_SIPayloadFinalTransfer2Size_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIPayloadFinalTransfer2Size_get")]
  public static extern global::System.IntPtr FeatureAccess_SIPayloadFinalTransfer2Size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIPayloadTransferCount_set")]
  public static extern void FeatureAccess_SIPayloadTransferCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIPayloadTransferCount_get")]
  public static extern global::System.IntPtr FeatureAccess_SIPayloadTransferCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIPayloadTransferSize_set")]
  public static extern void FeatureAccess_SIPayloadTransferSize_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SIPayloadTransferSize_get")]
  public static extern global::System.IntPtr FeatureAccess_SIPayloadTransferSize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor1XCutLength_set")]
  public static extern void FeatureAccess_Sensor1XCutLength_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor1XCutLength_get")]
  public static extern global::System.IntPtr FeatureAccess_Sensor1XCutLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor1XCutStart_set")]
  public static extern void FeatureAccess_Sensor1XCutStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor1XCutStart_get")]
  public static extern global::System.IntPtr FeatureAccess_Sensor1XCutStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor1YCutLength_set")]
  public static extern void FeatureAccess_Sensor1YCutLength_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor1YCutLength_get")]
  public static extern global::System.IntPtr FeatureAccess_Sensor1YCutLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor1YCutStart_set")]
  public static extern void FeatureAccess_Sensor1YCutStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor1YCutStart_get")]
  public static extern global::System.IntPtr FeatureAccess_Sensor1YCutStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor2XCutLength_set")]
  public static extern void FeatureAccess_Sensor2XCutLength_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor2XCutLength_get")]
  public static extern global::System.IntPtr FeatureAccess_Sensor2XCutLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor2XCutStart_set")]
  public static extern void FeatureAccess_Sensor2XCutStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor2XCutStart_get")]
  public static extern global::System.IntPtr FeatureAccess_Sensor2XCutStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor2YCutLength_set")]
  public static extern void FeatureAccess_Sensor2YCutLength_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor2YCutLength_get")]
  public static extern global::System.IntPtr FeatureAccess_Sensor2YCutLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor2YCutStart_set")]
  public static extern void FeatureAccess_Sensor2YCutStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Sensor2YCutStart_get")]
  public static extern global::System.IntPtr FeatureAccess_Sensor2YCutStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorADDigitization_set")]
  public static extern void FeatureAccess_SensorADDigitization_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorADDigitization_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorADDigitization_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorDigitizationTaps_set")]
  public static extern void FeatureAccess_SensorDigitizationTaps_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorDigitizationTaps_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorDigitizationTaps_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorEffectCorrection_set")]
  public static extern void FeatureAccess_SensorEffectCorrection_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorEffectCorrection_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorEffectCorrection_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorFiFoOverflowCounter_set")]
  public static extern void FeatureAccess_SensorFiFoOverflowCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorFiFoOverflowCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorFiFoOverflowCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorFiFoOverflowCounterReset_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorFiFoOverflowCounterReset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorHeight_set")]
  public static extern void FeatureAccess_SensorHeight_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorHeight_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorHeight_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorName_set")]
  public static extern void FeatureAccess_SensorName_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorName_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorPixelHeight_set")]
  public static extern void FeatureAccess_SensorPixelHeight_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorPixelHeight_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorPixelHeight_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorPixelWidth_set")]
  public static extern void FeatureAccess_SensorPixelWidth_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorPixelWidth_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorPixelWidth_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorShutterMode_set")]
  public static extern void FeatureAccess_SensorShutterMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorShutterMode_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorShutterMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorTaps_set")]
  public static extern void FeatureAccess_SensorTaps_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorTaps_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorTaps_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorWidth_set")]
  public static extern void FeatureAccess_SensorWidth_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SensorWidth_get")]
  public static extern global::System.IntPtr FeatureAccess_SensorWidth_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerConfigurationMode_set")]
  public static extern void FeatureAccess_SequencerConfigurationMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerConfigurationMode_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerConfigurationMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerFeatureEnable_set")]
  public static extern void FeatureAccess_SequencerFeatureEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerFeatureEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerFeatureEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerFeatureSelector_set")]
  public static extern void FeatureAccess_SequencerFeatureSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerFeatureSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerFeatureSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerMode_set")]
  public static extern void FeatureAccess_SequencerMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerMode_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerPathSelector_set")]
  public static extern void FeatureAccess_SequencerPathSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerPathSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerPathSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetActive_set")]
  public static extern void FeatureAccess_SequencerSetActive_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetActive_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerSetActive_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetLoad_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerSetLoad_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetNext_set")]
  public static extern void FeatureAccess_SequencerSetNext_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetNext_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerSetNext_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetSave_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerSetSave_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetSelector_set")]
  public static extern void FeatureAccess_SequencerSetSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerSetSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetStart_set")]
  public static extern void FeatureAccess_SequencerSetStart_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerSetStart_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerSetStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerTriggerActivation_set")]
  public static extern void FeatureAccess_SequencerTriggerActivation_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerTriggerActivation_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerTriggerActivation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerTriggerSource_set")]
  public static extern void FeatureAccess_SequencerTriggerSource_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SequencerTriggerSource_get")]
  public static extern global::System.IntPtr FeatureAccess_SequencerTriggerSource_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingCalibrationStart_get")]
  public static extern global::System.IntPtr FeatureAccess_ShadingCalibrationStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingEnable_set")]
  public static extern void FeatureAccess_ShadingEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_ShadingEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingMaxGain_set")]
  public static extern void FeatureAccess_ShadingMaxGain_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingMaxGain_get")]
  public static extern global::System.IntPtr FeatureAccess_ShadingMaxGain_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingPortAddress_set")]
  public static extern void FeatureAccess_ShadingPortAddress_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingPortAddress_get")]
  public static extern global::System.IntPtr FeatureAccess_ShadingPortAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingSelector_set")]
  public static extern void FeatureAccess_ShadingSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_ShadingSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingXBorder_set")]
  public static extern void FeatureAccess_ShadingXBorder_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingXBorder_get")]
  public static extern global::System.IntPtr FeatureAccess_ShadingXBorder_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingYBorder_set")]
  public static extern void FeatureAccess_ShadingYBorder_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShadingYBorder_get")]
  public static extern global::System.IntPtr FeatureAccess_ShadingYBorder_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningEnable_set")]
  public static extern void FeatureAccess_SharpeningEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_SharpeningEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningFactor_set")]
  public static extern void FeatureAccess_SharpeningFactor_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningFactor_get")]
  public static extern global::System.IntPtr FeatureAccess_SharpeningFactor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningMode_set")]
  public static extern void FeatureAccess_SharpeningMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningMode_get")]
  public static extern global::System.IntPtr FeatureAccess_SharpeningMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningSensitivityThreshold_set")]
  public static extern void FeatureAccess_SharpeningSensitivityThreshold_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningSensitivityThreshold_get")]
  public static extern global::System.IntPtr FeatureAccess_SharpeningSensitivityThreshold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningSensitvityThreshold_set")]
  public static extern void FeatureAccess_SharpeningSensitvityThreshold_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SharpeningSensitvityThreshold_get")]
  public static extern global::System.IntPtr FeatureAccess_SharpeningSensitvityThreshold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShortExposureTimeEnable_set")]
  public static extern void FeatureAccess_ShortExposureTimeEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShortExposureTimeEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_ShortExposureTimeEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShutterLineCorrectionEnable_set")]
  public static extern void FeatureAccess_ShutterLineCorrectionEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShutterLineCorrectionEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_ShutterLineCorrectionEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShutterLineOffsetEven_set")]
  public static extern void FeatureAccess_ShutterLineOffsetEven_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShutterLineOffsetEven_get")]
  public static extern global::System.IntPtr FeatureAccess_ShutterLineOffsetEven_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShutterLineOffsetOdd_set")]
  public static extern void FeatureAccess_ShutterLineOffsetOdd_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_ShutterLineOffsetOdd_get")]
  public static extern global::System.IntPtr FeatureAccess_ShutterLineOffsetOdd_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SourceCount_set")]
  public static extern void FeatureAccess_SourceCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SourceCount_get")]
  public static extern global::System.IntPtr FeatureAccess_SourceCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SourceID_set")]
  public static extern void FeatureAccess_SourceID_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SourceID_get")]
  public static extern global::System.IntPtr FeatureAccess_SourceID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SourceIDValue_set")]
  public static extern void FeatureAccess_SourceIDValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SourceIDValue_get")]
  public static extern global::System.IntPtr FeatureAccess_SourceIDValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SourceSelector_set")]
  public static extern void FeatureAccess_SourceSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SourceSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_SourceSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchMACAddressTableEntryIsValid_set")]
  public static extern void FeatureAccess_SwitchMACAddressTableEntryIsValid_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchMACAddressTableEntryIsValid_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchMACAddressTableEntryIsValid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchMACAddressTableEntryMACAddress_set")]
  public static extern void FeatureAccess_SwitchMACAddressTableEntryMACAddress_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchMACAddressTableEntryMACAddress_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchMACAddressTableEntryMACAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchMACAddressTableEntryPortNumber_set")]
  public static extern void FeatureAccess_SwitchMACAddressTableEntryPortNumber_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchMACAddressTableEntryPortNumber_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchMACAddressTableEntryPortNumber_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchMACAddressTableEntrySelector_set")]
  public static extern void FeatureAccess_SwitchMACAddressTableEntrySelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchMACAddressTableEntrySelector_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchMACAddressTableEntrySelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchNumberOfMACAddresses_set")]
  public static extern void FeatureAccess_SwitchNumberOfMACAddresses_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchNumberOfMACAddresses_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchNumberOfMACAddresses_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchNumberOfPorts_set")]
  public static extern void FeatureAccess_SwitchNumberOfPorts_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchNumberOfPorts_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchNumberOfPorts_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortBroadcastValidCounter_set")]
  public static extern void FeatureAccess_SwitchPortBroadcastValidCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortBroadcastValidCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortBroadcastValidCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortBufferFullCounter_set")]
  public static extern void FeatureAccess_SwitchPortBufferFullCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortBufferFullCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortBufferFullCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortBufferSize_set")]
  public static extern void FeatureAccess_SwitchPortBufferSize_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortBufferSize_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortBufferSize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortCRCErrorCounter_set")]
  public static extern void FeatureAccess_SwitchPortCRCErrorCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortCRCErrorCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortCRCErrorCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortMulticastValidCounter_set")]
  public static extern void FeatureAccess_SwitchPortMulticastValidCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortMulticastValidCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortMulticastValidCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortNumberOfBuffers_set")]
  public static extern void FeatureAccess_SwitchPortNumberOfBuffers_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortNumberOfBuffers_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortNumberOfBuffers_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortPAUSEFrameReceptionCounter_set")]
  public static extern void FeatureAccess_SwitchPortPAUSEFrameReceptionCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortPAUSEFrameReceptionCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortPAUSEFrameReceptionCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortPacketSizeErrorCounter_set")]
  public static extern void FeatureAccess_SwitchPortPacketSizeErrorCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortPacketSizeErrorCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortPacketSizeErrorCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortSelector_set")]
  public static extern void FeatureAccess_SwitchPortSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortUnicastValidCounter_set")]
  public static extern void FeatureAccess_SwitchPortUnicastValidCounter_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchPortUnicastValidCounter_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchPortUnicastValidCounter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchVersion_set")]
  public static extern void FeatureAccess_SwitchVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_SwitchVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_SwitchVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TLParamsLocked_set")]
  public static extern void FeatureAccess_TLParamsLocked_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TLParamsLocked_get")]
  public static extern global::System.IntPtr FeatureAccess_TLParamsLocked_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TestPattern_set")]
  public static extern void FeatureAccess_TestPattern_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TestPattern_get")]
  public static extern global::System.IntPtr FeatureAccess_TestPattern_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TestPatternGeneratorSelector_set")]
  public static extern void FeatureAccess_TestPatternGeneratorSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TestPatternGeneratorSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_TestPatternGeneratorSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TestPendingAck_set")]
  public static extern void FeatureAccess_TestPendingAck_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TestPendingAck_get")]
  public static extern global::System.IntPtr FeatureAccess_TestPendingAck_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerDelay_set")]
  public static extern void FeatureAccess_TimerDelay_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerDelay_get")]
  public static extern global::System.IntPtr FeatureAccess_TimerDelay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerDuration_set")]
  public static extern void FeatureAccess_TimerDuration_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerDuration_get")]
  public static extern global::System.IntPtr FeatureAccess_TimerDuration_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerSelector_set")]
  public static extern void FeatureAccess_TimerSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_TimerSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerTriggerActivation_set")]
  public static extern void FeatureAccess_TimerTriggerActivation_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerTriggerActivation_get")]
  public static extern global::System.IntPtr FeatureAccess_TimerTriggerActivation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerTriggerSource_set")]
  public static extern void FeatureAccess_TimerTriggerSource_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimerTriggerSource_get")]
  public static extern global::System.IntPtr FeatureAccess_TimerTriggerSource_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatch_get")]
  public static extern global::System.IntPtr FeatureAccess_TimestampLatch_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValue_set")]
  public static extern void FeatureAccess_TimestampLatchValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValue_get")]
  public static extern global::System.IntPtr FeatureAccess_TimestampLatchValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpDays_set")]
  public static extern void FeatureAccess_TimestampLatchValuePtpDays_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpDays_get")]
  public static extern global::System.IntPtr FeatureAccess_TimestampLatchValuePtpDays_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpHours_set")]
  public static extern void FeatureAccess_TimestampLatchValuePtpHours_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpHours_get")]
  public static extern global::System.IntPtr FeatureAccess_TimestampLatchValuePtpHours_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpMinutes_set")]
  public static extern void FeatureAccess_TimestampLatchValuePtpMinutes_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpMinutes_get")]
  public static extern global::System.IntPtr FeatureAccess_TimestampLatchValuePtpMinutes_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpNanoseconds_set")]
  public static extern void FeatureAccess_TimestampLatchValuePtpNanoseconds_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpNanoseconds_get")]
  public static extern global::System.IntPtr FeatureAccess_TimestampLatchValuePtpNanoseconds_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpSeconds_set")]
  public static extern void FeatureAccess_TimestampLatchValuePtpSeconds_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampLatchValuePtpSeconds_get")]
  public static extern global::System.IntPtr FeatureAccess_TimestampLatchValuePtpSeconds_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TimestampReset_get")]
  public static extern global::System.IntPtr FeatureAccess_TimestampReset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferControlMode_set")]
  public static extern void FeatureAccess_TransferControlMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferControlMode_get")]
  public static extern global::System.IntPtr FeatureAccess_TransferControlMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferOperationMode_set")]
  public static extern void FeatureAccess_TransferOperationMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferOperationMode_get")]
  public static extern global::System.IntPtr FeatureAccess_TransferOperationMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferSelector_set")]
  public static extern void FeatureAccess_TransferSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_TransferSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferStart_get")]
  public static extern global::System.IntPtr FeatureAccess_TransferStart_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferStatus_set")]
  public static extern void FeatureAccess_TransferStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_TransferStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferStatusSelector_set")]
  public static extern void FeatureAccess_TransferStatusSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferStatusSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_TransferStatusSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TransferStop_get")]
  public static extern global::System.IntPtr FeatureAccess_TransferStop_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerActivation_set")]
  public static extern void FeatureAccess_TriggerActivation_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerActivation_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerActivation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerCounterLatch_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerCounterLatch_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerCounterLatchValue_set")]
  public static extern void FeatureAccess_TriggerCounterLatchValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerCounterLatchValue_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerCounterLatchValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerCounterReset_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerCounterReset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerDelay_set")]
  public static extern void FeatureAccess_TriggerDelay_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerDelay_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerDelay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerEventTest_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerEventTest_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerMode_set")]
  public static extern void FeatureAccess_TriggerMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerMode_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerOverlap_set")]
  public static extern void FeatureAccess_TriggerOverlap_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerOverlap_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerOverlap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerSelector_set")]
  public static extern void FeatureAccess_TriggerSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerSoftware_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerSoftware_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerSource_set")]
  public static extern void FeatureAccess_TriggerSource_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TriggerSource_get")]
  public static extern global::System.IntPtr FeatureAccess_TriggerSource_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxByteDelay_set")]
  public static extern void FeatureAccess_TxByteDelay_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxByteDelay_get")]
  public static extern global::System.IntPtr FeatureAccess_TxByteDelay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxByteDelayNormalized_set")]
  public static extern void FeatureAccess_TxByteDelayNormalized_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxByteDelayNormalized_get")]
  public static extern global::System.IntPtr FeatureAccess_TxByteDelayNormalized_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxCommandoLength_set")]
  public static extern void FeatureAccess_TxCommandoLength_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxCommandoLength_get")]
  public static extern global::System.IntPtr FeatureAccess_TxCommandoLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxDiscardedMessages_set")]
  public static extern void FeatureAccess_TxDiscardedMessages_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxDiscardedMessages_get")]
  public static extern global::System.IntPtr FeatureAccess_TxDiscardedMessages_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxFiFo_get")]
  public static extern global::System.IntPtr FeatureAccess_TxFiFo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxFiFoFreeBufferCount_set")]
  public static extern void FeatureAccess_TxFiFoFreeBufferCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxFiFoFreeBufferCount_get")]
  public static extern global::System.IntPtr FeatureAccess_TxFiFoFreeBufferCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxMessageDelay_set")]
  public static extern void FeatureAccess_TxMessageDelay_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxMessageDelay_get")]
  public static extern global::System.IntPtr FeatureAccess_TxMessageDelay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxMessageDelayNormalized_set")]
  public static extern void FeatureAccess_TxMessageDelayNormalized_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxMessageDelayNormalized_get")]
  public static extern global::System.IntPtr FeatureAccess_TxMessageDelayNormalized_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxRetryCount_set")]
  public static extern void FeatureAccess_TxRetryCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_TxRetryCount_get")]
  public static extern global::System.IntPtr FeatureAccess_TxRetryCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_USB2SupportEnable_set")]
  public static extern void FeatureAccess_USB2SupportEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_USB2SupportEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_USB2SupportEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserOutputSelector_set")]
  public static extern void FeatureAccess_UserOutputSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserOutputSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_UserOutputSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserOutputValue_set")]
  public static extern void FeatureAccess_UserOutputValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserOutputValue_get")]
  public static extern global::System.IntPtr FeatureAccess_UserOutputValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserOutputValueAll_set")]
  public static extern void FeatureAccess_UserOutputValueAll_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserOutputValueAll_get")]
  public static extern global::System.IntPtr FeatureAccess_UserOutputValueAll_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetData_get")]
  public static extern global::System.IntPtr FeatureAccess_UserSetData_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetDataEnable_set")]
  public static extern void FeatureAccess_UserSetDataEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetDataEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_UserSetDataEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetDefault_set")]
  public static extern void FeatureAccess_UserSetDefault_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetDefault_get")]
  public static extern global::System.IntPtr FeatureAccess_UserSetDefault_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetFeatureEnable_set")]
  public static extern void FeatureAccess_UserSetFeatureEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetFeatureEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_UserSetFeatureEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetFeatureSelector_set")]
  public static extern void FeatureAccess_UserSetFeatureSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetFeatureSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_UserSetFeatureSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetLoad_get")]
  public static extern global::System.IntPtr FeatureAccess_UserSetLoad_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetSave_get")]
  public static extern global::System.IntPtr FeatureAccess_UserSetSave_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetSelector_set")]
  public static extern void FeatureAccess_UserSetSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_UserSetSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetStartAddressSelector_set")]
  public static extern void FeatureAccess_UserSetStartAddressSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_UserSetStartAddressSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_UserSetStartAddressSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_WhiteBalance_get")]
  public static extern global::System.IntPtr FeatureAccess_WhiteBalance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Width_set")]
  public static extern void FeatureAccess_Width_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_Width_get")]
  public static extern global::System.IntPtr FeatureAccess_Width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_WidthMax_set")]
  public static extern void FeatureAccess_WidthMax_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_WidthMax_get")]
  public static extern global::System.IntPtr FeatureAccess_WidthMax_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aActionCommandMACCtrlFramesError_set")]
  public static extern void FeatureAccess_aActionCommandMACCtrlFramesError_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aActionCommandMACCtrlFramesError_get")]
  public static extern global::System.IntPtr FeatureAccess_aActionCommandMACCtrlFramesError_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aActionCommandMACCtrlFramesReceived_set")]
  public static extern void FeatureAccess_aActionCommandMACCtrlFramesReceived_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aActionCommandMACCtrlFramesReceived_get")]
  public static extern global::System.IntPtr FeatureAccess_aActionCommandMACCtrlFramesReceived_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aPAUSEMACCtrlFramesReceived_set")]
  public static extern void FeatureAccess_aPAUSEMACCtrlFramesReceived_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aPAUSEMACCtrlFramesReceived_get")]
  public static extern global::System.IntPtr FeatureAccess_aPAUSEMACCtrlFramesReceived_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aPacketMACCtrlFramesError_set")]
  public static extern void FeatureAccess_aPacketMACCtrlFramesError_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aPacketMACCtrlFramesError_get")]
  public static extern global::System.IntPtr FeatureAccess_aPacketMACCtrlFramesError_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aPacketMACCtrlFramesLost_set")]
  public static extern void FeatureAccess_aPacketMACCtrlFramesLost_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aPacketMACCtrlFramesLost_get")]
  public static extern global::System.IntPtr FeatureAccess_aPacketMACCtrlFramesLost_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aPacketMACCtrlFramesReceived_set")]
  public static extern void FeatureAccess_aPacketMACCtrlFramesReceived_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aPacketMACCtrlFramesReceived_get")]
  public static extern global::System.IntPtr FeatureAccess_aPacketMACCtrlFramesReceived_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aResendMACCtrlFramesError_set")]
  public static extern void FeatureAccess_aResendMACCtrlFramesError_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aResendMACCtrlFramesError_get")]
  public static extern global::System.IntPtr FeatureAccess_aResendMACCtrlFramesError_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aResendMACCtrlFramesReceived_set")]
  public static extern void FeatureAccess_aResendMACCtrlFramesReceived_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_aResendMACCtrlFramesReceived_get")]
  public static extern global::System.IntPtr FeatureAccess_aResendMACCtrlFramesReceived_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationAngularAperture_set")]
  public static extern void FeatureAccess_boCalibrationAngularAperture_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationAngularAperture_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationAngularAperture_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationDataConfigurationMode_set")]
  public static extern void FeatureAccess_boCalibrationDataConfigurationMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationDataConfigurationMode_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationDataConfigurationMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationDataSave_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationDataSave_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationDataVersion_set")]
  public static extern void FeatureAccess_boCalibrationDataVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationDataVersion_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationDataVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationFocalLength_set")]
  public static extern void FeatureAccess_boCalibrationFocalLength_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationFocalLength_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationFocalLength_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationMatrixSelector_set")]
  public static extern void FeatureAccess_boCalibrationMatrixSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationMatrixSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationMatrixSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationMatrixValue_set")]
  public static extern void FeatureAccess_boCalibrationMatrixValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationMatrixValue_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationMatrixValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationMatrixValueSelector_set")]
  public static extern void FeatureAccess_boCalibrationMatrixValueSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationMatrixValueSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationMatrixValueSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationVectorSelector_set")]
  public static extern void FeatureAccess_boCalibrationVectorSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationVectorSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationVectorSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationVectorValue_set")]
  public static extern void FeatureAccess_boCalibrationVectorValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationVectorValue_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationVectorValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationVectorValueSelector_set")]
  public static extern void FeatureAccess_boCalibrationVectorValueSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boCalibrationVectorValueSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_boCalibrationVectorValueSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boGeometryDistortionValue_set")]
  public static extern void FeatureAccess_boGeometryDistortionValue_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boGeometryDistortionValue_get")]
  public static extern global::System.IntPtr FeatureAccess_boGeometryDistortionValue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boGeometryDistortionValueSelector_set")]
  public static extern void FeatureAccess_boGeometryDistortionValueSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boGeometryDistortionValueSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_boGeometryDistortionValueSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialASCIIReadBuffer_set")]
  public static extern void FeatureAccess_boSerialASCIIReadBuffer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialASCIIReadBuffer_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialASCIIReadBuffer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialASCIIWriteBuffer_set")]
  public static extern void FeatureAccess_boSerialASCIIWriteBuffer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialASCIIWriteBuffer_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialASCIIWriteBuffer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBinaryReadBuffer_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialBinaryReadBuffer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBinaryWriteBuffer_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialBinaryWriteBuffer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesAvailableForRead_set")]
  public static extern void FeatureAccess_boSerialBytesAvailableForRead_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesAvailableForRead_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialBytesAvailableForRead_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesRead_set")]
  public static extern void FeatureAccess_boSerialBytesRead_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesRead_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialBytesRead_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesToRead_set")]
  public static extern void FeatureAccess_boSerialBytesToRead_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesToRead_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialBytesToRead_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesToWrite_set")]
  public static extern void FeatureAccess_boSerialBytesToWrite_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesToWrite_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialBytesToWrite_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesWritten_set")]
  public static extern void FeatureAccess_boSerialBytesWritten_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialBytesWritten_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialBytesWritten_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialConfigBaudRate_set")]
  public static extern void FeatureAccess_boSerialConfigBaudRate_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialConfigBaudRate_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialConfigBaudRate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialConfigDataBits_set")]
  public static extern void FeatureAccess_boSerialConfigDataBits_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialConfigDataBits_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialConfigDataBits_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialConfigParity_set")]
  public static extern void FeatureAccess_boSerialConfigParity_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialConfigParity_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialConfigParity_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialConfigStopBits_set")]
  public static extern void FeatureAccess_boSerialConfigStopBits_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialConfigStopBits_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialConfigStopBits_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialMode_set")]
  public static extern void FeatureAccess_boSerialMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialMode_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialRead_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialRead_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialSelector_set")]
  public static extern void FeatureAccess_boSerialSelector_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialSelector_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialSelector_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialStatus_set")]
  public static extern void FeatureAccess_boSerialStatus_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialStatus_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialStatus_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_boSerialWrite_get")]
  public static extern global::System.IntPtr FeatureAccess_boSerialWrite_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_eVAAppletEnable_set")]
  public static extern void FeatureAccess_eVAAppletEnable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_eVAAppletEnable_get")]
  public static extern global::System.IntPtr FeatureAccess_eVAAppletEnable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_eVAAppletOverlappedImages_set")]
  public static extern void FeatureAccess_eVAAppletOverlappedImages_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureAccess_eVAAppletOverlappedImages_get")]
  public static extern global::System.IntPtr FeatureAccess_eVAAppletOverlappedImages_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_NeoImageCallback")]
  public static extern global::System.IntPtr new_NeoImageCallback();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_NeoImageCallback")]
  public static extern void delete_NeoImageCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoImageCallback_ImageCallback")]
  public static extern void NeoImageCallback_ImageCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoImageCallback_ImageCallbackSwigExplicitNeoImageCallback")]
  public static extern void NeoImageCallback_ImageCallbackSwigExplicitNeoImageCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoImageCallback_director_connect")]
  public static extern void NeoImageCallback_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, NeoImageCallback.SwigDelegateNeoImageCallback_0 delegate0);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CamBase__SWIG_0")]
  public static extern global::System.IntPtr new_CamBase__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CamBase__SWIG_1")]
  public static extern global::System.IntPtr new_CamBase__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CamBase")]
  public static extern void delete_CamBase(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_Connect__SWIG_0")]
  public static extern global::System.IntPtr CamBase_Connect__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_Connect__SWIG_1")]
  public static extern global::System.IntPtr CamBase_Connect__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_Disconnect")]
  public static extern global::System.IntPtr CamBase_Disconnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_StartStreaming")]
  public static extern global::System.IntPtr CamBase_StartStreaming(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_StopStreaming")]
  public static extern global::System.IntPtr CamBase_StopStreaming(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetFeature")]
  public static extern global::System.IntPtr CamBase_GetFeature(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_HasFeature")]
  public static extern bool CamBase_HasFeature(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_IsReadable")]
  public static extern bool CamBase_IsReadable(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_IsWritable")]
  public static extern bool CamBase_IsWritable(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_SetFeature__SWIG_0")]
  public static extern global::System.IntPtr CamBase_SetFeature__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, long jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_SetFeature__SWIG_1")]
  public static extern global::System.IntPtr CamBase_SetFeature__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_SetFeature__SWIG_2")]
  public static extern global::System.IntPtr CamBase_SetFeature__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_SetFeature__SWIG_3")]
  public static extern global::System.IntPtr CamBase_SetFeature__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_SetFeature__SWIG_4")]
  public static extern global::System.IntPtr CamBase_SetFeature__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_Execute")]
  public static extern global::System.IntPtr CamBase_Execute(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetFeatureList")]
  public static extern global::System.IntPtr CamBase_GetFeatureList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetRuntimeInfoList")]
  public static extern global::System.IntPtr CamBase_GetRuntimeInfoList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_WriteFeatureStack")]
  public static extern global::System.IntPtr CamBase_WriteFeatureStack(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetImage__SWIG_0")]
  public static extern global::System.IntPtr CamBase_GetImage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetImage__SWIG_1")]
  public static extern global::System.IntPtr CamBase_GetImage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_ClearImages")]
  public static extern global::System.IntPtr CamBase_ClearImages(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_EnableImageCallback")]
  public static extern global::System.IntPtr CamBase_EnableImageCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_DisableImageCallback")]
  public static extern global::System.IntPtr CamBase_DisableImageCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_EnableChunk__SWIG_0")]
  public static extern global::System.IntPtr CamBase_EnableChunk__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_EnableChunk__SWIG_1")]
  public static extern global::System.IntPtr CamBase_EnableChunk__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_DisableChunk__SWIG_0")]
  public static extern global::System.IntPtr CamBase_DisableChunk__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_DisableChunk__SWIG_1")]
  public static extern global::System.IntPtr CamBase_DisableChunk__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_EnableEvent__SWIG_0")]
  public static extern global::System.IntPtr CamBase_EnableEvent__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_EnableEvent__SWIG_1")]
  public static extern global::System.IntPtr CamBase_EnableEvent__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_DisableEvent")]
  public static extern global::System.IntPtr CamBase_DisableEvent(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetEvent__SWIG_0")]
  public static extern global::System.IntPtr CamBase_GetEvent__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetEvent__SWIG_1")]
  public static extern global::System.IntPtr CamBase_GetEvent__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetEvent__SWIG_2")]
  public static extern global::System.IntPtr CamBase_GetEvent__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_ClearEvents__SWIG_0")]
  public static extern global::System.IntPtr CamBase_ClearEvents__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_ClearEvents__SWIG_1")]
  public static extern global::System.IntPtr CamBase_ClearEvents__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_EnableEventCallback__SWIG_0")]
  public static extern global::System.IntPtr CamBase_EnableEventCallback__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_EnableEventCallback__SWIG_1")]
  public static extern global::System.IntPtr CamBase_EnableEventCallback__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_DisableEventCallback__SWIG_0")]
  public static extern global::System.IntPtr CamBase_DisableEventCallback__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_DisableEventCallback__SWIG_1")]
  public static extern global::System.IntPtr CamBase_DisableEventCallback__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetPnPEvent__SWIG_0")]
  public static extern global::System.IntPtr CamBase_GetPnPEvent__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_GetPnPEvent__SWIG_1")]
  public static extern global::System.IntPtr CamBase_GetPnPEvent__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_ClearPnPEvents")]
  public static extern global::System.IntPtr CamBase_ClearPnPEvents(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_EnablePnPEventCallback")]
  public static extern global::System.IntPtr CamBase_EnablePnPEventCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_DisablePnPEventCallback")]
  public static extern global::System.IntPtr CamBase_DisablePnPEventCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_IsConnected_get")]
  public static extern bool CamBase_IsConnected_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_IsStreaming_get")]
  public static extern bool CamBase_IsStreaming_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_ImageBufferCount_set")]
  public static extern void CamBase_ImageBufferCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_ImageBufferCount_get")]
  public static extern uint CamBase_ImageBufferCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_ImageBufferCycleCount_set")]
  public static extern void CamBase_ImageBufferCycleCount_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_ImageBufferCycleCount_get")]
  public static extern uint CamBase_ImageBufferCycleCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_SynchronFeatureMode_set")]
  public static extern void CamBase_SynchronFeatureMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_SynchronFeatureMode_get")]
  public static extern bool CamBase_SynchronFeatureMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_AdjustFeatureValueMode_set")]
  public static extern void CamBase_AdjustFeatureValueMode_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_AdjustFeatureValueMode_get")]
  public static extern bool CamBase_AdjustFeatureValueMode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_IsOnline_get")]
  public static extern bool CamBase_IsOnline_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_OfflineCount_get")]
  public static extern ulong CamBase_OfflineCount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamBase_Info_get")]
  public static extern global::System.IntPtr CamBase_Info_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_Cam__SWIG_0")]
  public static extern global::System.IntPtr new_Cam__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_Cam__SWIG_1")]
  public static extern global::System.IntPtr new_Cam__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_Cam")]
  public static extern void delete_Cam(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Cam_f_get")]
  public static extern global::System.IntPtr Cam_f_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_FeatureStack__SWIG_0")]
  public static extern global::System.IntPtr new_FeatureStack__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_FeatureStack__SWIG_1")]
  public static extern global::System.IntPtr new_FeatureStack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_FeatureStack")]
  public static extern void delete_FeatureStack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureStack_Add__SWIG_0")]
  public static extern global::System.IntPtr FeatureStack_Add__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureStack_Add__SWIG_1")]
  public static extern global::System.IntPtr FeatureStack_Add__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, long jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureStack_Add__SWIG_2")]
  public static extern global::System.IntPtr FeatureStack_Add__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureStack_Add__SWIG_3")]
  public static extern global::System.IntPtr FeatureStack_Add__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureStack_Add__SWIG_4")]
  public static extern global::System.IntPtr FeatureStack_Add__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureStack_Add__SWIG_5")]
  public static extern global::System.IntPtr FeatureStack_Add__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureStack_Clear")]
  public static extern global::System.IntPtr FeatureStack_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureStack_SetReplaceMode__SWIG_0")]
  public static extern global::System.IntPtr FeatureStack_SetReplaceMode__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_FeatureStack_SetReplaceMode__SWIG_1")]
  public static extern global::System.IntPtr FeatureStack_SetReplaceMode__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_Image__SWIG_0")]
  public static extern global::System.IntPtr new_Image__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_Image__SWIG_1")]
  public static extern global::System.IntPtr new_Image__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_Image")]
  public static extern void delete_Image(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_Copy")]
  public static extern global::System.IntPtr Image_Copy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_Save")]
  public static extern void Image_Save(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_Convert__SWIG_0")]
  public static extern global::System.IntPtr Image_Convert__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_Convert__SWIG_1")]
  public static extern global::System.IntPtr Image_Convert__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_IsPixelFormatAvailable")]
  public static extern bool Image_IsPixelFormatAvailable(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_GetChunkList")]
  public static extern global::System.IntPtr Image_GetChunkList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_IsEmpty_get")]
  public static extern bool Image_IsEmpty_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_ImageID_get")]
  public static extern ulong Image_ImageID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_Timestamp_get")]
  public static extern ulong Image_Timestamp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_ImageData_get")]
  public static extern global::System.IntPtr Image_ImageData_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_Size_get")]
  public static extern uint Image_Size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_Height_get")]
  public static extern ulong Image_Height_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_Width_get")]
  public static extern ulong Image_Width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_PixelFormat_get")]
  public static extern string Image_PixelFormat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_XPadding_get")]
  public static extern ulong Image_XPadding_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_YPadding_get")]
  public static extern ulong Image_YPadding_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Image_Compression_get")]
  public static extern int Image_Compression_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CamInfo__SWIG_0")]
  public static extern global::System.IntPtr new_CamInfo__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_CamInfo__SWIG_1")]
  public static extern global::System.IntPtr new_CamInfo__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_CamInfo")]
  public static extern void delete_CamInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_Id_get")]
  public static extern string CamInfo_Id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_ModelName_get")]
  public static extern string CamInfo_ModelName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_SerialNumber_get")]
  public static extern string CamInfo_SerialNumber_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_TLType_get")]
  public static extern string CamInfo_TLType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_VendorName_get")]
  public static extern string CamInfo_VendorName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_USB3VisionGUID_get")]
  public static extern string CamInfo_USB3VisionGUID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_USBPortID_get")]
  public static extern string CamInfo_USBPortID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_GevIpAddress_get")]
  public static extern string CamInfo_GevIpAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_GevSubnetMask_get")]
  public static extern string CamInfo_GevSubnetMask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_GevGateway_get")]
  public static extern string CamInfo_GevGateway_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_GevMACAddress_get")]
  public static extern string CamInfo_GevMACAddress_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfo_IsConnectable_get")]
  public static extern bool CamInfo_IsConnectable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfoList_Get")]
  public static extern global::System.IntPtr CamInfoList_Get();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfoList_IndexToCamInfo")]
  public static extern global::System.IntPtr CamInfoList_IndexToCamInfo(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfoList_Refresh")]
  public static extern bool CamInfoList_Refresh(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfoList_size")]
  public static extern uint CamInfoList_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfoList_GetPnPEvent__SWIG_0")]
  public static extern global::System.IntPtr CamInfoList_GetPnPEvent__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfoList_GetPnPEvent__SWIG_1")]
  public static extern global::System.IntPtr CamInfoList_GetPnPEvent__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfoList_ClearPnPEvents")]
  public static extern global::System.IntPtr CamInfoList_ClearPnPEvents(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfoList_EnablePnPEventCallback")]
  public static extern global::System.IntPtr CamInfoList_EnablePnPEventCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CamInfoList_DisablePnPEventCallback")]
  public static extern global::System.IntPtr CamInfoList_DisablePnPEventCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_NeoTraceCallback")]
  public static extern global::System.IntPtr new_NeoTraceCallback();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_NeoTraceCallback")]
  public static extern void delete_NeoTraceCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTraceCallback_LogCallback")]
  public static extern void NeoTraceCallback_LogCallback(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTraceCallback_LogCallbackSwigExplicitNeoTraceCallback")]
  public static extern void NeoTraceCallback_LogCallbackSwigExplicitNeoTraceCallback(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTraceCallback_director_connect")]
  public static extern void NeoTraceCallback_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, NeoTraceCallback.SwigDelegateNeoTraceCallback_0 delegate0);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_new_NeoTrace")]
  public static extern global::System.IntPtr new_NeoTrace();

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_delete_NeoTrace")]
  public static extern void delete_NeoTrace(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_Info__SWIG_0")]
  public static extern void NeoTrace_Info__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_Info__SWIG_1")]
  public static extern void NeoTrace_Info__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, global::System.IntPtr jarg5);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_Info__SWIG_2")]
  public static extern void NeoTrace_Info__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_Warning__SWIG_0")]
  public static extern void NeoTrace_Warning__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_Warning__SWIG_1")]
  public static extern void NeoTrace_Warning__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, global::System.IntPtr jarg5);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_Warning__SWIG_2")]
  public static extern void NeoTrace_Warning__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_Error__SWIG_0")]
  public static extern void NeoTrace_Error__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_Error__SWIG_1")]
  public static extern void NeoTrace_Error__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, global::System.IntPtr jarg5);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_Error__SWIG_2")]
  public static extern void NeoTrace_Error__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_EnableLogfile")]
  public static extern void NeoTrace_EnableLogfile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_DisableLogfile")]
  public static extern void NeoTrace_DisableLogfile(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_EnableLogCallback")]
  public static extern void NeoTrace_EnableLogCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_DisableLogCallback")]
  public static extern void NeoTrace_DisableLogCallback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_NeoTrace_SetSeverity")]
  public static extern void NeoTrace_SetSeverity(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_DoubleFeature_SWIGUpcast")]
  public static extern global::System.IntPtr DoubleFeature_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_IntegerFeature_SWIGUpcast")]
  public static extern global::System.IntPtr IntegerFeature_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_StringFeature_SWIGUpcast")]
  public static extern global::System.IntPtr StringFeature_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_BoolFeature_SWIGUpcast")]
  public static extern global::System.IntPtr BoolFeature_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CommandFeature_SWIGUpcast")]
  public static extern global::System.IntPtr CommandFeature_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_EnumerationFeature_SWIGUpcast")]
  public static extern global::System.IntPtr EnumerationFeature_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_RegisterFeature_SWIGUpcast")]
  public static extern global::System.IntPtr RegisterFeature_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAcquisitionMode_SWIGUpcast")]
  public static extern global::System.IntPtr CAcquisitionMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAcquisitionStatusSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CAcquisitionStatusSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CApertureStatus_SWIGUpcast")]
  public static extern global::System.IntPtr CApertureStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAutoFeatureRegionMode_SWIGUpcast")]
  public static extern global::System.IntPtr CAutoFeatureRegionMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAutoFeatureRegionReference_SWIGUpcast")]
  public static extern global::System.IntPtr CAutoFeatureRegionReference_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CAutoFeatureRegionSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CAutoFeatureRegionSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBOPFShift_SWIGUpcast")]
  public static extern global::System.IntPtr CBOPFShift_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBalanceWhiteAuto_SWIGUpcast")]
  public static extern global::System.IntPtr CBalanceWhiteAuto_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBalanceWhiteAutoStatus_SWIGUpcast")]
  public static extern global::System.IntPtr CBalanceWhiteAutoStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBaudrate_SWIGUpcast")]
  public static extern global::System.IntPtr CBaudrate_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBinningHorizontalMode_SWIGUpcast")]
  public static extern global::System.IntPtr CBinningHorizontalMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBinningSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CBinningSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBinningVerticalMode_SWIGUpcast")]
  public static extern global::System.IntPtr CBinningVerticalMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBlackLevelSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CBlackLevelSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBlackSunSuppression_SWIGUpcast")]
  public static extern global::System.IntPtr CBlackSunSuppression_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerEnable_SWIGUpcast")]
  public static extern global::System.IntPtr CBoSequencerEnable_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerIOSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CBoSequencerIOSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerMode_SWIGUpcast")]
  public static extern global::System.IntPtr CBoSequencerMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerSensorDigitizationTaps_SWIGUpcast")]
  public static extern global::System.IntPtr CBoSequencerSensorDigitizationTaps_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBoSequencerStart_SWIGUpcast")]
  public static extern global::System.IntPtr CBoSequencerStart_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBrightnessAutoPriority_SWIGUpcast")]
  public static extern global::System.IntPtr CBrightnessAutoPriority_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CBrightnessCorrection_SWIGUpcast")]
  public static extern global::System.IntPtr CBrightnessCorrection_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCalibrationMatrixValueSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CCalibrationMatrixValueSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CChunkSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CChunkSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CClConfiguration_SWIGUpcast")]
  public static extern global::System.IntPtr CClConfiguration_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CClTimeSlotsCount_SWIGUpcast")]
  public static extern global::System.IntPtr CClTimeSlotsCount_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationAuto_SWIGUpcast")]
  public static extern global::System.IntPtr CColorTransformationAuto_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationFactoryListSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CColorTransformationFactoryListSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CColorTransformationSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CColorTransformationValueSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CColorTransformationValueSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CComponentSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CComponentSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterEventActivation_SWIGUpcast")]
  public static extern global::System.IntPtr CCounterEventActivation_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterEventSource_SWIGUpcast")]
  public static extern global::System.IntPtr CCounterEventSource_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterResetActivation_SWIGUpcast")]
  public static extern global::System.IntPtr CCounterResetActivation_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterResetSource_SWIGUpcast")]
  public static extern global::System.IntPtr CCounterResetSource_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCounterSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CCounterSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CCustomDataConfigurationMode_SWIGUpcast")]
  public static extern global::System.IntPtr CCustomDataConfigurationMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDecimationHorizontalMode_SWIGUpcast")]
  public static extern global::System.IntPtr CDecimationHorizontalMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDecimationVerticalMode_SWIGUpcast")]
  public static extern global::System.IntPtr CDecimationVerticalMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDefectPixelListSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CDefectPixelListSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceCharacterSet_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceCharacterSet_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceClockSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceClockSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceFrontUARTSource_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceFrontUARTSource_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLicense_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceLicense_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLicenseTypeSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceLicenseTypeSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLinkHeartbeatMode_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceLinkHeartbeatMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceLinkSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceLinkSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceRegistersEndianness_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceRegistersEndianness_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceScanType_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceScanType_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSensorSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceSensorSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSensorType_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceSensorType_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSensorVersion_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceSensorVersion_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSerialPortBaudRate_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceSerialPortBaudRate_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceSerialPortSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceSerialPortSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceStreamChannelEndianness_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceStreamChannelEndianness_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceStreamChannelType_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceStreamChannelType_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTLType_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceTLType_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTapGeometry_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceTapGeometry_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTemperatureSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceTemperatureSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTemperatureStatus_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceTemperatureStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceTemperatureStatusTransitionSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceTemperatureStatusTransitionSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CDeviceType_SWIGUpcast")]
  public static extern global::System.IntPtr CDeviceType_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CEventNotification_SWIGUpcast")]
  public static extern global::System.IntPtr CEventNotification_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CEventSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CEventSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CExposureAuto_SWIGUpcast")]
  public static extern global::System.IntPtr CExposureAuto_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CExposureMode_SWIGUpcast")]
  public static extern global::System.IntPtr CExposureMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CFocalLengthStatus_SWIGUpcast")]
  public static extern global::System.IntPtr CFocalLengthStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CFocusStatus_SWIGUpcast")]
  public static extern global::System.IntPtr CFocusStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGainAuto_SWIGUpcast")]
  public static extern global::System.IntPtr CGainAuto_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGainSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CGainSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevCCP_SWIGUpcast")]
  public static extern global::System.IntPtr CGevCCP_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevGVCPExtendedStatusCodesSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CGevGVCPExtendedStatusCodesSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevIPConfigurationStatus_SWIGUpcast")]
  public static extern global::System.IntPtr CGevIPConfigurationStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CGevSupportedOptionSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CGevSupportedOptionSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CHDRGainRatioSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CHDRGainRatioSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CHDRTonemappingCurvePresetSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CHDRTonemappingCurvePresetSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CImageCompressionJPEGFormatOption_SWIGUpcast")]
  public static extern global::System.IntPtr CImageCompressionJPEGFormatOption_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CImageCompressionMode_SWIGUpcast")]
  public static extern global::System.IntPtr CImageCompressionMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CImageCompressionRateOption_SWIGUpcast")]
  public static extern global::System.IntPtr CImageCompressionRateOption_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CInterfaceSpeedMode_SWIGUpcast")]
  public static extern global::System.IntPtr CInterfaceSpeedMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLUTContent_SWIGUpcast")]
  public static extern global::System.IntPtr CLUTContent_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLUTSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CLUTSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineFormat_SWIGUpcast")]
  public static extern global::System.IntPtr CLineFormat_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineMode_SWIGUpcast")]
  public static extern global::System.IntPtr CLineMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLinePWMConfigurationMode_SWIGUpcast")]
  public static extern global::System.IntPtr CLinePWMConfigurationMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLinePWMMode_SWIGUpcast")]
  public static extern global::System.IntPtr CLinePWMMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CLineSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CLineSource_SWIGUpcast")]
  public static extern global::System.IntPtr CLineSource_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryActivePart_SWIGUpcast")]
  public static extern global::System.IntPtr CMemoryActivePart_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryMode_SWIGUpcast")]
  public static extern global::System.IntPtr CMemoryMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryPartIncrementSource_SWIGUpcast")]
  public static extern global::System.IntPtr CMemoryPartIncrementSource_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryPartMode_SWIGUpcast")]
  public static extern global::System.IntPtr CMemoryPartMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CMemoryPartSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CMemoryPartSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_COpticControllerSelector_SWIGUpcast")]
  public static extern global::System.IntPtr COpticControllerSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_COpticControllerStatus_SWIGUpcast")]
  public static extern global::System.IntPtr COpticControllerStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPartialScanEnabled_SWIGUpcast")]
  public static extern global::System.IntPtr CPartialScanEnabled_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPixelFormat_SWIGUpcast")]
  public static extern global::System.IntPtr CPixelFormat_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpClockAccuracy_SWIGUpcast")]
  public static extern global::System.IntPtr CPtpClockAccuracy_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpClockOffsetMode_SWIGUpcast")]
  public static extern global::System.IntPtr CPtpClockOffsetMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpDriftOffsetMode_SWIGUpcast")]
  public static extern global::System.IntPtr CPtpDriftOffsetMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpMode_SWIGUpcast")]
  public static extern global::System.IntPtr CPtpMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpServoStatus_SWIGUpcast")]
  public static extern global::System.IntPtr CPtpServoStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpStatus_SWIGUpcast")]
  public static extern global::System.IntPtr CPtpStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpSyncMessageIntervalStatus_SWIGUpcast")]
  public static extern global::System.IntPtr CPtpSyncMessageIntervalStatus_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CPtpTimestampOffsetMode_SWIGUpcast")]
  public static extern global::System.IntPtr CPtpTimestampOffsetMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CReadOutBuffering_SWIGUpcast")]
  public static extern global::System.IntPtr CReadOutBuffering_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CReadoutMode_SWIGUpcast")]
  public static extern global::System.IntPtr CReadoutMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionAcquisitionMode_SWIGUpcast")]
  public static extern global::System.IntPtr CRegionAcquisitionMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionConfigurationMode_SWIGUpcast")]
  public static extern global::System.IntPtr CRegionConfigurationMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionMode_SWIGUpcast")]
  public static extern global::System.IntPtr CRegionMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CRegionSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CRegionTransferMode_SWIGUpcast")]
  public static extern global::System.IntPtr CRegionTransferMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSIControl_SWIGUpcast")]
  public static extern global::System.IntPtr CSIControl_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorADDigitization_SWIGUpcast")]
  public static extern global::System.IntPtr CSensorADDigitization_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorDigitizationTaps_SWIGUpcast")]
  public static extern global::System.IntPtr CSensorDigitizationTaps_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorShutterMode_SWIGUpcast")]
  public static extern global::System.IntPtr CSensorShutterMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSensorTaps_SWIGUpcast")]
  public static extern global::System.IntPtr CSensorTaps_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerConfigurationMode_SWIGUpcast")]
  public static extern global::System.IntPtr CSequencerConfigurationMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerFeatureSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CSequencerFeatureSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerMode_SWIGUpcast")]
  public static extern global::System.IntPtr CSequencerMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerTriggerActivation_SWIGUpcast")]
  public static extern global::System.IntPtr CSequencerTriggerActivation_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSequencerTriggerSource_SWIGUpcast")]
  public static extern global::System.IntPtr CSequencerTriggerSource_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CShadingSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CShadingSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSharpeningMode_SWIGUpcast")]
  public static extern global::System.IntPtr CSharpeningMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSourceID_SWIGUpcast")]
  public static extern global::System.IntPtr CSourceID_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSourceSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CSourceSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CSwitchPortSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CSwitchPortSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTestPattern_SWIGUpcast")]
  public static extern global::System.IntPtr CTestPattern_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTestPatternGeneratorSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CTestPatternGeneratorSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTimerSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CTimerSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTimerTriggerActivation_SWIGUpcast")]
  public static extern global::System.IntPtr CTimerTriggerActivation_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTimerTriggerSource_SWIGUpcast")]
  public static extern global::System.IntPtr CTimerTriggerSource_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferControlMode_SWIGUpcast")]
  public static extern global::System.IntPtr CTransferControlMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferOperationMode_SWIGUpcast")]
  public static extern global::System.IntPtr CTransferOperationMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CTransferSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTransferStatusSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CTransferStatusSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerActivation_SWIGUpcast")]
  public static extern global::System.IntPtr CTriggerActivation_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerMode_SWIGUpcast")]
  public static extern global::System.IntPtr CTriggerMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerOverlap_SWIGUpcast")]
  public static extern global::System.IntPtr CTriggerOverlap_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CTriggerSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CTriggerSource_SWIGUpcast")]
  public static extern global::System.IntPtr CTriggerSource_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserOutputSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CUserOutputSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserSetDefault_SWIGUpcast")]
  public static extern global::System.IntPtr CUserSetDefault_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserSetFeatureSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CUserSetFeatureSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CUserSetSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CUserSetSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationDataConfigurationMode_SWIGUpcast")]
  public static extern global::System.IntPtr CboCalibrationDataConfigurationMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationMatrixSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CboCalibrationMatrixSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationMatrixValueSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CboCalibrationMatrixValueSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationVectorSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CboCalibrationVectorSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboCalibrationVectorValueSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CboCalibrationVectorValueSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboGeometryDistortionValueSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CboGeometryDistortionValueSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigBaudRate_SWIGUpcast")]
  public static extern global::System.IntPtr CboSerialConfigBaudRate_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigDataBits_SWIGUpcast")]
  public static extern global::System.IntPtr CboSerialConfigDataBits_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigParity_SWIGUpcast")]
  public static extern global::System.IntPtr CboSerialConfigParity_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialConfigStopBits_SWIGUpcast")]
  public static extern global::System.IntPtr CboSerialConfigStopBits_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialMode_SWIGUpcast")]
  public static extern global::System.IntPtr CboSerialMode_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_CboSerialSelector_SWIGUpcast")]
  public static extern global::System.IntPtr CboSerialSelector_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("neoapi_csharp", EntryPoint="CSharp_NeoAPI_Cam_SWIGUpcast")]
  public static extern global::System.IntPtr Cam_SWIGUpcast(global::System.IntPtr jarg1);
}

}
namespace NeoAPI {


  /// <summary>
  /// No camera connected Exception
  /// </summary>
  public class NotConnectedException  : global::NeoAPI.NeoException {
    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="message">A string with the Exception message</param>
    public NotConnectedException(string message) : base(message) {}
  }
  /// <summary>
  /// Camera not accessible Exception
  /// </summary>
  public class NoAccessException      : global::NeoAPI.NeoException {
    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="message">A string with the Exception message</param>
    public NoAccessException(string message) : base(message) {}
  }
  /// <summary>
  /// Feature not accessible Exception
  /// </summary>
  public class FeatureAccessException : global::NeoAPI.NeoException {
    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="message">A string with the Exception message</param>
    public FeatureAccessException(string message) : base(message) {}
  }
  /// <summary>
  /// Requesting an image while holding all available image buffer resources
  /// </summary>
  public class NoImageBufferException : global::NeoAPI.NeoException {
    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="message">A string with the Exception message</param>
    public NoImageBufferException(string message) : base(message) {}
  }
  /// <summary>
  /// File not accessible Exception
  /// </summary>
  public class FileAccessException    : global::NeoAPI.NeoException {
    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="message">A string with the Exception message</param>
    public FileAccessException(string message) : base(message) {}
  }
  /// <summary>
  /// Base neoAPI Exception class
  /// </summary>
  public class NeoException              : global::System.Exception {
    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="message">A string with the Exception message</param>
    public NeoException(string message) : base(message) {}
  }
public class neoapi_csharp {
  public static string CSharp_NeoAPI_GetLibraryVersion() {
    string ret = neoapi_csharpPINVOKE.CSharp_NeoAPI_GetLibraryVersion();
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static global::System.IntPtr create_NeoStringList() {
    global::System.IntPtr ret = neoapi_csharpPINVOKE.create_NeoStringList();
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void remove_NeoStringList(global::System.IntPtr arg1) {
    neoapi_csharpPINVOKE.remove_NeoStringList(arg1);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint NeoStringList_len(global::System.IntPtr arg1) {
    uint ret = neoapi_csharpPINVOKE.NeoStringList_len(arg1);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string NeoStringList_Get(global::System.IntPtr arg1, uint arg2) {
    string ret = neoapi_csharpPINVOKE.NeoStringList_Get(arg1, arg2);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void CamBase_GetAvailableChunks_List(global::System.IntPtr arg1, global::System.IntPtr arg2) {
    neoapi_csharpPINVOKE.CamBase_GetAvailableChunks_List(arg1, arg2);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CamBase_GetAvailableEvents_List(global::System.IntPtr arg1, global::System.IntPtr arg2) {
    neoapi_csharpPINVOKE.CamBase_GetAvailableEvents_List(arg1, arg2);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CamBase_GetEnabledEvents_List(global::System.IntPtr arg1, global::System.IntPtr arg2) {
    neoapi_csharpPINVOKE.CamBase_GetEnabledEvents_List(arg1, arg2);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Image_GetAvailablePixelFormats_List(global::System.IntPtr arg1, global::System.IntPtr arg2) {
    neoapi_csharpPINVOKE.Image_GetAvailablePixelFormats_List(arg1, arg2);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static global::System.IntPtr FeatureList_begin(global::System.IntPtr feature_list) {
    global::System.IntPtr ret = neoapi_csharpPINVOKE.FeatureList_begin(feature_list);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static global::System.IntPtr FeatureList_end(global::System.IntPtr feature_list) {
    global::System.IntPtr ret = neoapi_csharpPINVOKE.FeatureList_end(feature_list);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static global::System.IntPtr new_FeatureListIterator__SWIG_0() {
    global::System.IntPtr ret = neoapi_csharpPINVOKE.new_FeatureListIterator__SWIG_0();
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_FeatureListIterator(global::System.IntPtr feature_list_iter) {
    neoapi_csharpPINVOKE.delete_FeatureListIterator(feature_list_iter);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool FeatureListIterator_operator_not_equal(global::System.IntPtr feature_list_iter1, global::System.IntPtr feature_list_iter2) {
    bool ret = neoapi_csharpPINVOKE.FeatureListIterator_operator_not_equal(feature_list_iter1, feature_list_iter2);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static global::System.IntPtr FeatureListIterator_operator_plus_plus_postfix(global::System.IntPtr feature_list_iter) {
    global::System.IntPtr ret = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_postfix(feature_list_iter);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static global::System.IntPtr FeatureListIterator_operator_plus_plus_prefix(global::System.IntPtr jarg1, int jarg2) {
    global::System.IntPtr ret = neoapi_csharpPINVOKE.FeatureListIterator_operator_plus_plus_prefix(jarg1, jarg2);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static global::System.IntPtr FeatureListIterator___ref__(global::System.IntPtr feature_list_iter) {
    global::System.IntPtr ret = neoapi_csharpPINVOKE.FeatureListIterator___ref__(feature_list_iter);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string FeatureListIterator_GetName(global::System.IntPtr feature_list_iter) {
    string ret = neoapi_csharpPINVOKE.FeatureListIterator_GetName(feature_list_iter);
    if (neoapi_csharpPINVOKE.SWIGPendingException.Pending) throw neoapi_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
